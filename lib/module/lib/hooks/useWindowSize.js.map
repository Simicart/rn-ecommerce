{"version":3,"sources":["useWindowSize.js"],"names":["React","createContext","useContext","useState","useEventListener","WindowSizeContext","getSize","innerHeight","window","innerWidth","outerHeight","outerWidth","useWindowSizeListener","windowSize","setWindowSize","handleResize","WindowSizeContextProvider","props","children","useWindowSize"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,MAAMC,iBAAiB,gBAAGJ,aAAa,EAAvC;;AAEA,MAAMK,OAAO,GAAG,MAAM;AAClB,SAAO;AACHC,IAAAA,WAAW,EAAEC,MAAM,CAACD,WADjB;AAEHE,IAAAA,UAAU,EAAED,MAAM,CAACC,UAFhB;AAGHC,IAAAA,WAAW,EAAEF,MAAM,CAACE,WAHjB;AAIHC,IAAAA,UAAU,EAAEH,MAAM,CAACG;AAJhB,GAAP;AAMH,CAPD;AASA;;;;;;;;;AAOA,MAAMC,qBAAqB,GAAG,MAAM;AAChC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAACG,OAAO,EAAR,CAA5C;;AAEA,QAAMS,YAAY,GAAG,MAAM;AACvBD,IAAAA,aAAa,CAACR,OAAO,EAAR,CAAb;AACH,GAFD;;AAIAF,EAAAA,gBAAgB,CAACI,MAAD,EAAS,QAAT,EAAmBO,YAAnB,CAAhB;AAEA,SAAOF,UAAP;AACH,CAVD;AAYA;;;;;;;;;;;;;;;;AAcA,OAAO,MAAMG,yBAAyB,GAAGC,KAAK,IAAI;AAC9C;AACA;AACA,QAAMJ,UAAU,GAAGD,qBAAqB,EAAxC;AAEA,sBACI,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEC;AAAnC,KACKI,KAAK,CAACC,QADX,CADJ;AAKH,CAVM;AAYP;;;;;;;;;AAQA,OAAO,MAAMC,aAAa,GAAG,MAAMjB,UAAU,CAACG,iBAAD,CAAtC","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { useEventListener } from './useEventListener';\n\nconst WindowSizeContext = createContext();\n\nconst getSize = () => {\n    return {\n        innerHeight: window.innerHeight,\n        innerWidth: window.innerWidth,\n        outerHeight: window.outerHeight,\n        outerWidth: window.outerWidth\n    };\n};\n\n/**\n * A hook that will return inner and outer height and width values whenever\n * the window is resized.\n *\n * @kind function\n * @private\n */\nconst useWindowSizeListener = () => {\n    const [windowSize, setWindowSize] = useState(getSize());\n\n    const handleResize = () => {\n        setWindowSize(getSize());\n    };\n\n    useEventListener(window, 'resize', handleResize);\n\n    return windowSize;\n};\n\n/**\n * This component contains a hook that listens for resize events.\n * Use this component with {@link useWindowSize} to get the value of the resized window.\n *\n * It is recommended to only create/use a single time at the top level of your app\n * @summary A React context provider.\n *\n * @kind function\n *\n * @param {Object} props - React component props\n *\n * @return {Context.Provider} A [React context provider]{@link https://reactjs.org/docs/context.html}\n *\n */\nexport const WindowSizeContextProvider = props => {\n    // This hook has side effects of adding listeners so we only want to create it\n    // once and store it in context for reference by components.\n    const windowSize = useWindowSizeListener();\n\n    return (\n        <WindowSizeContext.Provider value={windowSize}>\n            {props.children}\n        </WindowSizeContext.Provider>\n    );\n};\n\n/**\n * The current context value for the window size context.\n * This value updates whenever the window is resized.\n *\n * Use this inside a {@link WindowSizeContextProvider}.\n *\n * @type number\n */\nexport const useWindowSize = () => useContext(WindowSizeContext);\n"]}