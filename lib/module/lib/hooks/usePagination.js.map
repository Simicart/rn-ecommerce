{"version":3,"sources":["usePagination.js"],"names":["useCallback","useMemo","useState","useEffect","useHistory","useLocation","getSearchParam","setQueryParam","history","location","parameter","replace","value","search","queryParams","URLSearchParams","set","destination","toString","push","defaultInitialPage","usePagination","props","namespace","initialTotalPages","totalPages","setTotalPages","searchParam","initialPage","currentPage","parseInt","setCurrentPage","page","paginationState","api"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAEA;;;;;;AAKA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA,SAArB;AAAgCC,EAAAA,OAAhC;AAAyCC,EAAAA;AAAzC,CAAD,KAAsD;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAaJ,QAAnB;AACA,QAAMK,WAAW,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,CAApB;AAEAC,EAAAA,WAAW,CAACE,GAAZ,CAAgBN,SAAhB,EAA2BE,KAA3B;AACA,QAAMK,WAAW,GAAG;AAAEJ,IAAAA,MAAM,EAAEC,WAAW,CAACI,QAAZ;AAAV,GAApB;;AAEA,MAAIP,OAAJ,EAAa;AACTH,IAAAA,OAAO,CAACG,OAAR,CAAgBM,WAAhB;AACH,GAFD,MAEO;AACHT,IAAAA,OAAO,CAACW,IAAR,CAAaF,WAAb;AACH;AACJ,CAZD;;AAcA,MAAMG,kBAAkB,GAAG,CAA3B;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AACzC,QAAM;AAAEC,IAAAA,SAAS,GAAG,EAAd;AAAkBb,IAAAA,SAAS,GAAG,MAA9B;AAAsCc,IAAAA,iBAAiB,GAAG;AAA1D,MAAgEF,KAAtE;AAEA,QAAMd,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAMK,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BxB,QAAQ,CAACsB,iBAAD,CAA5C;AAEA,QAAMG,WAAW,GAAGJ,SAAS,aAAMA,SAAN,cAAmBb,SAAnB,IAAiCA,SAA9D;AACA,QAAMkB,WAAW,GAAGN,KAAK,CAACM,WAAN,IAAqBR,kBAAzC;AACA,QAAMS,WAAW,GAAGC,QAAQ,CAACxB,cAAc,CAACqB,WAAD,EAAclB,QAAd,CAAf,CAA5B,CATyC,CAWzC;;AACA,QAAMsB,cAAc,GAAG/B,WAAW,CAC9B,CAACgC,IAAD,EAAOrB,OAAO,GAAG,KAAjB,KAA2B;AACvB;AACAJ,IAAAA,aAAa,CAAC;AACVC,MAAAA,OADU;AAEVC,MAAAA,QAFU;AAGVC,MAAAA,SAAS,EAAEiB,WAHD;AAIVhB,MAAAA,OAJU;AAKVC,MAAAA,KAAK,EAAEoB;AALG,KAAD,CAAb;AAOH,GAV6B,EAW9B,CAACxB,OAAD,EAAUC,QAAV,EAAoBkB,WAApB,CAX8B,CAAlC,CAZyC,CA0BzC;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAAC0B,WAAL,EAAkB;AACdE,MAAAA,cAAc,CAACH,WAAD,EAAc,IAAd,CAAd;AACH;AACJ,GAJQ,EAIN,CAACC,WAAD,EAAcD,WAAd,EAA2BG,cAA3B,CAJM,CAAT;AAMA;;;;;;;;;;;AAUA,QAAME,eAAe,GAAG;AACpBJ,IAAAA,WAAW,EAAEA,WAAW,IAAID,WADR;AAEpBH,IAAAA;AAFoB,GAAxB;AAKA;;;;;;;;AAOA;;;;;;;;AAOA;;;;;;;;AAOA,QAAMS,GAAG,GAAGjC,OAAO,CACf,OAAO;AACH8B,IAAAA,cADG;AAEHL,IAAAA;AAFG,GAAP,CADe,EAKf,CAACK,cAAD,EAAiBL,aAAjB,CALe,CAAnB;AAQA,SAAO,CAACO,eAAD,EAAkBC,GAAlB,CAAP;AACH,CA9EM","sourcesContent":["import { useCallback, useMemo, useState, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { getSearchParam } from './useSearchParam';\n\n/**\n * Sets a query parameter in history.\n *\n * @private\n */\nconst setQueryParam = ({ history, location, parameter, replace, value }) => {\n    const { search } = location;\n    const queryParams = new URLSearchParams(search);\n\n    queryParams.set(parameter, value);\n    const destination = { search: queryParams.toString() };\n\n    if (replace) {\n        history.replace(destination);\n    } else {\n        history.push(destination);\n    }\n};\n\nconst defaultInitialPage = 1;\n\n/**\n * A [React Hook]{@link https://reactjs.org/docs/hooks-intro.html} that provides\n * pagination logic.\n *\n * Use this hook to implement components that need to navigate through paged\n * data.\n *\n * @kind function\n *\n * @param {Object} config An object containing configuration values\n *\n * @param {String} config.namespace='' The namespace to append to config.parameter in the query. For example: ?namespace_parameter=value\n * @param {String} config.parameter='page' The name of the query parameter to use for page\n * @param {Number} config.initialPage The initial current page value\n * @param {Number} config.initialTotalPages=1 The total pages expected to be usable by this hook\n *\n * @return {Object[]} An array with two entries containing the following content: [ {@link PaginationState}, {@link API} ]\n */\nexport const usePagination = (props = {}) => {\n    const { namespace = '', parameter = 'page', initialTotalPages = 1 } = props;\n\n    const history = useHistory();\n    const location = useLocation();\n    const [totalPages, setTotalPages] = useState(initialTotalPages);\n\n    const searchParam = namespace ? `${namespace}_${parameter}` : parameter;\n    const initialPage = props.initialPage || defaultInitialPage;\n    const currentPage = parseInt(getSearchParam(searchParam, location));\n\n    // use the location to hold state\n    const setCurrentPage = useCallback(\n        (page, replace = false) => {\n            // Update the query parameter.\n            setQueryParam({\n                history,\n                location,\n                parameter: searchParam,\n                replace,\n                value: page\n            });\n        },\n        [history, location, searchParam]\n    );\n\n    // ensure the location contains a page number\n    useEffect(() => {\n        if (!currentPage) {\n            setCurrentPage(initialPage, true);\n        }\n    }, [currentPage, initialPage, setCurrentPage]);\n\n    /**\n     * The current pagination state\n     *\n     * @typedef PaginationState\n     *\n     * @kind Object\n     *\n     * @property {Number} currentPage The current page number\n     * @property {Number} totalPages The total number of pages\n     */\n    const paginationState = {\n        currentPage: currentPage || initialPage,\n        totalPages\n    };\n\n    /**\n     * The API object used for modifying the PaginationState.\n     *\n     * @typedef API\n     *\n     * @kind Object\n     */\n    /**\n     * Set the current page\n     *\n     * @function API.setCurrentPage\n     *\n     * @param {Number} page The number to assign to the current page\n     */\n    /**\n     * Set the total number of pages\n     *\n     * @function API.setTotalPages\n     *\n     * @param {Number} total The number to set the amount of pages available\n     */\n    const api = useMemo(\n        () => ({\n            setCurrentPage,\n            setTotalPages\n        }),\n        [setCurrentPage, setTotalPages]\n    );\n\n    return [paginationState, api];\n};\n"]}