{"version":3,"sources":["useAwaitQuery.js"],"names":["useCallback","useApolloClient","useAwaitQuery","query","apolloClient","options"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA;;;;;;;;;;;;;;;;AAeA,OAAO,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAClC,QAAMC,YAAY,GAAGH,eAAe,EAApC;AAEA,SAAOD,WAAW,CACdK,OAAO,IAAI;AACP,WAAOD,YAAY,CAACD,KAAb,CAAmB,EACtB,GAAGE,OADmB;AAEtBF,MAAAA;AAFsB,KAAnB,CAAP;AAIH,GANa,EAOd,CAACC,YAAD,EAAeD,KAAf,CAPc,CAAlB;AASH,CAZM","sourcesContent":["import { useCallback } from 'react';\nimport { useApolloClient } from '@apollo/client';\n\n/**\n * A hook that will return a invokable query that returns a Promise. Intended\n * to be used in Redux thunks that shouldn't have knowledge of queries being ran\n * but needed the ability to fetch data asyncronously inside of their actions.\n *\n * NOTE: We have discovered a potential bug in Apollo that when passing the\n * fetchQuery option \"network-only\", results from the cache will still be\n * returned instead of the data from the network fetch. We suggest using\n * the \"no-cache\" option if you expect your queries to always return fresh\n * data, or data is sensitive that you do not want to persist in the app.\n *\n * @param {DocumentNode} query - parsed GraphQL operation description\n *\n * @returns {Function} callback that runs the query and returns a Promise\n */\nexport const useAwaitQuery = query => {\n    const apolloClient = useApolloClient();\n\n    return useCallback(\n        options => {\n            return apolloClient.query({\n                ...options,\n                query\n            });\n        },\n        [apolloClient, query]\n    );\n};\n"]}