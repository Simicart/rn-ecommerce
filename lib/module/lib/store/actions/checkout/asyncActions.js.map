{"version":3,"sources":["asyncActions.js"],"names":["Magento2","BrowserPersistence","closeDrawer","createCart","removeCart","actions","request","storage","beginCheckout","thunk","dispatch","reset","storedAvailableShippingMethods","retreiveAvailableShippingMethods","storedBillingAddress","retrieveBillingAddress","storedPaymentMethod","retrievePaymentMethod","storedShippingAddress","retrieveShippingAddress","storedShippingMethod","retrieveShippingMethod","begin","availableShippingMethods","billingAddress","paymentCode","code","paymentData","data","shippingAddress","shippingMethod","carrier_code","shippingTitle","carrier_title","cancelCheckout","resetCheckout","resetReceipt","receipt","submitPaymentMethodAndBillingAddress","payload","countries","formValues","paymentMethod","Promise","all","submitBillingAddress","submitPaymentMethod","getState","submit","cart","cartId","Error","desiredBillingAddress","sameAsShippingAddress","formatAddress","saveBillingAddress","accept","error","reject","savePaymentMethod","submitShippingAddress","setGuestEmail","setShippingAddressOnCart","user","address","isSignedIn","email","variables","firstname","lastname","street","city","region_code","postcode","telephone","country_id","shippingMethods","setShippingAddressesOnCart","shipping_addresses","available_shipping_methods","saveAvailableShippingMethods","saveShippingAddress","getShippingMethods","receive","submitShippingMethod","desiredShippingMethod","saveShippingMethod","submitOrder","fetchCartId","order","billing_address","shipping_address","shipping_method","guestShippingEndpoint","authedShippingEndpoint","shippingEndpoint","method","body","JSON","stringify","addressInformation","shipping_carrier_code","shipping_method_code","method_code","guestPaymentEndpoint","authedPaymentEndpoint","paymentEndpoint","response","additional_data","payment_method_nonce","nonce","setOrder","id","clearCheckoutDataFromStorage","createAccount","history","checkout","firstName","lastName","accountInfo","push","URLSearchParams","usa","find","available_regions","regions","region","region_id","name","clearAvailableShippingMethods","removeItem","getItem","methods","setItem","clearBillingAddress","clearPaymentMethod","clearShippingAddress","clearShippingMethod"],"mappings":"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","sourcesContent":["import { Magento2 } from '../../../RestApi';\nimport BrowserPersistence from '../../../util/simplePersistence';\nimport { closeDrawer } from '../app';\nimport { createCart, removeCart } from '../cart';\nimport actions from './actions';\n\nconst { request } = Magento2;\nconst storage = new BrowserPersistence();\n\nexport const beginCheckout = () =>\n    async function thunk(dispatch) {\n        // Before we begin, reset the state of checkout to clear out stale data.\n        dispatch(actions.reset());\n\n        const storedAvailableShippingMethods = await retreiveAvailableShippingMethods();\n        const storedBillingAddress = await retrieveBillingAddress();\n        const storedPaymentMethod = await retrievePaymentMethod();\n        const storedShippingAddress = await retrieveShippingAddress();\n        const storedShippingMethod = await retrieveShippingMethod();\n\n        dispatch(\n            actions.begin({\n                availableShippingMethods: storedAvailableShippingMethods || [],\n                billingAddress: storedBillingAddress,\n                paymentCode: storedPaymentMethod && storedPaymentMethod.code,\n                paymentData: storedPaymentMethod && storedPaymentMethod.data,\n                shippingAddress: storedShippingAddress || {},\n                shippingMethod:\n                    storedShippingMethod && storedShippingMethod.carrier_code,\n                shippingTitle:\n                    storedShippingMethod && storedShippingMethod.carrier_title\n            })\n        );\n    };\n\nexport const cancelCheckout = () =>\n    async function thunk(dispatch) {\n        dispatch(actions.reset());\n    };\n\nexport const resetCheckout = () =>\n    async function thunk(dispatch) {\n        await dispatch(closeDrawer());\n        dispatch(actions.reset());\n    };\n\nexport const resetReceipt = () =>\n    async function thunk(dispatch) {\n        await dispatch(actions.receipt.reset());\n    };\n\nexport const submitPaymentMethodAndBillingAddress = payload =>\n    async function thunk(dispatch) {\n        const { countries, formValues } = payload;\n        const { billingAddress, paymentMethod } = formValues;\n\n        return Promise.all([\n            dispatch(submitBillingAddress({ billingAddress, countries })),\n            dispatch(submitPaymentMethod(paymentMethod))\n        ]);\n    };\n\nexport const submitBillingAddress = payload =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.billingAddress.submit());\n\n        const { cart } = getState();\n\n        const { cartId } = cart;\n        if (!cartId) {\n            throw new Error('Missing required information: cartId');\n        }\n\n        try {\n            const { billingAddress, countries } = payload;\n\n            let desiredBillingAddress = billingAddress;\n            if (!billingAddress.sameAsShippingAddress) {\n                desiredBillingAddress = formatAddress(\n                    billingAddress,\n                    countries\n                );\n            }\n\n            await saveBillingAddress(desiredBillingAddress);\n\n            dispatch(actions.billingAddress.accept(desiredBillingAddress));\n        } catch (error) {\n            dispatch(actions.billingAddress.reject(error));\n            throw error;\n        }\n    };\n\nexport const submitPaymentMethod = payload =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.paymentMethod.submit());\n\n        const { cart } = getState();\n\n        const { cartId } = cart;\n        if (!cartId) {\n            throw new Error('Missing required information: cartId');\n        }\n\n        try {\n            await savePaymentMethod(payload);\n            dispatch(actions.paymentMethod.accept(payload));\n        } catch (error) {\n            dispatch(actions.paymentMethod.reject(error));\n            throw error;\n        }\n    };\n\nexport const submitShippingAddress = (payload = {}) =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.shippingAddress.submit());\n\n        const {\n            formValues,\n            countries,\n            setGuestEmail,\n            setShippingAddressOnCart\n        } = payload;\n\n        const { cart, user } = getState();\n\n        const { cartId } = cart;\n        if (!cartId) {\n            throw new Error('Missing required information: cartId');\n        }\n\n        try {\n            const address = formatAddress(formValues, countries);\n\n            if (!user.isSignedIn) {\n                if (!formValues.email) {\n                    throw new Error('Missing required information: email');\n                }\n                await setGuestEmail({\n                    variables: {\n                        cartId,\n                        email: formValues.email\n                    }\n                });\n            }\n\n            const {\n                firstname,\n                lastname,\n                street,\n                city,\n                region_code,\n                postcode,\n                telephone,\n                country_id\n            } = address;\n\n            const { data } = await setShippingAddressOnCart({\n                variables: {\n                    cartId,\n                    firstname,\n                    lastname,\n                    street,\n                    city,\n                    region_code,\n                    postcode,\n                    telephone,\n                    country_id\n                }\n            });\n            // We can get the shipping methods immediately after setting the\n            // address. Grab it from the response and put it in the store.\n            const shippingMethods =\n                data.setShippingAddressesOnCart.cart.shipping_addresses[0]\n                    .available_shipping_methods;\n\n            // On success, save to local storage.\n            await saveAvailableShippingMethods(shippingMethods);\n            await saveShippingAddress(address);\n\n            dispatch(actions.getShippingMethods.receive(shippingMethods));\n            dispatch(actions.shippingAddress.accept(address));\n        } catch (error) {\n            dispatch(actions.shippingAddress.reject(error));\n            throw error;\n        }\n    };\n\nexport const submitShippingMethod = payload =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.shippingMethod.submit());\n\n        const { cart } = getState();\n        const { cartId } = cart;\n        if (!cartId) {\n            throw new Error('Missing required information: cartId');\n        }\n\n        try {\n            const desiredShippingMethod = payload.formValues.shippingMethod;\n            await saveShippingMethod(desiredShippingMethod);\n            dispatch(actions.shippingMethod.accept(desiredShippingMethod));\n        } catch (error) {\n            dispatch(actions.shippingMethod.reject(error));\n            throw error;\n        }\n    };\n\nexport const submitOrder = ({ fetchCartId }) =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.order.submit());\n\n        const { cart, user } = getState();\n        const { cartId } = cart;\n        if (!cartId) {\n            throw new Error('Missing required information: cartId');\n        }\n\n        let billing_address = await retrieveBillingAddress();\n        const paymentMethod = await retrievePaymentMethod();\n        const shipping_address = await retrieveShippingAddress();\n        const shipping_method = await retrieveShippingMethod();\n\n        if (billing_address.sameAsShippingAddress) {\n            billing_address = shipping_address;\n        }\n\n        try {\n            // POST to shipping-information to submit the shipping address and shipping method.\n            const guestShippingEndpoint = `/rest/V1/guest-carts/${cartId}/shipping-information`;\n            const authedShippingEndpoint =\n                '/rest/V1/carts/mine/shipping-information';\n            const shippingEndpoint = user.isSignedIn\n                ? authedShippingEndpoint\n                : guestShippingEndpoint;\n\n            await request(shippingEndpoint, {\n                method: 'POST',\n                body: JSON.stringify({\n                    addressInformation: {\n                        billing_address,\n                        shipping_address,\n                        shipping_carrier_code: shipping_method.carrier_code,\n                        shipping_method_code: shipping_method.method_code\n                    }\n                })\n            });\n\n            // POST to payment-information to submit the payment details and billing address,\n            // Note: this endpoint also actually submits the order.\n            const guestPaymentEndpoint = `/rest/V1/guest-carts/${cartId}/payment-information`;\n            const authedPaymentEndpoint =\n                '/rest/V1/carts/mine/payment-information';\n            const paymentEndpoint = user.isSignedIn\n                ? authedPaymentEndpoint\n                : guestPaymentEndpoint;\n\n            const response = await request(paymentEndpoint, {\n                method: 'POST',\n                body: JSON.stringify({\n                    billingAddress: billing_address,\n                    cartId: cartId,\n                    email: shipping_address.email,\n                    paymentMethod: {\n                        additional_data: {\n                            payment_method_nonce: paymentMethod.data.nonce\n                        },\n                        method: paymentMethod.code\n                    }\n                })\n            });\n\n            dispatch(\n                actions.receipt.setOrder({\n                    id: response,\n                    shipping_address\n                })\n            );\n\n            // Clear out everything we've saved about this cart from local\n            // storage. Then remove and create a new cart.\n            await clearCheckoutDataFromStorage();\n            await dispatch(removeCart());\n            try {\n                dispatch(\n                    createCart({\n                        fetchCartId\n                    })\n                );\n            } catch (error) {\n                // If creating a cart fails, all is not lost. Return so that the\n                // user can continue to at least browse the site.\n                return;\n            }\n\n            dispatch(actions.order.accept());\n        } catch (error) {\n            dispatch(actions.order.reject(error));\n            throw error;\n        }\n    };\n\nexport const createAccount = ({ history }) => async (dispatch, getState) => {\n    const { checkout } = getState();\n\n    const {\n        email,\n        firstname: firstName,\n        lastname: lastName\n    } = checkout.receipt.order.shipping_address;\n\n    const accountInfo = {\n        email,\n        firstName,\n        lastName\n    };\n\n    // Once we grab what we need from checkout state we can reset.\n    await dispatch(resetCheckout());\n\n    history.push(`/create-account?${new URLSearchParams(accountInfo)}`);\n};\n\n/* helpers */\n\n/**\n * Formats an address in the shape the REST API expects.\n * TODO: Can we remove this code once address submissions switch to GraphQL?\n *\n * This function may throw.\n *\n * @param {object} address - The input address.\n * @param {object[]} countries - The list of countries data.\n */\nexport const formatAddress = (address = {}, countries = []) => {\n    const { region_code } = address;\n\n    const usa = countries.find(({ id }) => id === 'US');\n    const { available_regions: regions } = usa;\n\n    const region = regions.find(({ code }) => code === region_code);\n\n    return {\n        country_id: 'US',\n        region_id: region.id,\n        region_code: region.code,\n        region: region.name,\n        ...address\n    };\n};\n\nasync function clearAvailableShippingMethods() {\n    return storage.removeItem('availableShippingMethods');\n}\n\nasync function retreiveAvailableShippingMethods() {\n    return storage.getItem('availableShippingMethods');\n}\n\nasync function saveAvailableShippingMethods(methods) {\n    return storage.setItem('availableShippingMethods', methods);\n}\n\nasync function clearBillingAddress() {\n    return storage.removeItem('billing_address');\n}\n\nasync function retrieveBillingAddress() {\n    return storage.getItem('billing_address');\n}\n\nasync function saveBillingAddress(address) {\n    return storage.setItem('billing_address', address);\n}\n\nasync function clearPaymentMethod() {\n    return storage.removeItem('paymentMethod');\n}\n\nasync function retrievePaymentMethod() {\n    return storage.getItem('paymentMethod');\n}\n\nasync function savePaymentMethod(method) {\n    return storage.setItem('paymentMethod', method);\n}\n\nasync function clearShippingAddress() {\n    return storage.removeItem('shipping_address');\n}\n\nasync function retrieveShippingAddress() {\n    return storage.getItem('shipping_address');\n}\n\nasync function saveShippingAddress(address) {\n    return storage.setItem('shipping_address', address);\n}\n\nasync function clearShippingMethod() {\n    return storage.removeItem('shippingMethod');\n}\n\nasync function retrieveShippingMethod() {\n    return storage.getItem('shippingMethod');\n}\n\nasync function saveShippingMethod(method) {\n    return storage.setItem('shippingMethod', method);\n}\n\nexport const clearCheckoutDataFromStorage = async () => {\n    await clearBillingAddress();\n    await clearPaymentMethod();\n    await clearShippingAddress();\n    await clearShippingMethod();\n    await clearAvailableShippingMethods();\n};\n"]}