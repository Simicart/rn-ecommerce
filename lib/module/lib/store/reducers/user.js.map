{"version":3,"sources":["user.js"],"names":["handleActions","Util","BrowserPersistence","storage","actions","name","isSignedIn","getItem","initialState","currentUser","email","firstname","lastname","getDetailsError","isGettingDetails","isResettingPassword","resetPasswordError","token","reducerMap","setToken","state","payload","clearToken","getDetails","request","receive","error","resetPassword","reset"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\n\nimport { Util } from '../../index';\nconst { BrowserPersistence } = Util;\n\nconst storage = new BrowserPersistence();\n\nimport actions from '../actions/user';\n\nexport const name = 'user';\n\nconst isSignedIn = () => !!storage.getItem('signin_token');\n\nconst initialState = {\n    currentUser: {\n        email: '',\n        firstname: '',\n        lastname: ''\n    },\n    getDetailsError: null,\n    isGettingDetails: false,\n    isResettingPassword: false,\n    isSignedIn: isSignedIn(),\n    resetPasswordError: null,\n    token: storage.getItem('signin_token')\n};\n\nconst reducerMap = {\n    [actions.setToken]: (state, { payload }) => {\n        return {\n            ...state,\n            isSignedIn: true,\n            token: payload\n        };\n    },\n    [actions.clearToken]: state => {\n        return {\n            ...state,\n            isSignedIn: false,\n            token: null\n        };\n    },\n    [actions.getDetails.request]: state => {\n        return {\n            ...state,\n            getDetailsError: null,\n            isGettingDetails: true\n        };\n    },\n    [actions.getDetails.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                getDetailsError: payload,\n                isGettingDetails: false\n            };\n        }\n\n        return {\n            ...state,\n            currentUser: payload,\n            getDetailsError: null,\n            isGettingDetails: false\n        };\n    },\n    [actions.resetPassword.request]: state => ({\n        ...state,\n        isResettingPassword: true\n    }),\n    // TODO: handle the reset password response from the API.\n    [actions.resetPassword.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                isResettingPassword: false,\n                resetPasswordError: payload\n            };\n        }\n\n        return {\n            ...state,\n            isResettingPassword: false,\n            resetPasswordError: null\n        };\n    },\n    [actions.reset]: () => {\n        return {\n            ...initialState,\n            isSignedIn: false,\n            token: null\n        };\n    }\n};\n\nexport default handleActions(reducerMap, initialState);\n"]}