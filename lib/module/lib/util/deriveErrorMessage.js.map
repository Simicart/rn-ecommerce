{"version":3,"sources":["deriveErrorMessage.js"],"names":["toString","error","graphQLErrors","message","length","map","join","deriveErrorMessage","errors","errorCollection","push"],"mappings":"AAAA;;;;;;AAMA,MAAMA,QAAQ,GAAGC,KAAK,IAAI;AACtB,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA6BF,KAAnC;AAEA,SAAOC,aAAa,IAAIA,aAAa,CAACE,MAA/B,GACDF,aAAa,CAACG,GAAd,CAAkB,CAAC;AAAEF,IAAAA;AAAF,GAAD,KAAiBA,OAAnC,EAA4CG,IAA5C,CAAiD,IAAjD,CADC,GAEDH,OAFN;AAGH,CAND;AAQA;;;;;AAGA,OAAO,MAAMI,kBAAkB,GAAGC,MAAM,IAAI;AACxC,QAAMC,eAAe,GAAG,EAAxB;;AACA,OAAK,MAAMR,KAAX,IAAoBO,MAApB,EAA4B;AACxB,QAAIP,KAAJ,EAAW;AACPQ,MAAAA,eAAe,CAACC,IAAhB,CAAqBV,QAAQ,CAACC,KAAD,CAA7B;AACH;AACJ;;AAED,SAAOQ,eAAe,CAACH,IAAhB,CAAqB,IAArB,CAAP;AACH,CATM","sourcesContent":["/**\n * Maps an error to a string message\n *\n * @param {Error} error the error to map\n * @return {String} error message\n */\nconst toString = error => {\n    const { graphQLErrors, message } = error;\n\n    return graphQLErrors && graphQLErrors.length\n        ? graphQLErrors.map(({ message }) => message).join(', ')\n        : message;\n};\n\n/**\n * A function to derive an error string from an array of errors.\n */\nexport const deriveErrorMessage = errors => {\n    const errorCollection = [];\n    for (const error of errors) {\n        if (error) {\n            errorCollection.push(toString(error));\n        }\n    }\n\n    return errorCollection.join(', ');\n};\n"]}