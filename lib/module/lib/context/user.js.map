{"version":3,"sources":["user.js"],"names":["React","createContext","useContext","useMemo","connect","actions","asyncActions","bindActionCreators","UserContext","UserContextProvider","props","children","userState","userApi","contextValue","mapStateToProps","user","mapDispatchToProps","dispatch","useUserContext"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,QAA0D,OAA1D;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oCAA9B;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AAEA,MAAMC,WAAW,gBAAGP,aAAa,EAAjC;;AAEA,MAAMQ,mBAAmB,GAAGC,KAAK,IAAI;AACjC,QAAM;AAAEL,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBK,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,MAAiDF,KAAvD;AAEA,QAAMG,OAAO,GAAGV,OAAO,CACnB,OAAO;AACHE,IAAAA,OADG;AAEH,OAAGC;AAFA,GAAP,CADmB,EAKnB,CAACD,OAAD,EAAUC,YAAV,CALmB,CAAvB;AAQA,QAAMQ,YAAY,GAAGX,OAAO,CAAC,MAAM,CAACS,SAAD,EAAYC,OAAZ,CAAP,EAA6B,CACrDA,OADqD,EAErDD,SAFqD,CAA7B,CAA5B;AAKA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE;AAA7B,KACKH,QADL,CADJ;AAKH,CArBD;;AAuBA,MAAMI,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAe;AAAEJ,EAAAA,SAAS,EAAEI;AAAb,CAAf,CAAxB;;AAEA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCb,EAAAA,OAAO,EAAEE,kBAAkB,CAACF,OAAD,EAAUa,QAAV,CADS;AAEpCZ,EAAAA,YAAY,EAAEC,kBAAkB,CAACD,YAAD,EAAeY,QAAf;AAFI,CAAL,CAAnC;;AAKA,eAAed,OAAO,CAClBW,eADkB,EAElBE,kBAFkB,CAAP,CAGbR,mBAHa,CAAf;AAKA;;;;;;;;;;;;AAYA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;AAGA,OAAO,MAAMU,cAAc,GAAG,MAAMjB,UAAU,CAACM,WAAD,CAAvC","sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { connect } from 'react-redux';\n\nimport actions from '../store/actions/user/actions';\nimport * as asyncActions from '../store/actions/user/asyncActions';\nimport bindActionCreators from '../util/bindActionCreators';\n\nconst UserContext = createContext();\n\nconst UserContextProvider = props => {\n    const { actions, asyncActions, children, userState } = props;\n\n    const userApi = useMemo(\n        () => ({\n            actions,\n            ...asyncActions\n        }),\n        [actions, asyncActions]\n    );\n\n    const contextValue = useMemo(() => [userState, userApi], [\n        userApi,\n        userState\n    ]);\n\n    return (\n        <UserContext.Provider value={contextValue}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n\nconst mapStateToProps = ({ user }) => ({ userState: user });\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n    asyncActions: bindActionCreators(asyncActions, dispatch)\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserContextProvider);\n\n/**\n * @typedef {Object} UserState\n *\n * @property {CurrentUser} currentUser Current user details\n * @property {Error} getDetailsError Get Details call related error\n * @property {Boolean} isGettingDetails Boolean if true indicates that user details are being fetched. False otherwise.\n * @property {Boolean} isResettingPassword Deprecated\n * @property {Boolean} isSignedIn Boolean if true indicates that the user is signed in. False otherwise.\n * @property {Error} resetPasswordError Deprecated\n *\n */\n\n/**\n * @typedef {Object} CurrentUser\n *\n * @property {String} email Current user's email\n * @property {String} firstname Current user's first name\n * @property {String} lastname Current user's last name\n */\n\n/**\n * @typedef {Object} UserActions\n *\n * @property {Function} clearToken Callback to clear user token in browser persistence storage\n * @property {Function} getUserDetails Callback to get user details\n * @property {Function} resetPassword Deprecated\n * @property {Function} setToken Callback to set user token in browser persistence storage\n * @property {Function} signOut Callback to sign the user out\n */\n\n/**\n * @returns {[UserState, UserActions]}\n */\nexport const useUserContext = () => useContext(UserContext);\n"]}