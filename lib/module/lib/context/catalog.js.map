{"version":3,"sources":["catalog.js"],"names":["React","createContext","useContext","useMemo","connect","actions","asyncActions","bindActionCreators","CatalogContext","CatalogContextProvider","props","catalogState","children","catalogApi","contextValue","mapStateToProps","catalog","mapDispatchToProps","dispatch","useCatalogContext"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,QAA0D,OAA1D;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAO,KAAKC,YAAZ,MAA8B,uCAA9B;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AAEA,MAAMC,cAAc,gBAAGP,aAAa,EAApC;;AAEA,MAAMQ,sBAAsB,GAAGC,KAAK,IAAI;AACpC,QAAM;AAAEL,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBK,IAAAA,YAAzB;AAAuCC,IAAAA;AAAvC,MAAoDF,KAA1D;AAEA,QAAMG,UAAU,GAAGV,OAAO,CACtB,OAAO;AACHE,IAAAA,OADG;AAEH,OAAGC;AAFA,GAAP,CADsB,EAKtB,CAACD,OAAD,EAAUC,YAAV,CALsB,CAA1B;AAQA,QAAMQ,YAAY,GAAGX,OAAO,CAAC,MAAM,CAACQ,YAAD,EAAeE,UAAf,CAAP,EAAmC,CAC3DA,UAD2D,EAE3DF,YAF2D,CAAnC,CAA5B;AAKA,sBACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEG;AAAhC,KACKF,QADL,CADJ;AAKH,CArBD;;AAuBA,MAAMG,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAkB;AAAEL,EAAAA,YAAY,EAAEK;AAAhB,CAAlB,CAAxB;;AAEA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCb,EAAAA,OAAO,EAAEE,kBAAkB,CAACF,OAAD,EAAUa,QAAV,CADS;AAEpCZ,EAAAA,YAAY,EAAEC,kBAAkB,CAACD,YAAD,EAAeY,QAAf;AAFI,CAAL,CAAnC;;AAKA,eAAed,OAAO,CAClBW,eADkB,EAElBE,kBAFkB,CAAP,CAGbR,sBAHa,CAAf;AAKA,OAAO,MAAMU,iBAAiB,GAAG,MAAMjB,UAAU,CAACM,cAAD,CAA1C","sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { connect } from 'react-redux';\n\nimport actions from '../store/actions/catalog/actions';\nimport * as asyncActions from '../store/actions/catalog/asyncActions';\nimport bindActionCreators from '../util/bindActionCreators';\n\nconst CatalogContext = createContext();\n\nconst CatalogContextProvider = props => {\n    const { actions, asyncActions, catalogState, children } = props;\n\n    const catalogApi = useMemo(\n        () => ({\n            actions,\n            ...asyncActions\n        }),\n        [actions, asyncActions]\n    );\n\n    const contextValue = useMemo(() => [catalogState, catalogApi], [\n        catalogApi,\n        catalogState\n    ]);\n\n    return (\n        <CatalogContext.Provider value={contextValue}>\n            {children}\n        </CatalogContext.Provider>\n    );\n};\n\nconst mapStateToProps = ({ catalog }) => ({ catalogState: catalog });\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n    asyncActions: bindActionCreators(asyncActions, dispatch)\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CatalogContextProvider);\n\nexport const useCatalogContext = () => useContext(CatalogContext);\n"]}