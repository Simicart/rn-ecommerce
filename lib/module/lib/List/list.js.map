{"version":3,"sources":["list.js"],"names":["React","useMemo","useCallback","array","func","object","oneOf","oneOfType","shape","string","fromRenderProp","iterable","Items","List","props","classes","getItemKey","initialSelection","items","render","renderItem","onSelectionChange","selectionModel","restProps","customProps","handleSelectionChange","selection","Root","Object","keys","root","propTypes","isRequired","defaultProps","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,WAAzB,QAA4C,OAA5C;AACA,SACIC,KADJ,EAEIC,IAFJ,EAGIC,MAHJ,EAIIC,KAJJ,EAKIC,SALJ,EAMIC,KANJ,EAOIC,MAPJ,QAQO,YARP;AAUA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA;;;;;;;;;;;;AAWA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AAClB,QAAM;AACFC,IAAAA,OADE;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,gBAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,MALE;AAMFC,IAAAA,UANE;AAOFC,IAAAA,iBAPE;AAQFC,IAAAA,cARE;AASF,OAAGC;AATD,MAUFT,KAVJ;AAYA,QAAMU,WAAW,GAAG;AAChBT,IAAAA,OADgB;AAEhBC,IAAAA,UAFgB;AAGhBE,IAAAA,KAHgB;AAIhBG,IAAAA,iBAJgB;AAKhBC,IAAAA;AALgB,GAApB;AAQA,QAAMG,qBAAqB,GAAGvB,WAAW,CACrCwB,SAAS,IAAI;AACT,QAAIL,iBAAJ,EAAuB;AACnBA,MAAAA,iBAAiB,CAACK,SAAD,CAAjB;AACH;AACJ,GALoC,EAMrC,CAACL,iBAAD,CANqC,CAAzC;AASA,QAAMM,IAAI,GAAG1B,OAAO,CAChB,MAAMS,cAAc,CAACS,MAAD,EAASS,MAAM,CAACC,IAAP,CAAYL,WAAZ,CAAT,CADJ,EAEhB,CAACL,MAAD,EAASK,WAAT,CAFgB,CAApB;AAKA,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAET,OAAO,CAACe;AAAzB,KAAmCN,WAAnC,EAAoDD,SAApD,gBACI,oBAAC,KAAD;AACI,IAAA,UAAU,EAAEP,UADhB;AAEI,IAAA,gBAAgB,EAAEC,gBAFtB;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,UAAU,EAAEE,UAJhB;AAKI,IAAA,cAAc,EAAEE,cALpB;AAMI,IAAA,iBAAiB,EAAEG;AANvB,IADJ,CADJ;AAYH,CA/CD;AAiDA;;;;;;;;;;;;;;;;;AAeAZ,IAAI,CAACkB,SAAL,GAAiB;AACbhB,EAAAA,OAAO,EAAEP,KAAK,CAAC;AACXsB,IAAAA,IAAI,EAAErB;AADK,GAAD,CADD;AAIbO,EAAAA,UAAU,EAAEZ,IAAI,CAAC4B,UAJJ;AAKbf,EAAAA,gBAAgB,EAAEV,SAAS,CAAC,CAACJ,KAAD,EAAQE,MAAR,CAAD,CALd;AAMba,EAAAA,KAAK,EAAEP,QAAQ,CAACqB,UANH;AAObb,EAAAA,MAAM,EAAEZ,SAAS,CAAC,CAACH,IAAD,EAAOK,MAAP,CAAD,CAAT,CAA0BuB,UAPrB;AAQbZ,EAAAA,UAAU,EAAEb,SAAS,CAAC,CAACH,IAAD,EAAOK,MAAP,CAAD,CARR;AASbY,EAAAA,iBAAiB,EAAEjB,IATN;AAUbkB,EAAAA,cAAc,EAAEhB,KAAK,CAAC,CAAC,UAAD,EAAa,OAAb,CAAD;AAVR,CAAjB;AAaA;;;;;;AAKAO,IAAI,CAACoB,YAAL,GAAoB;AAChBlB,EAAAA,OAAO,EAAE,EADO;AAEhBC,EAAAA,UAAU,EAAE,CAAC;AAAEkB,IAAAA;AAAF,GAAD,KAAYA,EAFR;AAGhBhB,EAAAA,KAAK,EAAE,EAHS;AAIhBC,EAAAA,MAAM,EAAE,KAJQ;AAKhBC,EAAAA,UAAU,EAAE,KALI;AAMhBE,EAAAA,cAAc,EAAE;AANA,CAApB;AASA,eAAeT,IAAf","sourcesContent":["import React, { useMemo, useCallback } from 'react';\nimport {\n    array,\n    func,\n    object,\n    oneOf,\n    oneOfType,\n    shape,\n    string\n} from 'prop-types';\n\nimport fromRenderProp from '../util/fromRenderProp';\nimport iterable from '../validators/iterable';\nimport Items from './items';\n\n/**\n * The **List** component maps a collection of data objects into an array of elements.\n * It also manages the selection and focus of those elements.\n *\n * @typedef List\n * @kind functional component\n *\n * @param {props} props React Component props\n *\n * @returns{React.Element} A React component that displays list data.\n */\nconst List = props => {\n    const {\n        classes,\n        getItemKey,\n        initialSelection,\n        items,\n        render,\n        renderItem,\n        onSelectionChange,\n        selectionModel,\n        ...restProps\n    } = props;\n\n    const customProps = {\n        classes,\n        getItemKey,\n        items,\n        onSelectionChange,\n        selectionModel\n    };\n\n    const handleSelectionChange = useCallback(\n        selection => {\n            if (onSelectionChange) {\n                onSelectionChange(selection);\n            }\n        },\n        [onSelectionChange]\n    );\n\n    const Root = useMemo(\n        () => fromRenderProp(render, Object.keys(customProps)),\n        [render, customProps]\n    );\n\n    return (\n        <Root className={classes.root} {...customProps} {...restProps}>\n            <Items\n                getItemKey={getItemKey}\n                initialSelection={initialSelection}\n                items={items}\n                renderItem={renderItem}\n                selectionModel={selectionModel}\n                onSelectionChange={handleSelectionChange}\n            />\n        </Root>\n    );\n};\n\n/**\n * props for {@link List}\n *\n * @typedef props\n *\n * @property {Object} classes css classes prop for List\n * @property {string} classes.root css classes for List root container\n * @property {func} getItemKey item key value getter\n * @property {array | object} initialSelection A single or list of objects that should start off selected\n * @property {iterable} items An iterable that yields `[key, item]` pairs such as an ES2015 Map\n * @property {func | string} render A render prop for the list element. A tagname string, such as `\"div\"`, is also valid.\n * @property {func | string} renderItem A render prop for the list item elements. A tagname string, such as `\"div\"`, is also valid\n * @property {func} onSelectionChange A callback that fires when the selection state changes\n * @property {checkbox | radio} selectionModel A string corresponding to a selection model\n */\nList.propTypes = {\n    classes: shape({\n        root: string\n    }),\n    getItemKey: func.isRequired,\n    initialSelection: oneOfType([array, object]),\n    items: iterable.isRequired,\n    render: oneOfType([func, string]).isRequired,\n    renderItem: oneOfType([func, string]),\n    onSelectionChange: func,\n    selectionModel: oneOf(['checkbox', 'radio'])\n};\n\n/**\n * default props for {@link List}\n *\n * @typedef defaultProps\n */\nList.defaultProps = {\n    classes: {},\n    getItemKey: ({ id }) => id,\n    items: [],\n    render: 'div',\n    renderItem: 'div',\n    selectionModel: 'radio'\n};\n\nexport default List;\n"]}