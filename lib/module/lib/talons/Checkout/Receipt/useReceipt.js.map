{"version":3,"sources":["useReceipt.js"],"names":["useCallback","useEffect","useRef","useHistory","useCheckoutContext","useUserContext","useAppContext","useReceipt","props","onClose","drawer","createAccount","resetReceipt","isSignedIn","history","prevDrawer","current","handleCreateAccount","handleViewOrderDetails"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,kBAAT,QAAmC,yCAAnC;AACA,SAASC,cAAT,QAA+B,qCAA/B;AACA,SAASC,aAAT,QAA8B,oCAA9B;AAEA,OAAO,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AAEA,QAAM,CAAC;AAAEE,IAAAA;AAAF,GAAD,IAAeJ,aAAa,EAAlC;AACA,QAAM,GAAG;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAH,IAAsCR,kBAAkB,EAA9D;AACA,QAAM,CAAC;AAAES,IAAAA;AAAF,GAAD,IAAmBR,cAAc,EAAvC;AACA,QAAMS,OAAO,GAAGX,UAAU,EAA1B,CAN+B,CAQ/B;AACA;;AACA,QAAMY,UAAU,GAAGb,MAAM,CAAC,IAAD,CAAzB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,UAAU,CAACC,OAAX,KAAuB,MAAvB,IAAiCN,MAAM,KAAK,MAAhD,EAAwD;AACpDE,MAAAA,YAAY;AACZH,MAAAA,OAAO;AACV;;AACDM,IAAAA,UAAU,CAACC,OAAX,GAAqBN,MAArB;AACH,GANQ,EAMN,CAACA,MAAD,EAASD,OAAT,EAAkBG,YAAlB,CANM,CAAT;AAQA,QAAMK,mBAAmB,GAAGjB,WAAW,CAAC,MAAM;AAC1CW,IAAAA,aAAa,CAAC;AACVG,MAAAA;AADU,KAAD,CAAb;AAGH,GAJsC,EAIpC,CAACH,aAAD,EAAgBG,OAAhB,CAJoC,CAAvC;AAMA,QAAMI,sBAAsB,GAAGlB,WAAW,CAAC,MAAM,CAC7C;AACH,GAFyC,EAEvC,EAFuC,CAA1C;AAIA,SAAO;AACHiB,IAAAA,mBADG;AAEHC,IAAAA,sBAFG;AAGHL,IAAAA;AAHG,GAAP;AAKH,CAlCM","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useCheckoutContext } from '@magento/peregrine/lib/context/checkout';\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\n\nexport const useReceipt = props => {\n    const { onClose } = props;\n\n    const [{ drawer }] = useAppContext();\n    const [, { createAccount, resetReceipt }] = useCheckoutContext();\n    const [{ isSignedIn }] = useUserContext();\n    const history = useHistory();\n\n    // When the drawer is closed reset the state of the receipt. We use a ref\n    // because drawer can change if the mask is clicked. Mask updates drawer.\n    const prevDrawer = useRef(null);\n    useEffect(() => {\n        if (prevDrawer.current === 'cart' && drawer !== 'cart') {\n            resetReceipt();\n            onClose();\n        }\n        prevDrawer.current = drawer;\n    }, [drawer, onClose, resetReceipt]);\n\n    const handleCreateAccount = useCallback(() => {\n        createAccount({\n            history\n        });\n    }, [createAccount, history]);\n\n    const handleViewOrderDetails = useCallback(() => {\n        // TODO: Implement/connect/redirect to order details page.\n    }, []);\n\n    return {\n        handleCreateAccount,\n        handleViewOrderDetails,\n        isSignedIn\n    };\n};\n"]}