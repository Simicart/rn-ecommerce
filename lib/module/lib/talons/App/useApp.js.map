{"version":3,"sources":["useApp.js"],"names":["useCallback","useEffect","useMemo","errorRecord","useAppContext","dismissers","WeakMap","getErrorDismisser","error","onDismissError","has","get","set","useApp","props","handleError","handleIsOffline","handleIsOnline","markErrorHandled","renderError","unhandledErrors","reload","process","env","NODE_ENV","console","log","window","location","renderErrors","stack","errors","handleDismissError","id","loc","appState","appApi","closeDrawer","hasBeenOffline","isOnline","overlay","handleCloseDrawer","hasOverlay"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,QAAgD,OAAhD;AACA,OAAOC,WAAP,MAAwB,+CAAxB;AACA,SAASC,aAAT,QAA8B,oCAA9B;AAEA,MAAMC,UAAU,GAAG,IAAIC,OAAJ,EAAnB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,cAAR,KAA2B;AACjD,SAAOJ,UAAU,CAACK,GAAX,CAAeF,KAAf,IACDH,UAAU,CAACM,GAAX,CAAeH,KAAf,CADC,GAEDH,UAAU,CAACO,GAAX,CAAeJ,KAAf,EAAsB,MAAMC,cAAc,CAACD,KAAD,CAA1C,EAAmDG,GAAnD,CAAuDH,KAAvD,CAFN;AAGH,CAJD;AAMA;;;;;;;;;;;;;;;;;;;AAiBA,OAAO,MAAMK,MAAM,GAAGC,KAAK,IAAI;AAC3B,QAAM;AACFC,IAAAA,WADE;AAEFC,IAAAA,eAFE;AAGFC,IAAAA,cAHE;AAIFC,IAAAA,gBAJE;AAKFC,IAAAA,WALE;AAMFC,IAAAA;AANE,MAOFN,KAPJ;AASA,QAAMO,MAAM,GAAGrB,WAAW,CACtBsB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACM,MAAM;AACFC,IAAAA,OAAO,CAACC,GAAR,CACI,+EADJ;AAGH,GALP,GAMM,MAAM;AACFC,IAAAA,MAAM,CAACC,QAAP,CAAgBP,MAAhB;AACH,GATe,EAUtB,EAVsB,CAA1B;AAaA,QAAMQ,YAAY,GAAG3B,OAAO,CACxB,MACIiB,WAAW,GACL,CAAChB,WAAW,CAACgB,WAAD,EAAcQ,MAAd,EAAsBd,MAAtB,EAA8BM,WAAW,CAACW,KAA1C,CAAZ,CADK,GAEL,EAJc,EAKxB,CAACX,WAAD,CALwB,CAA5B;AAQA,QAAMY,MAAM,GAAGZ,WAAW,GAAGU,YAAH,GAAkBT,eAA5C;AACA,QAAMY,kBAAkB,GAAGb,WAAW,GAAGE,MAAH,GAAYH,gBAAlD,CAhC2B,CAkC3B;AACA;AACA;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,SAAK,MAAM;AAAEO,MAAAA,KAAF;AAASyB,MAAAA,EAAT;AAAaC,MAAAA;AAAb,KAAX,IAAiCH,MAAjC,EAAyC;AACrChB,MAAAA,WAAW,CACPP,KADO,EAEPyB,EAFO,EAGPC,GAHO,EAIP3B,iBAAiB,CAACC,KAAD,EAAQwB,kBAAR,CAJV,CAAX;AAMH;AACJ,GATQ,EASN,CAACD,MAAD,EAASC,kBAAT,EAA6BjB,WAA7B,CATM,CAAT;AAWA,QAAM,CAACoB,QAAD,EAAWC,MAAX,IAAqBhC,aAAa,EAAxC;AACA,QAAM;AAAEiC,IAAAA;AAAF,MAAkBD,MAAxB;AACA,QAAM;AAAEE,IAAAA,cAAF;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,MAAwCL,QAA9C;AAEAlC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIqC,cAAJ,EAAoB;AAChB,UAAIC,QAAJ,EAAc;AACVtB,QAAAA,cAAc;AACjB,OAFD,MAEO;AACHD,QAAAA,eAAe;AAClB;AACJ;AACJ,GARQ,EAQN,CAACC,cAAD,EAAiBD,eAAjB,EAAkCsB,cAAlC,EAAkDC,QAAlD,CARM,CAAT;AAUA,QAAME,iBAAiB,GAAGzC,WAAW,CAAC,MAAM;AACxCqC,IAAAA,WAAW;AACd,GAFoC,EAElC,CAACA,WAAD,CAFkC,CAArC;AAIA,SAAO;AACHK,IAAAA,UAAU,EAAE,CAAC,CAACF,OADX;AAEHC,IAAAA;AAFG,GAAP;AAIH,CAtEM","sourcesContent":["import { useCallback, useEffect, useMemo } from 'react';\nimport errorRecord from '@magento/peregrine/lib/util/createErrorRecord';\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\n\nconst dismissers = new WeakMap();\n\n// Memoize dismisser funcs to reduce re-renders from func identity change.\nconst getErrorDismisser = (error, onDismissError) => {\n    return dismissers.has(error)\n        ? dismissers.get(error)\n        : dismissers.set(error, () => onDismissError(error)).get(error);\n};\n\n/**\n * Talon that handles effects for App and returns props necessary for rendering\n * the app.\n *\n * @param {Function} props.handleError callback to invoke for each error\n * @param {Function} props.handleIsOffline callback to invoke when the app goes offline\n * @param {Function} props.handleIsOnline callback to invoke wen the app goes online\n * @param {Function} props.handleHTMLUpdate callback to invoke when a HTML update is available\n * @param {Function} props.markErrorHandled callback to invoke when handling an error\n * @param {Function} props.renderError an error that occurs during rendering of the app\n * @param {Function} props.unhandledErrors errors coming from the error reducer\n *\n * @returns {{\n *  hasOverlay: boolean\n *  handleCloseDrawer: function\n * }}\n */\nexport const useApp = props => {\n    const {\n        handleError,\n        handleIsOffline,\n        handleIsOnline,\n        markErrorHandled,\n        renderError,\n        unhandledErrors\n    } = props;\n\n    const reload = useCallback(\n        process.env.NODE_ENV === 'development'\n            ? () => {\n                  console.log(\n                      'Default window.location.reload() error handler not running in developer mode.'\n                  );\n              }\n            : () => {\n                  window.location.reload();\n              },\n        []\n    );\n\n    const renderErrors = useMemo(\n        () =>\n            renderError\n                ? [errorRecord(renderError, window, useApp, renderError.stack)]\n                : [],\n        [renderError]\n    );\n\n    const errors = renderError ? renderErrors : unhandledErrors;\n    const handleDismissError = renderError ? reload : markErrorHandled;\n\n    // Only add toasts for errors if the errors list changes. Since `addToast`\n    // and `toasts` changes each render we cannot add it as an effect dependency\n    // otherwise we infinitely loop.\n    useEffect(() => {\n        for (const { error, id, loc } of errors) {\n            handleError(\n                error,\n                id,\n                loc,\n                getErrorDismisser(error, handleDismissError)\n            );\n        }\n    }, [errors, handleDismissError, handleError]);\n\n    const [appState, appApi] = useAppContext();\n    const { closeDrawer } = appApi;\n    const { hasBeenOffline, isOnline, overlay } = appState;\n\n    useEffect(() => {\n        if (hasBeenOffline) {\n            if (isOnline) {\n                handleIsOnline();\n            } else {\n                handleIsOffline();\n            }\n        }\n    }, [handleIsOnline, handleIsOffline, hasBeenOffline, isOnline]);\n\n    const handleCloseDrawer = useCallback(() => {\n        closeDrawer();\n    }, [closeDrawer]);\n\n    return {\n        hasOverlay: !!overlay,\n        handleCloseDrawer\n    };\n};\n"]}