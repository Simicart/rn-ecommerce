{"version":3,"sources":["useMagentoRoute.js"],"names":["useEffect","useRef","useState","useHistory","useLocation","useApolloClient","getRouteComponent","CODE_PERMANENT_REDIRECT","CODE_TEMPORARY_REDIRECT","REDIRECT_CODES","talonResponses","ERROR","routeError","hasError","LOADING","isLoading","NOT_FOUND","isNotFound","FOUND","component","id","type","store","REDIRECT","relativeUrl","isRedirect","shouldFetch","data","navigator","onLine","useMagentoRoute","props","componentMap","setComponentMap","Map","apiBase","history","pathname","isMountedRef","routeData","get","current","replace","then","redirectCode","prevMap","nextMap","nextValue","includes","set"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useApolloClient } from '@apollo/client';\n\nimport getRouteComponent from './getRouteComponent';\n\nconst CODE_PERMANENT_REDIRECT = 301;\nconst CODE_TEMPORARY_REDIRECT = 302;\nconst REDIRECT_CODES = [CODE_PERMANENT_REDIRECT, CODE_TEMPORARY_REDIRECT];\n\nconst talonResponses = {\n    ERROR: routeError => ({ hasError: true, routeError }),\n    LOADING: { isLoading: true },\n    NOT_FOUND: { isNotFound: true },\n    FOUND: (component, id, type, store) => ({ component, id, type, store }),\n    REDIRECT: relativeUrl => ({ isRedirect: true, relativeUrl })\n};\n\nconst shouldFetch = (data, store) => {\n    // Should fetch if we don't have any data.\n    if (!data) return true;\n\n    // Should fetch again following a prior failure.\n    if (data.isNotFound && navigator.onLine) {\n        return true;\n    }\n\n    // If we have data for the route, but the stores don't match fetch the correct route\n    return !!(data.id && data.store !== store);\n};\n\nexport const useMagentoRoute = props => {\n    const { store } = props;\n    const [componentMap, setComponentMap] = useState(new Map());\n    const { apiBase } = useApolloClient();\n    const history = useHistory();\n    const { pathname } = useLocation();\n    const isMountedRef = useRef(false);\n\n    const routeData = componentMap.get(pathname);\n\n    // Keep track of whether we have been mounted yet.\n    // Note that we are not unmounted on page transitions.\n    useEffect(() => {\n        isMountedRef.current = true;\n\n        return () => {\n            isMountedRef.current = false;\n        };\n    }, []);\n\n    // If the entry for this pathname is a redirect, perform the redirect.\n    useEffect(() => {\n        if (routeData && routeData.isRedirect) {\n            history.replace(routeData.relativeUrl);\n        }\n    }, [componentMap, history, pathname, routeData]);\n\n    // ask Magento for a RootComponent that matches the current pathname\n    useEffect(() => {\n        // Avoid setting state if unmounted.\n        if (!isMountedRef.current) {\n            return;\n        }\n\n        if (shouldFetch(routeData, store)) {\n            getRouteComponent(apiBase, pathname, store).then(\n                ({\n                    component,\n                    id,\n                    pathname,\n                    redirectCode,\n                    relativeUrl,\n                    routeError,\n                    type\n                }) => {\n                    // Update our Map in local state for this path.\n                    setComponentMap(prevMap => {\n                        const nextMap = new Map(prevMap);\n\n                        const nextValue = routeError\n                            ? talonResponses.ERROR(routeError)\n                            : id === -1\n                            ? talonResponses.NOT_FOUND\n                            : REDIRECT_CODES.includes(redirectCode)\n                            ? talonResponses.REDIRECT(relativeUrl)\n                            : talonResponses.FOUND(component, id, type, store);\n\n                        return nextMap.set(pathname, nextValue);\n                    });\n                }\n            );\n        }\n    }, [apiBase, componentMap, history, pathname, routeData, store]);\n\n    return routeData || talonResponses.LOADING;\n};\n"]}