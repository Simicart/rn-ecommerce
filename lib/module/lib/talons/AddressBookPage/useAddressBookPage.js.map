{"version":3,"sources":["useAddressBookPage.js"],"names":["useCallback","useEffect","useHistory","useQuery","useAppContext","useUserContext","useAddressBookPage","props","queries","getCustomerAddressesQuery","actions","setPageLoading","history","isSignedIn","data","customerAddressesData","loading","skip","push","handleAddAddress","alert","customerAddresses","customer","addresses"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,cAAT,QAA+B,qCAA/B;AAEA;;;;;;;;;;;;;AAYA,OAAO,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AACvC,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFF,KAFJ;AAIA,QAAM,GAEF;AACIG,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADb,GAFE,IAKFP,aAAa,EALjB;AAMA,QAAMQ,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAM,CAAC;AAAEW,IAAAA;AAAF,GAAD,IAAmBR,cAAc,EAAvC;AACA,QAAM;AAAES,IAAAA,IAAI,EAAEC,qBAAR;AAA+BC,IAAAA;AAA/B,MAA2Cb,QAAQ,CACrDM,yBADqD,EAErD;AACIQ,IAAAA,IAAI,EAAE,CAACJ;AADX,GAFqD,CAAzD,CAbuC,CAoBvC;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACY,UAAL,EAAiB;AACbD,MAAAA,OAAO,CAACM,IAAR,CAAa,GAAb;AACH;AACJ,GAJQ,EAIN,CAACN,OAAD,EAAUC,UAAV,CAJM,CAAT,CArBuC,CA2BvC;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,cAAc,CAACK,OAAD,CAAd;AACH,GAFQ,EAEN,CAACA,OAAD,EAAUL,cAAV,CAFM,CAAT;AAIA,QAAMQ,gBAAgB,GAAGnB,WAAW,CAAC,MAAM;AACvCoB,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMC,iBAAiB,GAClBN,qBAAqB,IAClBA,qBAAqB,CAACO,QADzB,IAEGP,qBAAqB,CAACO,QAAtB,CAA+BC,SAFnC,IAGA,EAJJ;AAMA,SAAO;AACHF,IAAAA,iBADG;AAEHF,IAAAA;AAFG,GAAP;AAIH,CA9CM","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\n\n/**\n *  A talon to support the functionality of the Address Book page.\n *\n *  @param {Object} props\n *  @param {Object} props.queries - GraphQL queries to be run by the talon.\n *\n *\n *  @returns {Object}   talonProps\n *  @returns {Object}   talonProps.data - The user's address book data.\n *  @returns {Boolean}  talonProps.isLoading - Indicates whether the user's\n *      address book data is loading.\n */\nexport const useAddressBookPage = props => {\n    const {\n        queries: { getCustomerAddressesQuery }\n    } = props;\n\n    const [\n        ,\n        {\n            actions: { setPageLoading }\n        }\n    ] = useAppContext();\n    const history = useHistory();\n    const [{ isSignedIn }] = useUserContext();\n    const { data: customerAddressesData, loading } = useQuery(\n        getCustomerAddressesQuery,\n        {\n            skip: !isSignedIn\n        }\n    );\n\n    // If the user is no longer signed in, redirect to the home page.\n    useEffect(() => {\n        if (!isSignedIn) {\n            history.push('/');\n        }\n    }, [history, isSignedIn]);\n\n    // Update the page indicator if the GraphQL query is in flight.\n    useEffect(() => {\n        setPageLoading(loading);\n    }, [loading, setPageLoading]);\n\n    const handleAddAddress = useCallback(() => {\n        alert('TODO!');\n    }, []);\n\n    const customerAddresses =\n        (customerAddressesData &&\n            customerAddressesData.customer &&\n            customerAddressesData.customer.addresses) ||\n        [];\n\n    return {\n        customerAddresses,\n        handleAddAddress\n    };\n};\n"]}