{"version":3,"sources":["useCreateAccount.js"],"names":["useCallback","useMemo","useState","useMutation","useUserContext","useCartContext","useAwaitQuery","useCreateAccount","props","queries","createAccountQuery","customerQuery","getCartDetailsQuery","mutations","createCartMutation","signInMutation","initialValues","onSubmit","isSubmitting","setIsSubmitting","createCart","getCartDetails","removeCart","isGettingDetails","getUserDetails","setToken","fetchCartId","createAccount","error","createAccountError","fetchPolicy","signIn","signInError","fetchUserDetails","fetchCartDetails","handleSubmit","formValues","variables","email","customer","firstname","lastname","password","is_subscribed","subscribe","signInResponse","token","data","generateCustomerToken","process","env","NODE_ENV","console","sanitizedInitialValues","firstName","lastName","rest","errors","Map","isDisabled"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { useUserContext } from '../../../../lib/context/user';\nimport { useCartContext } from '../../../../lib/context/cart';\nimport { useAwaitQuery } from '../../../../lib/hooks/useAwaitQuery';\n\n/**\n * Returns props necessary to render CreateAccount component. In particular this\n * talon handles the submission flow by first doing a pre-submisson validation\n * and then, on success, invokes the `onSubmit` prop, which is usually the action.\n *\n * This talon is almost identical to the other useCreateAccount but does not\n * return `isSignedIn`.\n *\n * @param {Object} props.initialValues initial values to sanitize and seed the form\n * @param {Function} props.onSubmit the post submit callback\n * @param {String} createAccountQuery the graphql query for creating the account\n * @param {String} signInQuery the graphql query for logging in the user (and obtaining the token)\n * @returns {{\n *   errors: Map,\n *   handleSubmit: function,\n *   isDisabled: boolean,\n *   initialValues: object\n * }}\n */\nexport const useCreateAccount = props => {\n    const {\n        queries: { createAccountQuery, customerQuery, getCartDetailsQuery },\n        mutations: { createCartMutation, signInMutation },\n        initialValues = {},\n        onSubmit\n    } = props;\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [, { createCart, getCartDetails, removeCart }] = useCartContext();\n    const [\n        { isGettingDetails },\n        { getUserDetails, setToken }\n    ] = useUserContext();\n\n    const [fetchCartId] = useMutation(createCartMutation);\n\n    // For create account and sign in mutations, we don't want to cache any\n    // personally identifiable information (PII). So we set fetchPolicy to 'no-cache'.\n    const [createAccount, { error: createAccountError }] = useMutation(\n        createAccountQuery,\n        {\n            fetchPolicy: 'no-cache'\n        }\n    );\n\n    const [signIn, { error: signInError }] = useMutation(signInMutation, {\n        fetchPolicy: 'no-cache'\n    });\n\n    const fetchUserDetails = useAwaitQuery(customerQuery);\n    const fetchCartDetails = useAwaitQuery(getCartDetailsQuery);\n\n    const handleSubmit = useCallback(\n        async formValues => {\n            setIsSubmitting(true);\n            try {\n                // Create the account and then sign in.\n                await createAccount({\n                    variables: {\n                        email: formValues.customer.email,\n                        firstname: formValues.customer.firstname,\n                        lastname: formValues.customer.lastname,\n                        password: formValues.password,\n                        is_subscribed: !!formValues.subscribe\n                    }\n                });\n                const signInResponse = await signIn({\n                    variables: {\n                        email: formValues.customer.email,\n                        password: formValues.password\n                    }\n                });\n                const token = signInResponse.data.generateCustomerToken.token;\n                await setToken(token);\n\n                // Clear guest cart from redux.\n                await removeCart();\n\n                // Create a new customer cart.\n                await createCart({\n                    fetchCartId\n                });\n\n                // Ensure old stores are updated with any new data.\n                await getUserDetails({ fetchUserDetails });\n                await getCartDetails({\n                    fetchCartId,\n                    fetchCartDetails\n                });\n\n                // Finally, invoke the post-submission callback.\n                if (onSubmit) {\n                    onSubmit();\n                }\n            } catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                setIsSubmitting(false);\n            }\n        },\n        [\n            createAccount,\n            createCart,\n            fetchCartDetails,\n            fetchCartId,\n            fetchUserDetails,\n            getCartDetails,\n            getUserDetails,\n            onSubmit,\n            removeCart,\n            setToken,\n            signIn\n        ]\n    );\n\n    const sanitizedInitialValues = useMemo(() => {\n        const { email, firstName, lastName, ...rest } = initialValues;\n\n        return {\n            customer: { email, firstname: firstName, lastname: lastName },\n            ...rest\n        };\n    }, [initialValues]);\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['createAccountQuery', createAccountError],\n                ['signInMutation', signInError]\n            ]),\n        [createAccountError, signInError]\n    );\n\n    return {\n        errors,\n        handleSubmit,\n        isDisabled: isSubmitting || isGettingDetails,\n        initialValues: sanitizedInitialValues\n    };\n};\n"]}