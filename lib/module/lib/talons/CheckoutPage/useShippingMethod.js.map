{"version":3,"sources":["useShippingMethod.js"],"names":["useCallback","useEffect","useMemo","useState","useMutation","useQuery","useCartContext","useUserContext","displayStates","DONE","EDITING","INITIALIZING","serializeShippingMethod","method","carrier_code","method_code","deserializeShippingMethod","serializedValue","split","byPrice","a","b","amount","value","addSerializedProperty","shippingMethod","DEFAULT_SELECTED_SHIPPING_METHOD","DEFAULT_AVAILABLE_SHIPPING_METHODS","useShippingMethod","props","onSave","mutations","setShippingMethod","queries","getSelectedAndAvailableShippingMethods","setPageIsUpdating","cartId","isSignedIn","setShippingMethodCall","error","setShippingMethodError","loading","isSettingShippingMethod","data","isLoadingShippingMethods","fetchPolicy","nextFetchPolicy","skip","variables","isUpdateMode","setIsUpdateMode","hasData","cart","shipping_addresses","length","selected_shipping_method","derivedPrimaryShippingAddress","derivedSelectedShippingMethod","derivedShippingMethods","rawShippingMethods","available_shipping_methods","shippingMethodsByPrice","sort","result","map","isBackgroundAutoSelecting","Boolean","displayState","handleSubmit","carrierCode","methodCode","shipping_method","handleCancelUpdate","showUpdateMode","leastExpensiveShippingMethod","errors","Map","isLoading","selectedShippingMethod","shippingMethods"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\n\nexport const displayStates = {\n    DONE: 'done',\n    EDITING: 'editing',\n    INITIALIZING: 'initializing'\n};\n\nconst serializeShippingMethod = method => {\n    if (!method) return '';\n\n    const { carrier_code, method_code } = method;\n\n    return `${carrier_code}|${method_code}`;\n};\n\nconst deserializeShippingMethod = serializedValue => {\n    return serializedValue.split('|');\n};\n\n// Sorts available shipping methods by price.\nconst byPrice = (a, b) => a.amount.value - b.amount.value;\n\n// Adds a serialized property to shipping method objects\n// so they can be selected in the radio group.\nconst addSerializedProperty = shippingMethod => {\n    if (!shippingMethod) return shippingMethod;\n\n    const serializedValue = serializeShippingMethod(shippingMethod);\n\n    return {\n        ...shippingMethod,\n        serializedValue\n    };\n};\n\nconst DEFAULT_SELECTED_SHIPPING_METHOD = null;\nconst DEFAULT_AVAILABLE_SHIPPING_METHODS = [];\n\nexport const useShippingMethod = props => {\n    const {\n        onSave,\n        mutations: { setShippingMethod },\n        queries: { getSelectedAndAvailableShippingMethods },\n        setPageIsUpdating\n    } = props;\n\n    const [{ cartId }] = useCartContext();\n    const [{ isSignedIn }] = useUserContext();\n\n    /*\n     *  Apollo Hooks.\n     */\n    const [\n        setShippingMethodCall,\n        { error: setShippingMethodError, loading: isSettingShippingMethod }\n    ] = useMutation(setShippingMethod);\n\n    const { data, loading: isLoadingShippingMethods } = useQuery(\n        getSelectedAndAvailableShippingMethods,\n        {\n            fetchPolicy: 'cache-and-network',\n            nextFetchPolicy: 'cache-first',\n            skip: !cartId,\n            variables: { cartId }\n        }\n    );\n\n    /*\n     *  State / Derived state.\n     */\n    const [isUpdateMode, setIsUpdateMode] = useState(false);\n\n    const hasData =\n        data &&\n        data.cart.shipping_addresses.length &&\n        data.cart.shipping_addresses[0].selected_shipping_method;\n\n    const derivedPrimaryShippingAddress =\n        data &&\n        data.cart.shipping_addresses &&\n        data.cart.shipping_addresses.length\n            ? data.cart.shipping_addresses[0]\n            : null;\n\n    const derivedSelectedShippingMethod = derivedPrimaryShippingAddress\n        ? addSerializedProperty(\n              derivedPrimaryShippingAddress.selected_shipping_method\n          )\n        : DEFAULT_SELECTED_SHIPPING_METHOD;\n\n    const derivedShippingMethods = useMemo(() => {\n        if (!derivedPrimaryShippingAddress)\n            return DEFAULT_AVAILABLE_SHIPPING_METHODS;\n\n        // Shape the list of available shipping methods.\n        // Sort them by price and add a serialized property to each.\n        const rawShippingMethods =\n            derivedPrimaryShippingAddress.available_shipping_methods;\n        const shippingMethodsByPrice = [...rawShippingMethods].sort(byPrice);\n        const result = shippingMethodsByPrice.map(addSerializedProperty);\n\n        return result;\n    }, [derivedPrimaryShippingAddress]);\n\n    // Determine the component's display state.\n    const isBackgroundAutoSelecting =\n        isSignedIn &&\n        !derivedSelectedShippingMethod &&\n        Boolean(derivedShippingMethods.length);\n    const displayState = derivedSelectedShippingMethod\n        ? displayStates.DONE\n        : isLoadingShippingMethods ||\n          (isSettingShippingMethod && isBackgroundAutoSelecting)\n        ? displayStates.INITIALIZING\n        : displayStates.EDITING;\n\n    /*\n     *  Callbacks.\n     */\n    const handleSubmit = useCallback(\n        async value => {\n            const [carrierCode, methodCode] = deserializeShippingMethod(\n                value.shipping_method\n            );\n\n            setPageIsUpdating(true);\n\n            try {\n                await setShippingMethodCall({\n                    variables: {\n                        cartId,\n                        shippingMethod: {\n                            carrier_code: carrierCode,\n                            method_code: methodCode\n                        }\n                    }\n                });\n            } catch {\n                return;\n            } finally {\n                setPageIsUpdating(false);\n            }\n\n            setIsUpdateMode(false);\n        },\n        [cartId, setIsUpdateMode, setPageIsUpdating, setShippingMethodCall]\n    );\n\n    const handleCancelUpdate = useCallback(() => {\n        setIsUpdateMode(false);\n    }, []);\n\n    const showUpdateMode = useCallback(() => {\n        setIsUpdateMode(true);\n    }, []);\n\n    /*\n     *  Effects.\n     */\n\n    // When we have data we should tell the checkout page\n    // so that it can set the step correctly.\n    useEffect(() => {\n        if (hasData) {\n            onSave();\n        }\n    }, [hasData, onSave]);\n\n    // If an authenticated user does not have a preferred shipping method,\n    // auto-select the least expensive one for them.\n    useEffect(() => {\n        if (!data) return;\n        if (!cartId) return;\n        if (!isSignedIn) return;\n\n        if (!derivedSelectedShippingMethod) {\n            // The shipping methods are sorted by price.\n            const leastExpensiveShippingMethod = derivedShippingMethods[0];\n\n            if (leastExpensiveShippingMethod) {\n                const {\n                    carrier_code,\n                    method_code\n                } = leastExpensiveShippingMethod;\n\n                setShippingMethodCall({\n                    variables: {\n                        cartId,\n                        shippingMethod: {\n                            carrier_code,\n                            method_code\n                        }\n                    }\n                });\n            }\n        }\n    }, [\n        cartId,\n        data,\n        derivedSelectedShippingMethod,\n        derivedShippingMethods,\n        isSignedIn,\n        setShippingMethodCall\n    ]);\n\n    const errors = useMemo(\n        () => new Map([['setShippingMethod', setShippingMethodError]]),\n        [setShippingMethodError]\n    );\n\n    return {\n        displayState,\n        errors,\n        handleCancelUpdate,\n        handleSubmit,\n        isLoading: isLoadingShippingMethods,\n        isUpdateMode,\n        selectedShippingMethod: derivedSelectedShippingMethod,\n        shippingMethods: derivedShippingMethods,\n        showUpdateMode\n    };\n};\n"]}