{"version":3,"sources":["useCustomerForm.js"],"names":["useCallback","useMemo","useMutation","useQuery","useCustomerForm","props","afterSubmit","mutations","createCustomerAddressMutation","updateCustomerAddressMutation","onCancel","queries","getCustomerQuery","getCustomerAddressesQuery","getDefaultShippingQuery","shippingData","createCustomerAddress","error","createCustomerAddressError","loading","createCustomerAddressLoading","updateCustomerAddress","updateCustomerAddressError","updateCustomerAddressLoading","data","customerData","getCustomerLoading","isSaving","isUpdate","city","country","code","countryCode","initialValues","hasDefaultShipping","customer","default_shipping","email","firstname","lastname","defaultUserData","handleSubmit","formValues","address","customerAddress","country_code","id","addressId","variables","refetchQueries","query","handleCancel","errors","Map","isLoading"],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\nexport const useCustomerForm = props => {\n    const {\n        afterSubmit,\n        mutations: {\n            createCustomerAddressMutation,\n            updateCustomerAddressMutation\n        },\n        onCancel,\n        queries: {\n            getCustomerQuery,\n            getCustomerAddressesQuery,\n            getDefaultShippingQuery\n        },\n        shippingData\n    } = props;\n\n    const [\n        createCustomerAddress,\n        {\n            error: createCustomerAddressError,\n            loading: createCustomerAddressLoading\n        }\n    ] = useMutation(createCustomerAddressMutation);\n\n    const [\n        updateCustomerAddress,\n        {\n            error: updateCustomerAddressError,\n            loading: updateCustomerAddressLoading\n        }\n    ] = useMutation(updateCustomerAddressMutation);\n\n    const { data: customerData, loading: getCustomerLoading } = useQuery(\n        getCustomerQuery\n    );\n\n    const isSaving =\n        createCustomerAddressLoading || updateCustomerAddressLoading;\n\n    // Simple heuristic to indicate form was submitted prior to this render\n    const isUpdate = !!shippingData.city;\n\n    const { country } = shippingData;\n    const { code: countryCode } = country;\n\n    let initialValues = {\n        ...shippingData,\n        country: countryCode\n    };\n\n    const hasDefaultShipping =\n        !!customerData && !!customerData.customer.default_shipping;\n\n    // For first time creation pre-fill the form with Customer data\n    if (!isUpdate && !getCustomerLoading && !hasDefaultShipping) {\n        const { customer } = customerData;\n        const { email, firstname, lastname } = customer;\n        const defaultUserData = { email, firstname, lastname };\n        initialValues = {\n            ...initialValues,\n            ...defaultUserData\n        };\n    }\n\n    const handleSubmit = useCallback(\n        async formValues => {\n            // eslint-disable-next-line no-unused-vars\n            const { country, email, ...address } = formValues;\n            try {\n                const customerAddress = {\n                    ...address,\n                    country_code: country\n                };\n\n                if (isUpdate) {\n                    const { id: addressId } = shippingData;\n                    await updateCustomerAddress({\n                        variables: {\n                            addressId,\n                            address: customerAddress\n                        },\n                        refetchQueries: [{ query: getCustomerAddressesQuery }]\n                    });\n                } else {\n                    await createCustomerAddress({\n                        variables: {\n                            address: customerAddress\n                        },\n                        refetchQueries: [\n                            { query: getCustomerAddressesQuery },\n                            { query: getDefaultShippingQuery }\n                        ]\n                    });\n                }\n            } catch {\n                return;\n            }\n\n            if (afterSubmit) {\n                afterSubmit();\n            }\n        },\n        [\n            afterSubmit,\n            createCustomerAddress,\n            getCustomerAddressesQuery,\n            getDefaultShippingQuery,\n            isUpdate,\n            shippingData,\n            updateCustomerAddress\n        ]\n    );\n\n    const handleCancel = useCallback(() => {\n        onCancel();\n    }, [onCancel]);\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['createCustomerAddressMutation', createCustomerAddressError],\n                ['updateCustomerAddressMutation', updateCustomerAddressError]\n            ]),\n        [createCustomerAddressError, updateCustomerAddressError]\n    );\n\n    return {\n        errors,\n        handleCancel,\n        handleSubmit,\n        hasDefaultShipping,\n        initialValues,\n        isLoading: getCustomerLoading,\n        isSaving,\n        isUpdate\n    };\n};\n"]}