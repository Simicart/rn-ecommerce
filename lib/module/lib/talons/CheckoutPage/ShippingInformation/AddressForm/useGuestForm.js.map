{"version":3,"sources":["useGuestForm.js"],"names":["useCallback","useMemo","useMutation","useCartContext","useGuestForm","props","afterSubmit","mutations","setGuestShippingMutation","onCancel","shippingData","cartId","setGuestShipping","error","loading","country","region","code","countryCode","regionCode","initialValues","isUpdate","city","handleSubmit","formValues","email","address","variables","country_code","handleCancel","errors","Map","isSaving"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AACjC,QAAM;AACFC,IAAAA,WADE;AAEFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KAFT;AAGFC,IAAAA,QAHE;AAIFC,IAAAA;AAJE,MAKFL,KALJ;AAOA,QAAM,CAAC;AAAEM,IAAAA;AAAF,GAAD,IAAeR,cAAc,EAAnC;AAEA,QAAM,CAACS,gBAAD,EAAmB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAnB,IAAyCZ,WAAW,CACtDM,wBADsD,CAA1D;AAIA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBN,YAA5B;AACA,QAAM;AAAEO,IAAAA,IAAI,EAAEC;AAAR,MAAwBH,OAA9B;AACA,QAAM;AAAEE,IAAAA,IAAI,EAAEE;AAAR,MAAuBH,MAA7B;AAEA,QAAMI,aAAa,GAAG,EAClB,GAAGV,YADe;AAElBK,IAAAA,OAAO,EAAEG,WAFS;AAGlBF,IAAAA,MAAM,EAAEG;AAHU,GAAtB,CAlBiC,CAwBjC;;AACA,QAAME,QAAQ,GAAG,CAAC,CAACX,YAAY,CAACY,IAAhC;AAEA,QAAMC,YAAY,GAAGvB,WAAW,CAC5B,MAAMwB,UAAN,IAAoB;AAChB,UAAM;AAAET,MAAAA,OAAF;AAAWU,MAAAA,KAAX;AAAkB,SAAGC;AAArB,QAAiCF,UAAvC;;AACA,QAAI;AACA,YAAMZ,gBAAgB,CAAC;AACnBe,QAAAA,SAAS,EAAE;AACPhB,UAAAA,MADO;AAEPc,UAAAA,KAFO;AAGPC,UAAAA,OAAO,EAAE,EACL,GAAGA,OADE;AAELE,YAAAA,YAAY,EAAEb;AAFT;AAHF;AADQ,OAAD,CAAtB;AAUH,KAXD,CAWE,MAAM;AACJ;AACH;;AAED,QAAIT,WAAJ,EAAiB;AACbA,MAAAA,WAAW;AACd;AACJ,GArB2B,EAsB5B,CAACA,WAAD,EAAcK,MAAd,EAAsBC,gBAAtB,CAtB4B,CAAhC;AAyBA,QAAMiB,YAAY,GAAG7B,WAAW,CAAC,MAAM;AACnCS,IAAAA,QAAQ;AACX,GAF+B,EAE7B,CAACA,QAAD,CAF6B,CAAhC;AAIA,QAAMqB,MAAM,GAAG7B,OAAO,CAClB,MAAM,IAAI8B,GAAJ,CAAQ,CAAC,CAAC,0BAAD,EAA6BlB,KAA7B,CAAD,CAAR,CADY,EAElB,CAACA,KAAD,CAFkB,CAAtB;AAKA,SAAO;AACHiB,IAAAA,MADG;AAEHD,IAAAA,YAFG;AAGHN,IAAAA,YAHG;AAIHH,IAAAA,aAJG;AAKHY,IAAAA,QAAQ,EAAElB,OALP;AAMHO,IAAAA;AANG,GAAP;AAQH,CArEM","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { useCartContext } from '../../../../context/cart';\n\nexport const useGuestForm = props => {\n    const {\n        afterSubmit,\n        mutations: { setGuestShippingMutation },\n        onCancel,\n        shippingData\n    } = props;\n\n    const [{ cartId }] = useCartContext();\n\n    const [setGuestShipping, { error, loading }] = useMutation(\n        setGuestShippingMutation\n    );\n\n    const { country, region } = shippingData;\n    const { code: countryCode } = country;\n    const { code: regionCode } = region;\n\n    const initialValues = {\n        ...shippingData,\n        country: countryCode,\n        region: regionCode\n    };\n\n    // Simple heuristic to indicate form was submitted prior to this render\n    const isUpdate = !!shippingData.city;\n\n    const handleSubmit = useCallback(\n        async formValues => {\n            const { country, email, ...address } = formValues;\n            try {\n                await setGuestShipping({\n                    variables: {\n                        cartId,\n                        email,\n                        address: {\n                            ...address,\n                            country_code: country\n                        }\n                    }\n                });\n            } catch {\n                return;\n            }\n\n            if (afterSubmit) {\n                afterSubmit();\n            }\n        },\n        [afterSubmit, cartId, setGuestShipping]\n    );\n\n    const handleCancel = useCallback(() => {\n        onCancel();\n    }, [onCancel]);\n\n    const errors = useMemo(\n        () => new Map([['setGuestShippingMutation', error]]),\n        [error]\n    );\n\n    return {\n        errors,\n        handleCancel,\n        handleSubmit,\n        initialValues,\n        isSaving: loading,\n        isUpdate\n    };\n};\n"]}