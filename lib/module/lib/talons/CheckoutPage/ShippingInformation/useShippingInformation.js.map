{"version":3,"sources":["useShippingInformation.js"],"names":["useCallback","useEffect","useMemo","useState","useRef","useMutation","useQuery","useAppContext","useCartContext","useUserContext","MOCKED_ADDRESS","useShippingInformation","props","mutations","setDefaultAddressOnCartMutation","onSave","queries","getDefaultShippingQuery","getShippingInformationQuery","toggleActiveContent","toggleDrawer","cartId","isSignedIn","hasUpdate","setHasUpdate","hasLoadedData","data","shippingInformationData","loading","getShippingInformationLoading","skip","variables","defaultShippingData","getDefaultShippingLoading","setDefaultAddressOnCart","setDefaultAddressLoading","isLoading","shippingData","filteredData","cart","email","shipping_addresses","shippingAddresses","length","primaryAddress","field","doneEditing","city","updateTimer","undefined","current","setTimeout","clearTimeout","customer","default_shipping","defaultAddressId","addressId","parseInt","handleEditShipping"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState, useRef } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\nimport { useAppContext } from '../../../context/app';\nimport { useCartContext } from '../../../context/cart';\nimport { useUserContext } from '../../../context/user';\nimport { MOCKED_ADDRESS } from '../../CartPage/PriceAdjustments/ShippingMethods/useShippingForm';\n\nexport const useShippingInformation = props => {\n    const {\n        mutations: { setDefaultAddressOnCartMutation },\n        onSave,\n        queries: { getDefaultShippingQuery, getShippingInformationQuery },\n        toggleActiveContent\n    } = props;\n\n    const [, { toggleDrawer }] = useAppContext();\n    const [{ cartId }] = useCartContext();\n    const [{ isSignedIn }] = useUserContext();\n\n    const [hasUpdate, setHasUpdate] = useState(false);\n    const hasLoadedData = useRef(false);\n\n    const {\n        data: shippingInformationData,\n        loading: getShippingInformationLoading\n    } = useQuery(getShippingInformationQuery, {\n        skip: !cartId,\n        variables: {\n            cartId\n        }\n    });\n\n    const {\n        data: defaultShippingData,\n        loading: getDefaultShippingLoading\n    } = useQuery(getDefaultShippingQuery, { skip: !isSignedIn });\n\n    const [\n        setDefaultAddressOnCart,\n        { loading: setDefaultAddressLoading }\n    ] = useMutation(setDefaultAddressOnCartMutation);\n\n    const isLoading =\n        getShippingInformationLoading ||\n        getDefaultShippingLoading ||\n        setDefaultAddressLoading;\n\n    const shippingData = useMemo(() => {\n        let filteredData;\n        if (shippingInformationData) {\n            const { cart } = shippingInformationData;\n            const { email, shipping_addresses: shippingAddresses } = cart;\n            if (shippingAddresses.length) {\n                const primaryAddress = { ...shippingAddresses[0] };\n                for (const field in MOCKED_ADDRESS) {\n                    if (primaryAddress[field] === MOCKED_ADDRESS[field]) {\n                        primaryAddress[field] = '';\n                    }\n\n                    if (\n                        field === 'street' &&\n                        primaryAddress[field][0] === MOCKED_ADDRESS[field][0]\n                    ) {\n                        primaryAddress[field] = [''];\n                    }\n                }\n\n                filteredData = {\n                    email,\n                    ...primaryAddress\n                };\n            }\n        }\n\n        return filteredData;\n    }, [shippingInformationData]);\n\n    // Simple heuristic to check shipping data existed prior to this render.\n    // On first submission, when we have data, we should tell the checkout page\n    // so that we set the next step correctly.\n    const doneEditing = !!shippingData && !!shippingData.city;\n\n    useEffect(() => {\n        if (doneEditing) {\n            onSave();\n        }\n    }, [doneEditing, onSave]);\n\n    useEffect(() => {\n        let updateTimer;\n        if (shippingData !== undefined) {\n            if (hasLoadedData.current) {\n                setHasUpdate(true);\n                updateTimer = setTimeout(() => {\n                    setHasUpdate(false);\n                }, 2000);\n            } else {\n                hasLoadedData.current = true;\n            }\n        }\n\n        return () => {\n            if (updateTimer) {\n                clearTimeout(updateTimer);\n            }\n        };\n    }, [hasLoadedData, shippingData]);\n\n    useEffect(() => {\n        if (\n            shippingInformationData &&\n            !doneEditing &&\n            cartId &&\n            defaultShippingData\n        ) {\n            const { customer } = defaultShippingData;\n            const { default_shipping: defaultAddressId } = customer;\n            if (defaultAddressId) {\n                setDefaultAddressOnCart({\n                    variables: {\n                        cartId,\n                        addressId: parseInt(defaultAddressId)\n                    }\n                });\n            }\n        }\n    }, [\n        cartId,\n        doneEditing,\n        defaultShippingData,\n        setDefaultAddressOnCart,\n        shippingInformationData\n    ]);\n\n    const handleEditShipping = useCallback(() => {\n        if (isSignedIn) {\n            toggleActiveContent();\n        } else {\n            toggleDrawer('shippingInformation.edit');\n        }\n    }, [isSignedIn, toggleActiveContent, toggleDrawer]);\n\n    return {\n        doneEditing,\n        handleEditShipping,\n        hasUpdate,\n        isLoading,\n        isSignedIn,\n        shippingData\n    };\n};\n"]}