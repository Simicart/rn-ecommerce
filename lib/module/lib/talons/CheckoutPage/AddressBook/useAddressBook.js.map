{"version":3,"sources":["useAddressBook.js"],"names":["useCallback","useEffect","useState","useRef","useMemo","useMutation","useQuery","useAppContext","useCartContext","useUserContext","deriveErrorMessage","useAddressBook","props","mutations","setCustomerAddressOnCartMutation","queries","getCustomerAddressesQuery","getCustomerCartAddressQuery","toggleActiveContent","toggleDrawer","cartId","isSignedIn","addressCount","activeAddress","setActiveAddress","selectedAddress","setSelectedAddress","setCustomerAddressOnCart","error","setCustomerAddressOnCartError","loading","setCustomerAddressOnCartLoading","data","customerAddressesData","customerAddressesLoading","fetchPolicy","nextFetchPolicy","skip","customerCartAddressData","customerCartAddressLoading","derivedErrorMessage","isLoading","customerAddresses","customer","addresses","length","current","newestAddress","id","handleEditAddress","address","handleAddAddress","handleSelectAddress","addressId","customerCart","shipping_addresses","shippingAddresses","primaryCartAddress","foundSelectedAddress","find","customerAddress","street","firstname","lastname","handleApplyAddress","variables","handleCancel","errorMessage"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState, useRef, useMemo } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\nimport { useAppContext } from '../../../context/app';\nimport { useCartContext } from '../../../context/cart';\nimport { useUserContext } from '../../../context/user';\nimport { deriveErrorMessage } from '../../../util/deriveErrorMessage';\n\nexport const useAddressBook = props => {\n    const {\n        mutations: { setCustomerAddressOnCartMutation },\n        queries: { getCustomerAddressesQuery, getCustomerCartAddressQuery },\n        toggleActiveContent\n    } = props;\n\n    const [, { toggleDrawer }] = useAppContext();\n    const [{ cartId }] = useCartContext();\n    const [{ isSignedIn }] = useUserContext();\n\n    const addressCount = useRef();\n    const [activeAddress, setActiveAddress] = useState();\n    const [selectedAddress, setSelectedAddress] = useState();\n\n    const [\n        setCustomerAddressOnCart,\n        {\n            error: setCustomerAddressOnCartError,\n            loading: setCustomerAddressOnCartLoading\n        }\n    ] = useMutation(setCustomerAddressOnCartMutation);\n\n    const {\n        data: customerAddressesData,\n        loading: customerAddressesLoading\n    } = useQuery(getCustomerAddressesQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !isSignedIn\n    });\n\n    const {\n        data: customerCartAddressData,\n        loading: customerCartAddressLoading\n    } = useQuery(getCustomerCartAddressQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !isSignedIn\n    });\n\n    const derivedErrorMessage = useMemo(\n        () => deriveErrorMessage([setCustomerAddressOnCartError]),\n        [setCustomerAddressOnCartError]\n    );\n\n    const isLoading =\n        customerAddressesLoading ||\n        customerCartAddressLoading ||\n        setCustomerAddressOnCartLoading;\n\n    const customerAddresses =\n        (customerAddressesData && customerAddressesData.customer.addresses) ||\n        [];\n\n    useEffect(() => {\n        if (customerAddresses.length !== addressCount.current) {\n            // Auto-select newly added address when count changes\n            if (addressCount.current) {\n                const newestAddress =\n                    customerAddresses[customerAddresses.length - 1];\n                setSelectedAddress(newestAddress.id);\n            }\n\n            addressCount.current = customerAddresses.length;\n        }\n    }, [customerAddresses]);\n\n    const handleEditAddress = useCallback(\n        address => {\n            setActiveAddress(address);\n            toggleDrawer('shippingInformation.edit');\n        },\n        [toggleDrawer]\n    );\n\n    const handleAddAddress = useCallback(() => {\n        handleEditAddress();\n    }, [handleEditAddress]);\n\n    const handleSelectAddress = useCallback(addressId => {\n        setSelectedAddress(addressId);\n    }, []);\n\n    // GraphQL doesn't return which customer address is selected, so perform\n    // a simple search to initialize this selected address value.\n    if (\n        customerAddresses.length &&\n        customerCartAddressData &&\n        !selectedAddress\n    ) {\n        const { customerCart } = customerCartAddressData;\n        const { shipping_addresses: shippingAddresses } = customerCart;\n        if (shippingAddresses.length) {\n            const primaryCartAddress = shippingAddresses[0];\n\n            const foundSelectedAddress = customerAddresses.find(\n                customerAddress =>\n                    customerAddress.street[0] ===\n                        primaryCartAddress.street[0] &&\n                    customerAddress.firstname ===\n                        primaryCartAddress.firstname &&\n                    customerAddress.lastname === primaryCartAddress.lastname\n            );\n\n            if (foundSelectedAddress) {\n                setSelectedAddress(foundSelectedAddress.id);\n            }\n        }\n    }\n\n    const handleApplyAddress = useCallback(async () => {\n        try {\n            await setCustomerAddressOnCart({\n                variables: {\n                    cartId,\n                    addressId: selectedAddress\n                }\n            });\n        } catch {\n            return;\n        }\n\n        toggleActiveContent();\n    }, [\n        cartId,\n        selectedAddress,\n        setCustomerAddressOnCart,\n        toggleActiveContent\n    ]);\n\n    const handleCancel = useCallback(() => {\n        setSelectedAddress();\n        toggleActiveContent();\n    }, [toggleActiveContent]);\n\n    return {\n        activeAddress,\n        customerAddresses,\n        errorMessage: derivedErrorMessage,\n        isLoading,\n        handleAddAddress,\n        handleApplyAddress,\n        handleCancel,\n        handleSelectAddress,\n        handleEditAddress,\n        selectedAddress\n    };\n};\n"]}