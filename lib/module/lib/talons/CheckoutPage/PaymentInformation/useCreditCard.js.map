{"version":3,"sources":["useCreditCard.js"],"names":["useCallback","useEffect","useState","useMemo","useFormState","useFormApi","useQuery","useApolloClient","useMutation","useCartContext","mapAddressData","rawAddressData","firstName","lastName","city","postalCode","phoneNumber","street","country","region","street1","street2","code","useCreditCard","props","onSuccess","queries","mutations","onReady","onError","shouldSubmit","resetShouldSubmit","getBillingAddressQuery","getIsBillingAddressSameQuery","getPaymentNonceQuery","getShippingAddressQuery","setBillingAddressMutation","setCreditCardDetailsOnCartMutation","isDropinLoading","setDropinLoading","shouldRequestPaymentNonce","setShouldRequestPaymentNonce","shouldTeardownDropin","setShouldTeardownDropin","stepNumber","setStepNumber","client","formState","validate","validateBillingAddressForm","cartId","isLoading","data","billingAddressData","skip","variables","shippingAddressData","isBillingAddressSameData","updateBillingAddress","error","billingAddressMutationError","called","billingAddressMutationCalled","loading","billingAddressMutationLoading","updateCCDetails","ccMutationError","ccMutationCalled","ccMutationLoading","shippingAddressCountry","cart","shippingAddresses","isBillingAddressSame","values","initialValues","billingAddress","__typename","rawBillingAddress","setIsBillingAddressSameInCache","writeQuery","query","id","setShippingAddressAsBillingAddress","shippingAddress","sameAsShipping","setBillingAddress","setPaymentDetailsInCache","braintreeNonce","details","description","type","paymentNonce","updateCCDetailsOnCart","nonce","paymentMethod","onPaymentSuccess","onPaymentError","onPaymentReady","resetShouldTeardownDropin","hasErrors","Object","keys","errors","length","Error","err","console","billingAddressMutationCompleted","ccMutationCompleted","Map"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState, useMemo } from 'react';\nimport { useFormState, useFormApi } from 'informed';\nimport { useQuery, useApolloClient, useMutation } from '@apollo/client';\n\nimport { useCartContext } from '../../../context/cart';\n\n/**\n * Maps address response data from GET_BILLING_ADDRESS and GET_SHIPPING_ADDRESS\n * queries to input names in the billing address form.\n * {@link creditCard.gql.js}.\n *\n * @param {ShippingCartAddress|BillingCartAddress} rawAddressData query data\n */\nexport const mapAddressData = rawAddressData => {\n    if (rawAddressData) {\n        const {\n            firstName,\n            lastName,\n            city,\n            postalCode,\n            phoneNumber,\n            street,\n            country,\n            region\n        } = rawAddressData;\n\n        return {\n            firstName,\n            lastName,\n            city,\n            postalCode,\n            phoneNumber,\n            street1: street[0],\n            street2: street[1],\n            country: country.code,\n            region: region.code\n        };\n    } else {\n        return {};\n    }\n};\n\n/**\n * Talon to handle Credit Card payment method.\n *\n * @param {Boolean} props.shouldSubmit boolean value which represents if a payment nonce request has been submitted\n * @param {Function} props.onSuccess callback to invoke when the a payment nonce has been generated\n * @param {Function} props.onReady callback to invoke when the braintree dropin component is ready\n * @param {Function} props.onError callback to invoke when the braintree dropin component throws an error\n * @param {Function} props.resetShouldSubmit callback to reset the shouldSubmit flag\n * @param {DocumentNode} props.queries.getBillingAddressQuery query to fetch billing address from cache\n * @param {DocumentNode} props.queries.getIsBillingAddressSameQuery query to fetch is billing address same checkbox value from cache\n * @param {DocumentNode} props.queries.getPaymentNonceQuery query to fetch payment nonce saved in cache\n * @param {DocumentNode} props.mutations.setBillingAddressMutation mutation to update billing address on the cart\n * @param {DocumentNode} props.mutations.setCreditCardDetailsOnCartMutation mutation to update payment method and payment nonce on the cart\n *\n * @returns {\n *   errors: Map<String, Error>,\n *   shouldRequestPaymentNonce: Boolean,\n *   onPaymentError: Function,\n *   onPaymentSuccess: Function,\n *   onPaymentReady: Function,\n *   isBillingAddressSame: Boolean,\n *   isLoading: Boolean,\n *   stepNumber: Number,\n *   initialValues: {\n *      firstName: String,\n *      lastName: String,\n *      city: String,\n *      postalCode: String,\n *      phoneNumber: String,\n *      street1: String,\n *      street2: String,\n *      country: String,\n *      state: String,\n *      isBillingAddressSame: Boolean\n *   },\n *   shippingAddressCountry: String,\n *   shouldTeardownDropin: Boolean,\n *   resetShouldTeardownDropin: Function\n * }\n */\nexport const useCreditCard = props => {\n    const {\n        onSuccess,\n        queries,\n        mutations,\n        onReady,\n        onError,\n        shouldSubmit,\n        resetShouldSubmit\n    } = props;\n\n    const {\n        getBillingAddressQuery,\n        getIsBillingAddressSameQuery,\n        getPaymentNonceQuery,\n        getShippingAddressQuery\n    } = queries;\n\n    const {\n        setBillingAddressMutation,\n        setCreditCardDetailsOnCartMutation\n    } = mutations;\n\n    /**\n     * Definitions\n     */\n\n    const [isDropinLoading, setDropinLoading] = useState(true);\n    const [shouldRequestPaymentNonce, setShouldRequestPaymentNonce] = useState(\n        false\n    );\n    const [shouldTeardownDropin, setShouldTeardownDropin] = useState(false);\n    /**\n     * `stepNumber` depicts the state of the process flow in credit card\n     * payment flow.\n     *\n     * `0` No call made yet\n     * `1` Billing address mutation intiated\n     * `2` Braintree nonce requsted\n     * `3` Payment information mutation intiated\n     * `4` All mutations done\n     */\n    const [stepNumber, setStepNumber] = useState(0);\n\n    const client = useApolloClient();\n    const formState = useFormState();\n    const { validate: validateBillingAddressForm } = useFormApi();\n    const [{ cartId }] = useCartContext();\n\n    const isLoading = isDropinLoading || (stepNumber >= 1 && stepNumber <= 3);\n\n    const { data: billingAddressData } = useQuery(getBillingAddressQuery, {\n        skip: !cartId,\n        variables: { cartId }\n    });\n    const { data: shippingAddressData } = useQuery(getShippingAddressQuery, {\n        skip: !cartId,\n        variables: { cartId }\n    });\n    const { data: isBillingAddressSameData } = useQuery(\n        getIsBillingAddressSameQuery,\n        { skip: !cartId, variables: { cartId } }\n    );\n    const [\n        updateBillingAddress,\n        {\n            error: billingAddressMutationError,\n            called: billingAddressMutationCalled,\n            loading: billingAddressMutationLoading\n        }\n    ] = useMutation(setBillingAddressMutation);\n\n    const [\n        updateCCDetails,\n        {\n            error: ccMutationError,\n            called: ccMutationCalled,\n            loading: ccMutationLoading\n        }\n    ] = useMutation(setCreditCardDetailsOnCartMutation);\n\n    const shippingAddressCountry = shippingAddressData\n        ? shippingAddressData.cart.shippingAddresses[0].country.code\n        : 'US';\n    const isBillingAddressSame = formState.values.isBillingAddressSame;\n\n    const initialValues = useMemo(() => {\n        const isBillingAddressSame = isBillingAddressSameData\n            ? isBillingAddressSameData.cart.isBillingAddressSame\n            : true;\n\n        let billingAddress = {};\n        /**\n         * If billing address is same as shipping address, do\n         * not auto fill the fields.\n         */\n        if (billingAddressData && !isBillingAddressSame) {\n            if (billingAddressData.cart.billingAddress) {\n                const {\n                    // eslint-disable-next-line no-unused-vars\n                    __typename,\n                    ...rawBillingAddress\n                } = billingAddressData.cart.billingAddress;\n                billingAddress = mapAddressData(rawBillingAddress);\n            }\n        }\n\n        return { isBillingAddressSame, ...billingAddress };\n    }, [isBillingAddressSameData, billingAddressData]);\n\n    /**\n     * Helpers\n     */\n\n    /**\n     * This function sets the boolean isBillingAddressSame\n     * in cache for future use. We use cache because there\n     * is no way to save this on the cart in remote.\n     */\n    const setIsBillingAddressSameInCache = useCallback(() => {\n        client.writeQuery({\n            query: getIsBillingAddressSameQuery,\n            data: {\n                cart: {\n                    __typename: 'Cart',\n                    id: cartId,\n                    isBillingAddressSame\n                }\n            }\n        });\n    }, [client, cartId, getIsBillingAddressSameQuery, isBillingAddressSame]);\n\n    /**\n     * This function sets the billing address on the cart using the\n     * shipping address.\n     */\n    const setShippingAddressAsBillingAddress = useCallback(() => {\n        const shippingAddress = shippingAddressData\n            ? mapAddressData(shippingAddressData.cart.shippingAddresses[0])\n            : {};\n\n        updateBillingAddress({\n            variables: {\n                cartId,\n                ...shippingAddress,\n                sameAsShipping: true\n            }\n        });\n    }, [updateBillingAddress, shippingAddressData, cartId]);\n\n    /**\n     * This function sets the billing address on the cart using the\n     * information from the form.\n     */\n    const setBillingAddress = useCallback(() => {\n        const {\n            firstName,\n            lastName,\n            country,\n            street1,\n            street2,\n            city,\n            region,\n            postalCode,\n            phoneNumber\n        } = formState.values;\n\n        updateBillingAddress({\n            variables: {\n                cartId,\n                firstName,\n                lastName,\n                country,\n                street1,\n                street2,\n                city,\n                region,\n                postalCode,\n                phoneNumber,\n                sameAsShipping: false\n            }\n        });\n    }, [formState.values, updateBillingAddress, cartId]);\n\n    /**\n     * This function sets the payment nonce details in the cache.\n     * We use cache because there is no way to save this information\n     * on the cart in the remote.\n     *\n     * We do not save the nonce code because it is a PII.\n     */\n    const setPaymentDetailsInCache = useCallback(\n        braintreeNonce => {\n            /**\n             * We dont save the nonce code due to PII,\n             * we only save the subset of details.\n             */\n            const { details, description, type } = braintreeNonce;\n            client.writeQuery({\n                query: getPaymentNonceQuery,\n                data: {\n                    cart: {\n                        __typename: 'Cart',\n                        id: cartId,\n                        paymentNonce: {\n                            details,\n                            description,\n                            type\n                        }\n                    }\n                }\n            });\n        },\n        [cartId, client, getPaymentNonceQuery]\n    );\n\n    /**\n     * This function saves the nonce code from braintree\n     * on the cart along with the payment method used in\n     * this case `braintree`.\n     */\n    const updateCCDetailsOnCart = useCallback(\n        braintreeNonce => {\n            const { nonce } = braintreeNonce;\n            updateCCDetails({\n                variables: {\n                    cartId,\n                    paymentMethod: 'braintree',\n                    paymentNonce: nonce\n                }\n            });\n        },\n        [updateCCDetails, cartId]\n    );\n\n    /**\n     * Function to be called by the braintree dropin when the\n     * nonce generation is successful.\n     */\n    const onPaymentSuccess = useCallback(\n        braintreeNonce => {\n            setPaymentDetailsInCache(braintreeNonce);\n            /**\n             * Updating payment braintreeNonce and selected payment method on cart.\n             */\n            updateCCDetailsOnCart(braintreeNonce);\n            setStepNumber(3);\n        },\n        [setPaymentDetailsInCache, updateCCDetailsOnCart]\n    );\n\n    /**\n     * Function to be called by the braintree dropin when the\n     * nonce generation is not successful.\n     */\n    const onPaymentError = useCallback(\n        error => {\n            setStepNumber(0);\n            setShouldRequestPaymentNonce(false);\n            resetShouldSubmit();\n            if (onError) {\n                onError(error);\n            }\n        },\n        [onError, resetShouldSubmit]\n    );\n\n    /**\n     * Function to be called by the braintree dropin when the\n     * credit card component has loaded successfully.\n     */\n    const onPaymentReady = useCallback(() => {\n        setDropinLoading(false);\n        setStepNumber(0);\n        if (onReady) {\n            onReady();\n        }\n    }, [onReady]);\n\n    /**\n     * Function to be called by braintree dropin when the payment\n     * teardown is done successfully before re creating the new dropin.\n     */\n    const resetShouldTeardownDropin = useCallback(() => {\n        setShouldTeardownDropin(false);\n    }, []);\n\n    /**\n     * Effects\n     */\n\n    /**\n     * Step 1 effect\n     *\n     * User has clicked the update button\n     */\n    useEffect(() => {\n        try {\n            if (shouldSubmit) {\n                /**\n                 * Validate billing address fields and only process with\n                 * submit if there are no errors.\n                 *\n                 * We do this because the user can click Review Order button\n                 * without fillig in all fields and the form submission\n                 * happens manually. The informed Form component validates\n                 * on submission but that only happens when we use the onSubmit\n                 * prop. In this case we are using manually submission because\n                 * of the nature of the credit card submission process.\n                 */\n                validateBillingAddressForm();\n\n                const hasErrors = Object.keys(formState.errors).length;\n\n                if (!hasErrors) {\n                    setStepNumber(1);\n                    if (isBillingAddressSame) {\n                        setShippingAddressAsBillingAddress();\n                    } else {\n                        setBillingAddress();\n                    }\n                    setIsBillingAddressSameInCache();\n                } else {\n                    throw new Error('Errors in the billing address form');\n                }\n            }\n        } catch (err) {\n            console.error(err);\n            setStepNumber(0);\n            resetShouldSubmit();\n            setShouldRequestPaymentNonce(false);\n        }\n    }, [\n        shouldSubmit,\n        isBillingAddressSame,\n        setShippingAddressAsBillingAddress,\n        setBillingAddress,\n        setIsBillingAddressSameInCache,\n        resetShouldSubmit,\n        validateBillingAddressForm,\n        formState.errors\n    ]);\n\n    /**\n     * Step 2 effect\n     *\n     * Billing address mutation has completed\n     */\n    useEffect(() => {\n        try {\n            const billingAddressMutationCompleted =\n                billingAddressMutationCalled && !billingAddressMutationLoading;\n\n            if (\n                billingAddressMutationCompleted &&\n                !billingAddressMutationError\n            ) {\n                /**\n                 * Billing address save mutation is successful\n                 * we can initiate the braintree nonce request\n                 */\n                setStepNumber(2);\n                setShouldRequestPaymentNonce(true);\n            }\n\n            if (\n                billingAddressMutationCompleted &&\n                billingAddressMutationError\n            ) {\n                /**\n                 * Billing address save mutation is not successful.\n                 * Reset update button clicked flag.\n                 */\n                throw new Error('Billing address mutation failed');\n            }\n        } catch (err) {\n            console.error(err);\n            setStepNumber(0);\n            resetShouldSubmit();\n            setShouldRequestPaymentNonce(false);\n        }\n    }, [\n        billingAddressMutationError,\n        billingAddressMutationCalled,\n        billingAddressMutationLoading,\n        resetShouldSubmit\n    ]);\n\n    /**\n     * Step 3 effect\n     *\n     * Credit card save mutation has completed\n     */\n    useEffect(() => {\n        /**\n         * Saved billing address, payment method and payment nonce on cart.\n         *\n         * Time to call onSuccess.\n         */\n\n        try {\n            const ccMutationCompleted = ccMutationCalled && !ccMutationLoading;\n\n            if (ccMutationCompleted && !ccMutationError) {\n                if (onSuccess) {\n                    onSuccess();\n                }\n                resetShouldSubmit();\n                setStepNumber(4);\n            }\n\n            if (ccMutationCompleted && ccMutationError) {\n                /**\n                 * If credit card mutation failed, reset update button clicked so the\n                 * user can click again and set `stepNumber` to 0.\n                 */\n                throw new Error('Credit card nonce save mutation failed.');\n            }\n        } catch (err) {\n            console.error(err);\n            setStepNumber(0);\n            resetShouldSubmit();\n            setShouldRequestPaymentNonce(false);\n            setShouldTeardownDropin(true);\n        }\n    }, [\n        ccMutationCalled,\n        ccMutationLoading,\n        onSuccess,\n        setShouldRequestPaymentNonce,\n        resetShouldSubmit,\n        ccMutationError\n    ]);\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['setBillingAddressMutation', billingAddressMutationError],\n                ['setCreditCardDetailsOnCartMutation', ccMutationError]\n            ]),\n        [billingAddressMutationError, ccMutationError]\n    );\n\n    return {\n        errors,\n        onPaymentError,\n        onPaymentSuccess,\n        onPaymentReady,\n        isBillingAddressSame,\n        isLoading,\n        shouldRequestPaymentNonce,\n        stepNumber,\n        initialValues,\n        shippingAddressCountry,\n        shouldTeardownDropin,\n        resetShouldTeardownDropin\n    };\n};\n"]}