{"version":3,"sources":["useOrderHistoryPage.js"],"names":["useEffect","useMemo","useHistory","useQuery","useAppContext","useUserContext","useTypePolicies","useOrderHistoryPage","props","queries","types","getCustomerOrdersQuery","actions","setPageLoading","history","isSignedIn","data","loading","fetchPolicy","skip","isLoadingWithoutData","isBackgroundLoading","orders","customer","items","push"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACxC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBF,KAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAA6BF,OAAnC;AAEAH,EAAAA,eAAe,CAACI,KAAD,CAAf;AAEA,QAAM,GAEF;AACIE,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADb,GAFE,IAKFT,aAAa,EALjB;AAMA,QAAMU,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAM,CAAC;AAAEa,IAAAA;AAAF,GAAD,IAAmBV,cAAc,EAAvC;AAEA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBd,QAAQ,CAACQ,sBAAD,EAAyB;AACvDO,IAAAA,WAAW,EAAE,mBAD0C;AAEvDC,IAAAA,IAAI,EAAE,CAACJ;AAFgD,GAAzB,CAAlC;AAKA,QAAMK,oBAAoB,GAAG,CAACJ,IAAD,IAASC,OAAtC;AACA,QAAMI,mBAAmB,GAAG,CAAC,CAACL,IAAF,IAAUC,OAAtC;AACA,QAAMK,MAAM,GAAGrB,OAAO,CAAC,MAAM;AACzB,QAAIe,IAAJ,EAAU;AACN,aAAOA,IAAI,CAACO,QAAL,CAAcD,MAAd,CAAqBE,KAA5B;AACH;;AAED,WAAO,EAAP;AACH,GANqB,EAMnB,CAACR,IAAD,CANmB,CAAtB,CAtBwC,CA8BxC;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACe,UAAL,EAAiB;AACbD,MAAAA,OAAO,CAACW,IAAR,CAAa,GAAb;AACH;AACJ,GAJQ,EAIN,CAACX,OAAD,EAAUC,UAAV,CAJM,CAAT,CA/BwC,CAqCxC;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,cAAc,CAACQ,mBAAD,CAAd;AACH,GAFQ,EAEN,CAACA,mBAAD,EAAsBR,cAAtB,CAFM,CAAT;AAIA,SAAO;AACHO,IAAAA,oBADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CA9CM","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useAppContext } from '../../context/app';\nimport { useUserContext } from '../../context/user';\nimport { useTypePolicies } from '../../hooks/useTypePolicies';\n\nexport const useOrderHistoryPage = props => {\n    const { queries, types } = props;\n    const { getCustomerOrdersQuery } = queries;\n\n    useTypePolicies(types);\n\n    const [\n        ,\n        {\n            actions: { setPageLoading }\n        }\n    ] = useAppContext();\n    const history = useHistory();\n    const [{ isSignedIn }] = useUserContext();\n\n    const { data, loading } = useQuery(getCustomerOrdersQuery, {\n        fetchPolicy: 'cache-and-network',\n        skip: !isSignedIn\n    });\n\n    const isLoadingWithoutData = !data && loading;\n    const isBackgroundLoading = !!data && loading;\n    const orders = useMemo(() => {\n        if (data) {\n            return data.customer.orders.items;\n        }\n\n        return [];\n    }, [data]);\n\n    // If the user is no longer signed in, redirect to the home page.\n    useEffect(() => {\n        if (!isSignedIn) {\n            history.push('/');\n        }\n    }, [history, isSignedIn]);\n\n    // Update the page indicator if the GraphQL query is in flight.\n    useEffect(() => {\n        setPageLoading(isBackgroundLoading);\n    }, [isBackgroundLoading, setPageLoading]);\n\n    return {\n        isLoadingWithoutData,\n        orders\n    };\n};\n"]}