{"version":3,"sources":["useMyAccount.js"],"names":["useCallback","useEffect","useRef","useLocation","useAppContext","useMyAccount","props","onSignOut","closeDrawer","location","shouldCloseDrawer","handleSignOut","current","key"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAASC,aAAT,QAA8B,oCAA9B;AAEA;;;;;;;;;;AASA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,KAAtB;AAEA,QAAM,GAAG;AAAEE,IAAAA;AAAF,GAAH,IAAsBJ,aAAa,EAAzC;AACA,QAAMK,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,iBAAiB,GAAGR,MAAM,CAAC,KAAD,CAAhC;AAEA,QAAMS,aAAa,GAAGX,WAAW,CAAC,MAAM;AACpCQ,IAAAA,WAAW;AACXD,IAAAA,SAAS;AACZ,GAHgC,EAG9B,CAACC,WAAD,EAAcD,SAAd,CAH8B,CAAjC,CAPiC,CAYjC;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA,QAAIS,iBAAiB,CAACE,OAAtB,EAA+B;AAC3BJ,MAAAA,WAAW;AACd,KAFD,MAEO;AACHE,MAAAA,iBAAiB,CAACE,OAAlB,GAA4B,IAA5B;AACH;AACJ,GATQ,EASN,CAACJ,WAAD,EAAcC,QAAQ,CAACI,GAAvB,CATM,CAAT;AAWA,SAAO;AACHF,IAAAA;AADG,GAAP;AAGH,CA3BM","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\n\n/**\n * The useMyAccount talon complements the MyAccount component.\n *\n * @param {Object}      props\n * @param {Function}    props.onSignOut - a function to call when the user signs out.\n *\n * @returns {Object}    result\n * @returns {Function}  result.handleSignOut - A callback function to attach to the sign out button.\n */\nexport const useMyAccount = props => {\n    const { onSignOut } = props;\n\n    const [, { closeDrawer }] = useAppContext();\n    const location = useLocation();\n    const shouldCloseDrawer = useRef(false);\n\n    const handleSignOut = useCallback(() => {\n        closeDrawer();\n        onSignOut();\n    }, [closeDrawer, onSignOut]);\n\n    // Whenever the page changes, close the drawer.\n    useEffect(() => {\n        // The very first time MyAccount renders, this effect is fired.\n        // Don't close the drawer on that occasion, but do so every time\n        // location changes thereafter.\n        if (shouldCloseDrawer.current) {\n            closeDrawer();\n        } else {\n            shouldCloseDrawer.current = true;\n        }\n    }, [closeDrawer, location.key]);\n\n    return {\n        handleSignOut\n    };\n};\n"]}