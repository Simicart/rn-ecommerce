{"version":3,"sources":["useResetPassword.js"],"names":["useState","useMemo","useCallback","useLocation","useMutation","useResetPassword","props","mutations","hasCompleted","setHasCompleted","location","resetPassword","error","resetPasswordErrors","loading","resetPasswordMutation","searchParams","URLSearchParams","search","email","get","token","handleSubmit","newPassword","variables","err","formErrors"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,WAA5B,QAA+C,OAA/C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA;;;;;;;;;;;AAUA,OAAO,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,KAAtB;AAEA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMU,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM,CACFQ,aADE,EAEF;AAAEC,IAAAA,KAAK,EAAEC,mBAAT;AAA8BC,IAAAA;AAA9B,GAFE,IAGFV,WAAW,CAACG,SAAS,CAACQ,qBAAX,CAHf;AAKA,QAAMC,YAAY,GAAGf,OAAO,CAAC,MAAM,IAAIgB,eAAJ,CAAoBP,QAAQ,CAACQ,MAA7B,CAAP,EAA6C,CACrER,QADqE,CAA7C,CAA5B;AAGA,QAAMS,KAAK,GAAGH,YAAY,CAACI,GAAb,CAAiB,OAAjB,CAAd;AACA,QAAMC,KAAK,GAAGL,YAAY,CAACI,GAAb,CAAiB,OAAjB,CAAd;AAEA,QAAME,YAAY,GAAGpB,WAAW,CAC5B,OAAO;AAAEqB,IAAAA;AAAF,GAAP,KAA2B;AACvB,QAAI;AACA,UAAIJ,KAAK,IAAIE,KAAT,IAAkBE,WAAtB,EAAmC;AAC/B,cAAMZ,aAAa,CAAC;AAChBa,UAAAA,SAAS,EAAE;AAAEL,YAAAA,KAAF;AAASE,YAAAA,KAAT;AAAgBE,YAAAA;AAAhB;AADK,SAAD,CAAnB;AAIAd,QAAAA,eAAe,CAAC,IAAD,CAAf;AACH;AACJ,KARD,CAQE,OAAOgB,GAAP,EAAY;AACVhB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH;AACJ,GAb2B,EAc5B,CAACE,aAAD,EAAgBQ,KAAhB,EAAuBE,KAAvB,CAd4B,CAAhC;AAiBA,SAAO;AACHF,IAAAA,KADG;AAEHO,IAAAA,UAAU,EAAE,CAACb,mBAAD,CAFT;AAGHS,IAAAA,YAHG;AAIHd,IAAAA,YAJG;AAKHM,IAAAA,OALG;AAMHO,IAAAA;AANG,GAAP;AAQH,CAzCM;AA2CP;;AAEA;;;;;;;;;;;;AAYA","sourcesContent":["import { useState, useMemo, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\n/**\n * Returns props necessary to render a ResetPassword form.\n *\n * @param {function} props.mutations - mutation to call when the user submits the new password.\n *\n * @returns {ResetPasswordProps} - GraphQL mutations for the reset password form.\n *\n * @example <caption>Importing into your project</caption>\n * import { useResetPassword } from '@magento/peregrine/lib/talons/MyAccount/useResetPassword.js';\n */\nexport const useResetPassword = props => {\n    const { mutations } = props;\n\n    const [hasCompleted, setHasCompleted] = useState(false);\n    const location = useLocation();\n    const [\n        resetPassword,\n        { error: resetPasswordErrors, loading }\n    ] = useMutation(mutations.resetPasswordMutation);\n\n    const searchParams = useMemo(() => new URLSearchParams(location.search), [\n        location\n    ]);\n    const email = searchParams.get('email');\n    const token = searchParams.get('token');\n\n    const handleSubmit = useCallback(\n        async ({ newPassword }) => {\n            try {\n                if (email && token && newPassword) {\n                    await resetPassword({\n                        variables: { email, token, newPassword }\n                    });\n\n                    setHasCompleted(true);\n                }\n            } catch (err) {\n                setHasCompleted(false);\n            }\n        },\n        [resetPassword, email, token]\n    );\n\n    return {\n        email,\n        formErrors: [resetPasswordErrors],\n        handleSubmit,\n        hasCompleted,\n        loading,\n        token\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL mutations for the reset password form.\n * This is a type used by the {@link useResetPassword} talon.\n *\n * @typedef {Object} ResetPasswordMutations\n *\n * @property {GraphQLAST} resetPasswordMutation mutation for resetting password\n *\n * @see [resetPassword.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/MyAccount/ResetPassword/resetPassword.gql.js}\n * for the query used in Venia\n */\n\n/**\n * Object type returned by the {@link useResetPassword} talon.\n * It provides props data to use when rendering the reset password form component.\n *\n * @typedef {Object} ResetPasswordProps\n *\n * @property {String} email email address of the user whose password is beeing reset\n * @property {Array} formErrors A list of form errors\n * @property {Function} handleSubmit Callback function to handle form submission\n * @property {Boolean} hasCompleted True if password reset mutation has completed. False otherwise\n * @property {Boolean} loading True if password reset mutation is in progress. False otherwise\n * @property {String} token token needed for password reset, will be sent in the mutation\n */\n"]}