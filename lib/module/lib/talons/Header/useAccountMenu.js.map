{"version":3,"sources":["useAccountMenu.js"],"names":["useState","useCallback","useEffect","useHistory","useLocation","useApolloClient","useMutation","useUserContext","clearCartDataFromCache","clearCustomerDataFromCache","useAccountMenu","props","mutations","accountMenuIsOpen","setAccountMenuIsOpen","signOut","signOutMutation","view","setView","username","setUsername","apolloClient","history","location","revokeToken","isSignedIn","isUserSignedIn","handleSignOut","go","handleForgotPassword","handleCancel","handleCreateAccount","handleAccountCreation","updateUsername"],"mappings":"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","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useApolloClient, useMutation } from '@apollo/client';\n\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\nimport { clearCartDataFromCache } from '@magento/peregrine/lib/Apollo/clearCartDataFromCache';\nimport { clearCustomerDataFromCache } from '@magento/peregrine/lib/Apollo/clearCustomerDataFromCache';\n\n/**\n * The useAccountMenu talon complements the AccountMenu component.\n *\n * @param {Object} props\n * @param {DocumentNode} props.mutations.signOutMutation - Mutation to be called for signout.\n * @param {Boolean} props.accountMenuIsOpen - Boolean to notify if the account menu dropdown is open.\n * @param {Function} props.setAccountMenuIsOpen - Function to set the value of accountMenuIsOpen\n *\n * @returns {Object}    talonProps\n * @returns {String}    talonProps.view - Current view.\n * @returns {String}  talonProps.username - Username of the current user trying to login / logged in.\n * @returns {Boolean}   talonProps.isUserSignedIn - Boolean to notify if the user is signed in.\n * @returns {Function}  talonProps.handleSignOut - Function to handle the signout workflow.\n * @returns {Function}  talonProps.handleForgotPassword - Function to handle forgot password workflow.\n * @returns {Function}  talonProps.handleCreateAccount - Function to handle create account workflow.\n * @returns {Function}  talonProps.setUsername - Function to set the username.\n */\n\nexport const useAccountMenu = props => {\n    const { mutations, accountMenuIsOpen, setAccountMenuIsOpen } = props;\n    const { signOut: signOutMutation } = mutations;\n\n    const [view, setView] = useState('SIGNIN');\n    const [username, setUsername] = useState('');\n\n    const apolloClient = useApolloClient();\n    const history = useHistory();\n    const location = useLocation();\n    const [revokeToken] = useMutation(signOutMutation);\n    const [{ isSignedIn: isUserSignedIn }, { signOut }] = useUserContext();\n\n    const handleSignOut = useCallback(async () => {\n        setView('SIGNIN');\n        setAccountMenuIsOpen(false);\n\n        // Delete cart/user data from the redux store.\n        await signOut({ revokeToken });\n        await clearCartDataFromCache(apolloClient);\n        await clearCustomerDataFromCache(apolloClient);\n\n        // Refresh the page as a way to say \"re-initialize\". An alternative\n        // would be to call apolloClient.resetStore() but that would require\n        // a large refactor.\n        history.go(0);\n    }, [apolloClient, history, revokeToken, setAccountMenuIsOpen, signOut]);\n\n    const handleForgotPassword = useCallback(() => {\n        setView('FORGOT_PASSWORD');\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        setView('SIGNIN');\n    }, []);\n\n    const handleCreateAccount = useCallback(() => {\n        setView('CREATE_ACCOUNT');\n    }, []);\n\n    const handleAccountCreation = useCallback(() => {\n        setView('ACCOUNT');\n    }, []);\n\n    // Close the Account Menu on page change.\n    // This includes even when the page \"changes\" to the current page.\n    // This can happen when clicking on a link to a page you're already on, for example.\n    useEffect(() => {\n        setAccountMenuIsOpen(false);\n    }, [location, setAccountMenuIsOpen]);\n\n    // Update view based on user status everytime accountMenuIsOpen has changed.\n    useEffect(() => {\n        if (isUserSignedIn) {\n            setView('ACCOUNT');\n        } else {\n            setView('SIGNIN');\n        }\n    }, [accountMenuIsOpen, isUserSignedIn]);\n\n    return {\n        handleAccountCreation,\n        handleCreateAccount,\n        handleForgotPassword,\n        handleCancel,\n        handleSignOut,\n        updateUsername: setUsername,\n        username,\n        view\n    };\n};\n"]}