{"version":3,"sources":["useImage.js"],"names":["useCallback","useMemo","useState","UNCONSTRAINED_SIZE_KEY","useImage","props","onError","onLoad","width","widths","height","ratio","isLoaded","setIsLoaded","hasError","setHasError","handleImageLoad","handleError","resourceWidth","undefined","get","resourceHeight"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,sBAAsB,GAAG,SAA/B;AAEP;;;;;;;;;;;AAUA,OAAO,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAC7B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA,MAAlC;AAA0CC,IAAAA;AAA1C,MAAoDN,KAA1D;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMc,eAAe,GAAGhB,WAAW,CAAC,MAAM;AACtCa,IAAAA,WAAW,CAAC,IAAD,CAAX;;AAEA,QAAI,OAAON,MAAP,KAAkB,UAAtB,EAAkC;AAC9BA,MAAAA,MAAM;AACT;AACJ,GANkC,EAMhC,CAACA,MAAD,CANgC,CAAnC;AAQA,QAAMU,WAAW,GAAGjB,WAAW,CAAC,MAAM;AAClCe,IAAAA,WAAW,CAAC,IAAD,CAAX;;AAEA,QAAI,OAAOT,OAAP,KAAmB,UAAvB,EAAmC;AAC/BA,MAAAA,OAAO;AACV;AACJ,GAN8B,EAM5B,CAACA,OAAD,CAN4B,CAA/B,CAb6B,CAqB7B;;AACA,QAAMY,aAAa,GAAGjB,OAAO,CAAC,MAAM;AAChC,QAAIO,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH,KAH+B,CAKhC;AACA;;;AACA,QAAI,CAACC,MAAL,EAAa;AACT,aAAOU,SAAP;AACH;;AAED,WAAOV,MAAM,CAACW,GAAP,CAAWjB,sBAAX,CAAP;AACH,GAZ4B,EAY1B,CAACK,KAAD,EAAQC,MAAR,CAZ0B,CAA7B;AAcA,QAAMY,cAAc,GAAGpB,OAAO,CAAC,MAAM;AACjC,QAAIS,MAAJ,EAAY;AACR,aAAOA,MAAP;AACH,KAFD,MAEO,IAAIQ,aAAa,IAAIP,KAArB,EAA4B;AAC/B,aAAOO,aAAa,GAAGP,KAAvB;AACH,KAFM,MAEA;AACH,aAAOQ,SAAP;AACH;AACJ,GAR6B,EAQ3B,CAACT,MAAD,EAASC,KAAT,EAAgBO,aAAhB,CAR2B,CAA9B;AAUA,SAAO;AACHD,IAAAA,WADG;AAEHD,IAAAA,eAFG;AAGHF,IAAAA,QAHG;AAIHF,IAAAA,QAJG;AAKHM,IAAAA,aALG;AAMHG,IAAAA;AANG,GAAP;AAQH,CAtDM","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nexport const UNCONSTRAINED_SIZE_KEY = 'default';\n\n/**\n * Returns props to render an Image component.\n *\n * @param {function} props.onError callback for error of loading image\n * @param {function} props.onLoad callback for load of image\n * @param {number}   props.width the intrinsic width of the image & the width to request for the fallback image for browsers that don't support srcset / sizes.\n * @param {number}   props.height the intrinsic height of the image & the height to request for the fallback image for browsers that don't support srcset / sizes.\n * @param {number}   props.ratio is the image width to height ratio. Defaults to `DEFAULT_WIDTH_TO_HEIGHT_RATIO` from `util/images.js`.\n * @param {Map}      props.widths a map of breakpoints to possible widths used to create the img's sizes attribute.\n */\nexport const useImage = props => {\n    const { onError, onLoad, width, widths, height, ratio } = props;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [hasError, setHasError] = useState(false);\n\n    const handleImageLoad = useCallback(() => {\n        setIsLoaded(true);\n\n        if (typeof onLoad === 'function') {\n            onLoad();\n        }\n    }, [onLoad]);\n\n    const handleError = useCallback(() => {\n        setHasError(true);\n\n        if (typeof onError === 'function') {\n            onError();\n        }\n    }, [onError]);\n\n    // Use the unconstrained / default entry in widths.\n    const resourceWidth = useMemo(() => {\n        if (width) {\n            return width;\n        }\n\n        // We don't have an explicit width.\n        // Attempt to use the unconstrained entry in widths.\n        if (!widths) {\n            return undefined;\n        }\n\n        return widths.get(UNCONSTRAINED_SIZE_KEY);\n    }, [width, widths]);\n\n    const resourceHeight = useMemo(() => {\n        if (height) {\n            return height;\n        } else if (resourceWidth && ratio) {\n            return resourceWidth / ratio;\n        } else {\n            return undefined;\n        }\n    }, [height, ratio, resourceWidth]);\n\n    return {\n        handleError,\n        handleImageLoad,\n        hasError,\n        isLoaded,\n        resourceWidth,\n        resourceHeight\n    };\n};\n"]}