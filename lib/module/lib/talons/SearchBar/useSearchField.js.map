{"version":3,"sources":["useSearchField.js"],"names":["useCallback","useEffect","useRef","useFieldState","useFormApi","getSearchParam","useSearchField","props","isSearchOpen","inputRef","value","formApi","resetForm","reset","current","focus","urlTerm","location","setValue"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,UAA1C;AAEA,SAASC,cAAT,QAA+B,6CAA/B;AAEA;;;;AAGA,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAI;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAmBD,KAAzB;AAEA,QAAME,QAAQ,GAAGP,MAAM,EAAvB;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAYP,aAAa,CAAC,cAAD,CAA/B;AACA,QAAMQ,OAAO,GAAGP,UAAU,EAA1B;AAEA,QAAMQ,SAAS,GAAGZ,WAAW,CAAC,MAAM;AAChCW,IAAAA,OAAO,CAACE,KAAR;AACH,GAF4B,EAE1B,CAACF,OAAD,CAF0B,CAA7B,CAPmC,CAWnC;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,YAAY,IAAIC,QAAQ,CAACK,OAA7B,EAAsC;AAClCL,MAAAA,QAAQ,CAACK,OAAT,CAAiBC,KAAjB;AACH;AACJ,GAJQ,EAIN,CAACP,YAAD,CAJM,CAAT,CAZmC,CAkBnC;AACA;;AACA;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,OAAO,GAAGX,cAAc,CAAC,OAAD,EAAUY,QAAV,CAA9B;;AAEA,QAAI,CAACN,OAAD,IAAY,CAACK,OAAjB,EAA0B;AACtB;AACH;;AAEDL,IAAAA,OAAO,CAACO,QAAR,CAAiB,cAAjB,EAAiCF,OAAjC;AACH,GARQ,EAQN,EARM,CAAT;AASA;;AAEA,SAAO;AACHP,IAAAA,QADG;AAEHG,IAAAA,SAFG;AAGHF,IAAAA;AAHG,GAAP;AAKH,CArCM","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useFieldState, useFormApi } from 'informed';\n\nimport { getSearchParam } from '@magento/peregrine/lib/hooks/useSearchParam';\n\n/**\n * Returns props necessary to render a SearchField component.\n */\nexport const useSearchField = props => {\n    const { isSearchOpen } = props;\n\n    const inputRef = useRef();\n    const { value } = useFieldState('search_query');\n    const formApi = useFormApi();\n\n    const resetForm = useCallback(() => {\n        formApi.reset();\n    }, [formApi]);\n\n    // When the search field is opened focus on the input.\n    useEffect(() => {\n        if (isSearchOpen && inputRef.current) {\n            inputRef.current.focus();\n        }\n    }, [isSearchOpen]);\n\n    // Pre-populate the search field with the search term from the URL.\n    // We purposefully only ever run this effect on initial mount.\n    /* eslint-disable react-hooks/exhaustive-deps */\n    useEffect(() => {\n        const urlTerm = getSearchParam('query', location);\n\n        if (!formApi || !urlTerm) {\n            return;\n        }\n\n        formApi.setValue('search_query', urlTerm);\n    }, []);\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return {\n        inputRef,\n        resetForm,\n        value\n    };\n};\n"]}