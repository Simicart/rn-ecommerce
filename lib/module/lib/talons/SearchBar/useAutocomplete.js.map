{"version":3,"sources":["useAutocomplete.js"],"names":["useEffect","useMemo","useFieldState","useLazyQuery","debounce","useAutocomplete","props","queries","getAutocompleteResults","valid","visible","runSearch","productResult","value","debouncedRunQuery","inputText","variables","data","error","loading","products","filters","aggregations","hasResult","items","resultCount","total_count","displayResult","messageType"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA;;;;AAIA;;;;;;;;AAOA,OAAO,MAAMC,eAAe,GAAGC,KAAK,IAAI;AACpC,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF,KADP;AAEFC,IAAAA,KAFE;AAGFC,IAAAA;AAHE,MAIFJ,KAJJ,CADoC,CAOpC;;AACA,QAAM,CAACK,SAAD,EAAYC,aAAZ,IAA6BT,YAAY,CAACK,sBAAD,CAA/C,CARoC,CAUpC;;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAYX,aAAa,CAAC,cAAD,CAA/B,CAXoC,CAapC;AACA;;AACA,QAAMY,iBAAiB,GAAGb,OAAO,CAC7B,MACIG,QAAQ,CAACW,SAAS,IAAI;AAClBJ,IAAAA,SAAS,CAAC;AAAEK,MAAAA,SAAS,EAAE;AAAED,QAAAA;AAAF;AAAb,KAAD,CAAT;AACH,GAFO,EAEL,GAFK,CAFiB,EAK7B,CAACJ,SAAD,CAL6B,CAAjC,CAfoC,CAuBpC;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,KAAK,IAAIC,OAAb,EAAsB;AAClBI,MAAAA,iBAAiB,CAACD,KAAD,CAAjB;AACH;AACJ,GAJQ,EAIN,CAACC,iBAAD,EAAoBL,KAApB,EAA2BI,KAA3B,EAAkCH,OAAlC,CAJM,CAAT;AAMA,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BP,aAAjC,CA9BoC,CAgCpC;;AACA,QAAMQ,QAAQ,GAAGH,IAAI,IAAIA,IAAI,CAACG,QAA9B;AACA,QAAMC,OAAO,GAAGJ,IAAI,IAAIA,IAAI,CAACG,QAAL,CAAcE,YAAtC;AACA,QAAMC,SAAS,GAAGH,QAAQ,IAAIA,QAAQ,CAACI,KAAvC;AACA,QAAMC,WAAW,GAAGL,QAAQ,IAAIA,QAAQ,CAACM,WAAzC;AACA,QAAMC,aAAa,GAAGlB,KAAK,IAAIc,SAA/B;AACA,MAAIK,WAAW,GAAG,EAAlB;;AAEA,MAAIV,KAAJ,EAAW;AACPU,IAAAA,WAAW,GAAG,OAAd;AACH,GAFD,MAEO,IAAIT,OAAJ,EAAa;AAChBS,IAAAA,WAAW,GAAG,SAAd;AACH,GAFM,MAEA,IAAI,CAACD,aAAL,EAAoB;AACvBC,IAAAA,WAAW,GAAG,QAAd;AACH,GAFM,MAEA,IAAI,CAACH,WAAL,EAAkB;AACrBG,IAAAA,WAAW,GAAG,cAAd;AACH,GAFM,MAEA;AACHA,IAAAA,WAAW,GAAG,gBAAd;AACH;;AAED,SAAO;AACHD,IAAAA,aADG;AAEHN,IAAAA,OAFG;AAGHO,IAAAA,WAHG;AAIHR,IAAAA,QAJG;AAKHK,IAAAA,WALG;AAMHZ,IAAAA;AANG,GAAP;AAQH,CA5DM","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useFieldState } from 'informed';\nimport { useLazyQuery } from '@apollo/client';\nimport debounce from 'lodash.debounce';\n\n/**\n * @typedef { import(\"graphql\").DocumentNode } DocumentNode\n */\n\n/**\n * Returns props necessary to render an Autocomplete component.\n * @param {Object} props\n * @param {DocumentNode} props.query - GraphQL query\n * @param {Boolean} props.valid - whether to run the query\n * @param {Boolean} props.visible - whether to show the element\n */\nexport const useAutocomplete = props => {\n    const {\n        queries: { getAutocompleteResults },\n        valid,\n        visible\n    } = props;\n\n    // Prepare to run the queries.\n    const [runSearch, productResult] = useLazyQuery(getAutocompleteResults);\n\n    // Get the search term from the field.\n    const { value } = useFieldState('search_query');\n\n    // Create a debounced function so we only search some delay after the last\n    // keypress.\n    const debouncedRunQuery = useMemo(\n        () =>\n            debounce(inputText => {\n                runSearch({ variables: { inputText } });\n            }, 500),\n        [runSearch]\n    );\n\n    // run the query once on mount, and again whenever state changes\n    useEffect(() => {\n        if (valid && visible) {\n            debouncedRunQuery(value);\n        }\n    }, [debouncedRunQuery, valid, value, visible]);\n\n    const { data, error, loading } = productResult;\n\n    // Handle results.\n    const products = data && data.products;\n    const filters = data && data.products.aggregations;\n    const hasResult = products && products.items;\n    const resultCount = products && products.total_count;\n    const displayResult = valid && hasResult;\n    let messageType = '';\n\n    if (error) {\n        messageType = 'ERROR';\n    } else if (loading) {\n        messageType = 'LOADING';\n    } else if (!displayResult) {\n        messageType = 'PROMPT';\n    } else if (!resultCount) {\n        messageType = 'EMPTY_RESULT';\n    } else {\n        messageType = 'RESULT_SUMMARY';\n    }\n\n    return {\n        displayResult,\n        filters,\n        messageType,\n        products,\n        resultCount,\n        value\n    };\n};\n"]}