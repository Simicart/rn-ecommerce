{"version":3,"sources":["useQuantity.js"],"names":["useCallback","useMemo","useState","useEffect","useFieldState","useFieldApi","debounce","useQuantity","props","initialValue","min","onChange","prevQuantity","setPrevQuantity","quantityFieldApi","value","quantity","isIncrementDisabled","isDecrementDisabled","debouncedOnChange","val","handleDecrement","newQuantity","setValue","handleIncrement","handleBlur","maskInput","nextVal","parseFloat","err","console","error"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState, useEffect } from 'react';\nimport { useFieldState, useFieldApi } from 'informed';\nimport debounce from 'lodash.debounce';\n\n/**\n * This talon contains logic for a product quantity UI component.\n * It performs effects and returns prop data for rendering a component that lets you\n * modify the quantity of a cart item.\n *\n * This talon performs the following effects:\n *\n * - Updates the state of the quantity field when the initial value changes\n *\n * @function\n *\n * @param {Object} props\n * @param {number} props.initialValue the initial quantity value\n * @param {number} props.min the minimum allowed quantity value\n * @param {function} props.onChange change handler to invoke when quantity value changes\n *\n * @returns {QuantityTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useQuantity } from '@magento/peregrine/lib/talons/CartPage/ProductListing/useQuantity';\n */\nexport const useQuantity = props => {\n    const { initialValue, min, onChange } = props;\n\n    const [prevQuantity, setPrevQuantity] = useState(initialValue);\n\n    const quantityFieldApi = useFieldApi('quantity');\n    const { value: quantity } = useFieldState('quantity');\n\n    const isIncrementDisabled = useMemo(() => !quantity, [quantity]);\n\n    // \"min: 0\" lets a user delete the value and enter a new one, but \"1\" is\n    // actually the minimum value we allow to be set through decrement button.\n    const isDecrementDisabled = useMemo(() => !quantity || quantity <= 1, [\n        quantity\n    ]);\n\n    // Fire the onChange after some wait time. We calculate the current delay\n    // as enough time for a user to spam inc/dec quantity but not enough time\n    // for a user to click inc/dec on Product A and then click Product B.\n    const debouncedOnChange = useMemo(\n        () =>\n            debounce(val => {\n                setPrevQuantity(val);\n                onChange(val);\n            }, 350),\n        [onChange]\n    );\n\n    const handleDecrement = useCallback(() => {\n        const newQuantity = quantity - 1;\n        quantityFieldApi.setValue(newQuantity);\n        debouncedOnChange(newQuantity);\n    }, [debouncedOnChange, quantity, quantityFieldApi]);\n\n    const handleIncrement = useCallback(() => {\n        const newQuantity = quantity + 1;\n        quantityFieldApi.setValue(newQuantity);\n        debouncedOnChange(newQuantity);\n    }, [debouncedOnChange, quantity, quantityFieldApi]);\n\n    const handleBlur = useCallback(() => {\n        // Only submit the value change if it has changed.\n        if (typeof quantity === 'number' && quantity != prevQuantity) {\n            debouncedOnChange(quantity);\n        }\n    }, [debouncedOnChange, prevQuantity, quantity]);\n\n    const maskInput = useCallback(\n        value => {\n            try {\n                // For some storefronts decimal values are allowed.\n                const nextVal = parseFloat(value);\n                if (nextVal < min) return min;\n                else return nextVal;\n            } catch (err) {\n                console.error(err);\n                return prevQuantity;\n            }\n        },\n        [min, prevQuantity]\n    );\n\n    /**\n     * Everytime initialValue changes, update the quantity field state.\n     */\n    useEffect(() => {\n        quantityFieldApi.setValue(initialValue);\n    }, [initialValue, quantityFieldApi]);\n\n    return {\n        isDecrementDisabled,\n        isIncrementDisabled,\n        handleBlur,\n        handleDecrement,\n        handleIncrement,\n        maskInput\n    };\n};\n\n/** JSDoc type definitions */\n\n/**\n * Object type returned by the {@link useQuantity} talon.\n * It provides props data for a quantity UI component.\n *\n * @typedef {Object} QuantityTalonProps\n *\n * @property {boolean} isDecrementDisabled True if decrementing should be disabled\n * @property {boolean} isIncrementDisabled True if incrementing should be disabled\n * @property {function} handleBlur Callback function for handling a blur event on a component\n * @property {function} handleDecrement Callback function for handling a quantity decrement event\n * @property {function} handleIncrement Callback function for handling an increment event\n * @property {function} maskInput Function for masking a value when decimal values are allowed\n */\n"]}