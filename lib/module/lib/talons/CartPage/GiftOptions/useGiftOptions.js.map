{"version":3,"sources":["useGiftOptions.js"],"names":["useState","useCallback","useEffect","useMemo","throttle","useApolloClient","useQuery","useCartContext","useGiftOptions","props","queries","getGiftOptionsQuery","includeGiftReceipt","setIncludeGiftReceipt","includePrintedCard","setIncludePrintedCard","giftMessage","setGiftMessage","apolloClient","cartId","data","skip","variables","updateGiftOptions","optionsToUpdate","cache","writeQuery","query","cart_id","cart","__typename","id","include_gift_receipt","include_printed_card","gift_message","throttledMessageUpdate","newGiftMessage","leading","updateGiftMessage","e","target","value","toggleIncludeGiftReceiptFlag","toggleIncludePrintedCardFlag"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,EAA2CC,OAA3C,QAA0D,OAA1D;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,gBAA1C;AAEA,SAASC,cAAT,QAA+B,qCAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC5B,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFF,KAFJ;AAGA;;;;;AAIA,QAAM,CAACG,kBAAD,EAAqBC,qBAArB,IAA8Cb,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACc,kBAAD,EAAqBC,qBAArB,IAA8Cf,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMkB,YAAY,GAAGb,eAAe,EAApC;AAEA,QAAM,CAAC;AAAEc,IAAAA;AAAF,GAAD,IAAeZ,cAAc,EAAnC;AAEA,QAAM;AAAEa,IAAAA;AAAF,MAAWd,QAAQ,CAACK,mBAAD,EAAsB;AAC3CU,IAAAA,IAAI,EAAE,CAACF,MADoC;AAE3CG,IAAAA,SAAS,EAAE;AAAEH,MAAAA;AAAF;AAFgC,GAAtB,CAAzB;AAKA,QAAMI,iBAAiB,GAAGtB,WAAW,CACjCuB,eAAe,IAAI;AACfN,IAAAA,YAAY,CAACO,KAAb,CAAmBC,UAAnB,CAA8B;AAC1BC,MAAAA,KAAK,EAAEhB,mBADmB;AAE1BW,MAAAA,SAAS,EAAE;AACPM,QAAAA,OAAO,EAAET;AADF,OAFe;AAK1BC,MAAAA,IAAI,EAAE;AACFS,QAAAA,IAAI,EAAE;AACFC,UAAAA,UAAU,EAAE,MADV;AAEFC,UAAAA,EAAE,EAAEZ,MAFF;AAGFa,UAAAA,oBAAoB,EAAEpB,kBAHpB;AAIFqB,UAAAA,oBAAoB,EAAEnB,kBAJpB;AAKFoB,UAAAA,YAAY,EAAElB,WALZ;AAMF,aAAGQ;AAND;AADJ;AALoB,KAA9B;AAgBH,GAlBgC,EAmBjC,CACIN,YAAY,CAACO,KADjB,EAEIN,MAFJ,EAGIR,mBAHJ,EAIIK,WAJJ,EAKIJ,kBALJ,EAMIE,kBANJ,CAnBiC,CAArC;AA6BA;;;;;;;;;AAQA,QAAMqB,sBAAsB,GAAGhC,OAAO,CAAC,MAAM;AACzC,WAAOC,QAAQ,CACX,CAACmB,iBAAD,EAAoBa,cAApB,KAAuC;AACnCb,MAAAA,iBAAiB,CAAC;AACdW,QAAAA,YAAY,EAAEE;AADA,OAAD,CAAjB;AAGH,KALU,EAMX,IANW,EAOX;AACIC,MAAAA,OAAO,EAAE;AADb,KAPW,CAAf;AAWH,GAZqC,EAYnC,EAZmC,CAAtC;AAcA,QAAMC,iBAAiB,GAAGrC,WAAW,CACjCsC,CAAC,IAAI;AACD,UAAMH,cAAc,GAAGG,CAAC,CAACC,MAAF,CAASC,KAAhC;AACAxB,IAAAA,cAAc,CAACmB,cAAD,CAAd;AACAD,IAAAA,sBAAsB,CAACZ,iBAAD,EAAoBa,cAApB,CAAtB;AACH,GALgC,EAMjC,CAACnB,cAAD,EAAiBkB,sBAAjB,EAAyCZ,iBAAzC,CANiC,CAArC;AASA,QAAMmB,4BAA4B,GAAGzC,WAAW,CAAC,MAAM;AACnDY,IAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACAW,IAAAA,iBAAiB,CAAC;AACdS,MAAAA,oBAAoB,EAAE,CAACpB;AADT,KAAD,CAAjB;AAGH,GAL+C,EAK7C,CAACW,iBAAD,EAAoBX,kBAApB,EAAwCC,qBAAxC,CAL6C,CAAhD;AAOA,QAAM8B,4BAA4B,GAAG1C,WAAW,CAAC,MAAM;AACnDc,IAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACAS,IAAAA,iBAAiB,CAAC;AACdU,MAAAA,oBAAoB,EAAE,CAACnB;AADT,KAAD,CAAjB;AAGH,GAL+C,EAK7C,CAACS,iBAAD,EAAoBT,kBAApB,EAAwCC,qBAAxC,CAL6C,CAAhD;AAOA;;;;;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,IAAJ,EAAU;AACN,YAAM;AACFY,QAAAA,oBADE;AAEFC,QAAAA,oBAFE;AAGFC,QAAAA;AAHE,UAIFd,IAAI,CAACS,IAJT;AAMAhB,MAAAA,qBAAqB,CAACmB,oBAAD,CAArB;AACAjB,MAAAA,qBAAqB,CAACkB,oBAAD,CAArB;AACAhB,MAAAA,cAAc,CAACiB,YAAD,CAAd;AACH;AACJ,GAZQ,EAYN,CAACrB,qBAAD,EAAwBE,qBAAxB,EAA+CK,IAA/C,CAZM,CAAT;AAcA,SAAO;AACHR,IAAAA,kBADG;AAEHE,IAAAA,kBAFG;AAGHE,IAAAA,WAHG;AAIH0B,IAAAA,4BAJG;AAKHC,IAAAA,4BALG;AAMHL,IAAAA;AANG,GAAP;AAQH,CAxHD;;AA0HA,eAAe9B,cAAf;AAEA;;AAEA;;;;;;;;;;;AAWA;;;;;;;;;;;AAWA","sourcesContent":["import { useState, useCallback, useEffect, useMemo } from 'react';\nimport throttle from 'lodash.throttle';\nimport { useApolloClient, useQuery } from '@apollo/client';\n\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\n\n/**\n * This talon contains the logic for a gift options component.\n * It performs effects and returns a data object containing values for rendering the component.\n *\n * This talon performs the following effects:\n *\n * - Fetch the gift options associated with the cart\n * - Update the {@link GiftOptionsTalonProps} values with the data returned by the query\n *\n * @function\n *\n * @param {Object} props\n * @param {GiftOptionsMutations} props.mutations GraphQL mutations for Gift Options\n * @param {GiftOptionsQueries} props.queries GraphQL queries for Gift Options\n *\n * @returns {GiftOptionsTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useGiftOptions } from '@magento/peregrine/lib/talons/CartPage/GiftOptions/useGiftOptions';\n */\nconst useGiftOptions = props => {\n    const {\n        queries: { getGiftOptionsQuery }\n    } = props;\n    /**\n     * Using local state instead of awaiting data from mutation to avoid\n     * weird UX issues generated due to network latency.\n     */\n    const [includeGiftReceipt, setIncludeGiftReceipt] = useState(false);\n    const [includePrintedCard, setIncludePrintedCard] = useState(false);\n    const [giftMessage, setGiftMessage] = useState('');\n    const apolloClient = useApolloClient();\n\n    const [{ cartId }] = useCartContext();\n\n    const { data } = useQuery(getGiftOptionsQuery, {\n        skip: !cartId,\n        variables: { cartId }\n    });\n\n    const updateGiftOptions = useCallback(\n        optionsToUpdate => {\n            apolloClient.cache.writeQuery({\n                query: getGiftOptionsQuery,\n                variables: {\n                    cart_id: cartId\n                },\n                data: {\n                    cart: {\n                        __typename: 'Cart',\n                        id: cartId,\n                        include_gift_receipt: includeGiftReceipt,\n                        include_printed_card: includePrintedCard,\n                        gift_message: giftMessage,\n                        ...optionsToUpdate\n                    }\n                }\n            });\n        },\n        [\n            apolloClient.cache,\n            cartId,\n            getGiftOptionsQuery,\n            giftMessage,\n            includeGiftReceipt,\n            includePrintedCard\n        ]\n    );\n\n    /**\n     * @ignore\n     *\n     * Throttling message update. Only make 1 mutation\n     * every 1 second. This is to save on bandwidth.\n     *\n     * More info: https://lodash.com/docs/4.17.15#throttle\n     */\n    const throttledMessageUpdate = useMemo(() => {\n        return throttle(\n            (updateGiftOptions, newGiftMessage) => {\n                updateGiftOptions({\n                    gift_message: newGiftMessage\n                });\n            },\n            1000,\n            {\n                leading: false\n            }\n        );\n    }, []);\n\n    const updateGiftMessage = useCallback(\n        e => {\n            const newGiftMessage = e.target.value;\n            setGiftMessage(newGiftMessage);\n            throttledMessageUpdate(updateGiftOptions, newGiftMessage);\n        },\n        [setGiftMessage, throttledMessageUpdate, updateGiftOptions]\n    );\n\n    const toggleIncludeGiftReceiptFlag = useCallback(() => {\n        setIncludeGiftReceipt(!includeGiftReceipt);\n        updateGiftOptions({\n            include_gift_receipt: !includeGiftReceipt\n        });\n    }, [updateGiftOptions, includeGiftReceipt, setIncludeGiftReceipt]);\n\n    const toggleIncludePrintedCardFlag = useCallback(() => {\n        setIncludePrintedCard(!includePrintedCard);\n        updateGiftOptions({\n            include_printed_card: !includePrintedCard\n        });\n    }, [updateGiftOptions, includePrintedCard, setIncludePrintedCard]);\n\n    /**\n     * Once data is available from the query request, update\n     * the respective values.\n     */\n    useEffect(() => {\n        if (data) {\n            const {\n                include_gift_receipt,\n                include_printed_card,\n                gift_message\n            } = data.cart;\n\n            setIncludeGiftReceipt(include_gift_receipt);\n            setIncludePrintedCard(include_printed_card);\n            setGiftMessage(gift_message);\n        }\n    }, [setIncludeGiftReceipt, setIncludePrintedCard, data]);\n\n    return {\n        includeGiftReceipt,\n        includePrintedCard,\n        giftMessage,\n        toggleIncludeGiftReceiptFlag,\n        toggleIncludePrintedCardFlag,\n        updateGiftMessage\n    };\n};\n\nexport default useGiftOptions;\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL mutations for Gift Options\n *\n * @typedef {Object} GiftOptionsMutations\n *\n * @property {GraphQLAST} setGiftOptionsMutation Mutation to use for setting the gift options for the cart\n *\n * @see [giftOptions.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/GiftOptions/giftOptions.gql.js}\n * for the query Venia uses.\n */\n\n/**\n * GraphQL query for Gift Options\n *\n * @typedef {Object} GiftOptionsQueries\n *\n * @property {GraphQLAST} getGiftOptionsQuery Query to get gift options data\n *\n * @see [giftOptions.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/GiftOptions/giftOptions.gql.js}\n * for the query Venia uses.\n */\n\n/**\n * Props data to use when rendering a gift options component.\n *\n * @typedef {Object} GiftOptionsTalonProps\n *\n * @property {boolean} includeGiftReceipt True if a gift receipt should be included. False otherwise.\n * @property {boolean} includePrintedCard True if a printed card should be included. False otherwise.\n * @property {String} giftMessage Message to include with a gift.\n * @property {function} toggleIncludeGiftReceiptFlag Toggles the value of the `includeGiftReceipt` value.\n * @property {function} toggleIncludePrintedCardFlag Toggles the value of the `includePrintedCard` value.\n * @property {function} updateGiftMessage Updates the gift message value.\n *\n */\n"]}