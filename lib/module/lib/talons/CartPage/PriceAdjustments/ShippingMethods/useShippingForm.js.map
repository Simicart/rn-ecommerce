{"version":3,"sources":["useShippingForm.js"],"names":["useCallback","useEffect","useMemo","useApolloClient","useMutation","useCartContext","MOCKED_ADDRESS","city","firstname","lastname","street","telephone","useShippingForm","props","selectedValues","setIsCartUpdating","mutations","setShippingAddressMutation","queries","shippingMethodsQuery","cartId","apolloClient","setShippingAddress","called","isSetShippingAddressCalled","error","errorSettingShippingAddress","loading","isSetShippingLoading","handleZipChange","zip","data","readQuery","query","variables","cart","shipping_addresses","shippingAddresses","length","primaryAddress","available_shipping_methods","availableMethods","writeQuery","handleOnSubmit","formValues","country","region","address","country_code","postcode","errors","Map"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo } from 'react';\nimport { useApolloClient, useMutation } from '@apollo/client';\n\nimport { useCartContext } from '../../../../context/cart';\n\n/**\n * GraphQL currently requires a complete address before it will return\n * estimated shipping prices, even though it only needs Country, State,\n * and Zip. Assuming this is a bug or oversight, we're going to mock the\n * data points we don't want to bother collecting from the Customer at this\n * step in the process. We need to be very mindful that these values are never\n * displayed to the user.\n *\n * @ignore\n */\nexport const MOCKED_ADDRESS = {\n    city: 'city',\n    firstname: 'firstname',\n    lastname: 'lastname',\n    street: ['street'],\n    telephone: 'telephone'\n};\n\n/**\n * Contains logic for a shipping form component.\n * It performs effects and returns props data related to rendering a shipping address form.\n *\n * This talon performs the following effects:\n *\n * - Manage the updating state of the cart while the mutation for setting the shipping address is in flight\n *\n * @function\n *\n * @param {Object} props\n * @param {SelectShippingFields} props.selectedValues The values from the select input fields in the shipping form\n * @param {function} props.setIsCartUpdating Callback function for setting the update state for the cart.\n * @param {ShippingFormMutations} props.mutations GraphQL mutations for the shipping form.\n * @param {ShippingFormQueries} props.queries GraphQL queries for the shipping form.\n *\n * @returns {ShippingFormTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useShippingForm } from '@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingForm';\n */\nexport const useShippingForm = props => {\n    const {\n        selectedValues,\n        setIsCartUpdating,\n        mutations: { setShippingAddressMutation },\n        queries: { shippingMethodsQuery }\n    } = props;\n\n    const [{ cartId }] = useCartContext();\n    const apolloClient = useApolloClient();\n\n    const [\n        setShippingAddress,\n        {\n            called: isSetShippingAddressCalled,\n            error: errorSettingShippingAddress,\n            loading: isSetShippingLoading\n        }\n    ] = useMutation(setShippingAddressMutation);\n\n    useEffect(() => {\n        if (isSetShippingAddressCalled) {\n            setIsCartUpdating(isSetShippingLoading);\n        }\n    }, [isSetShippingLoading, isSetShippingAddressCalled, setIsCartUpdating]);\n\n    /**\n     * @ignore\n     *\n     * When the zip value is changed, go ahead and manually wipe out that\n     * portion of the cache, which will cause the components subscribed to\n     * that state to re-render. Ideally we would send a mutation to clear the\n     * shipping address set on the cart, to keep those states in sync, but the\n     * GraphQL API does not currently supported clearing addresses.\n     */\n    const handleZipChange = useCallback(\n        zip => {\n            if (zip !== selectedValues.zip) {\n                const data = apolloClient.readQuery({\n                    query: shippingMethodsQuery,\n                    variables: {\n                        cartId\n                    }\n                });\n\n                const { cart } = data;\n                const { shipping_addresses: shippingAddresses } = cart;\n                if (shippingAddresses.length) {\n                    const primaryAddress = shippingAddresses[0];\n                    const {\n                        available_shipping_methods: availableMethods\n                    } = primaryAddress;\n                    if (availableMethods.length) {\n                        apolloClient.writeQuery({\n                            query: shippingMethodsQuery,\n                            data: {\n                                cart: {\n                                    ...cart,\n                                    shipping_addresses: [\n                                        {\n                                            ...primaryAddress,\n                                            available_shipping_methods: []\n                                        }\n                                    ]\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n        },\n        [apolloClient, cartId, selectedValues.zip, shippingMethodsQuery]\n    );\n\n    const handleOnSubmit = useCallback(\n        formValues => {\n            const { country, region, zip } = formValues;\n            if (country && region && zip) {\n                setShippingAddress({\n                    variables: {\n                        cartId,\n                        address: {\n                            ...MOCKED_ADDRESS,\n                            country_code: country,\n                            postcode: zip,\n                            region\n                        }\n                    }\n                });\n            }\n        },\n        [cartId, setShippingAddress]\n    );\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['setShippingAddressMutation', errorSettingShippingAddress]\n            ]),\n        [errorSettingShippingAddress]\n    );\n\n    return {\n        errors,\n        handleOnSubmit,\n        handleZipChange,\n        isSetShippingLoading\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * Values for the select input fields on the shipping form.\n * This is a prop used by the {@link useShippingForm} talon.\n *\n * @typedef {Object} SelectShippingFields\n *\n * @property {String} country Country shipping destination\n * @property {String} region Country's region shipping destination\n * @property {String} zip Country's zip code shipping destination\n */\n\n/**\n * GraphQL mutations for the shipping form.\n * This is a type used by the {@link useShippingForm} talon.\n *\n * @typedef {Object} ShippingFormMutations\n *\n * @property {GraphQLAST} setShippingAddressMutation Mutation for setting the shipping address on a cart\n *\n * @see [shippingForm.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/ShippingMethods/shippingForm.js}\n * for the query used in Venia\n */\n\n/**\n * GraphQL queries for the shipping form.\n * This is a type used by the {@link useShippingForm} talon.\n *\n * @typedef {Object} ShippingFormQueries\n *\n * @property {GraphQLAST} shippingMethodsQuery Query for getting data about available shipping methods\n *\n * @see [shippingMethods.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/ShippingMethods/shippingMethods.gql.js}\n * for the query used in Venia\n */\n\n/**\n * Object type returned by the {@link useShippingForm} talon.\n * It provides props data to use when rendering a shipping form component.\n *\n * @typedef {Object} ShippingFormTalonProps\n *\n * @property {Array<Error>} formErrors A list of form errors\n * @property {function} handleOnSubmit Callback function to handle form submissions\n * @property {function} handleZipChange Callback function to handle a zip code change\n * @property {boolean} isSetShippingLoading True if the cart shipping information is being set. False otherwise.\n */\n"]}