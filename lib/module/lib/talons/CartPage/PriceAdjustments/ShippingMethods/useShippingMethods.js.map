{"version":3,"sources":["useShippingMethods.js"],"names":["useCallback","useEffect","useState","useQuery","useCartContext","useShippingMethods","props","queries","getShippingMethodsQuery","cartId","data","fetchPolicy","nextFetchPolicy","skip","variables","isShowingForm","setIsShowingForm","showForm","cart","shipping_addresses","length","formattedShippingMethods","selectedShippingMethod","selectedShippingFields","country","region","zip","shippingAddresses","primaryShippingAddress","available_shipping_methods","shippingMethods","postcode","selected_shipping_method","shippingMethod","code","sort","a","b","amount","value","carrier_code","method_code","hasMethods"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,OAAO,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AACvC,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFF,KAFJ;AAGA,QAAM,CAAC;AAAEG,IAAAA;AAAF,GAAD,IAAeL,cAAc,EAAnC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAWP,QAAQ,CAACK,uBAAD,EAA0B;AAC/CG,IAAAA,WAAW,EAAE,mBADkC;AAE/CC,IAAAA,eAAe,EAAE,aAF8B;AAG/CC,IAAAA,IAAI,EAAE,CAACJ,MAHwC;AAI/CK,IAAAA,SAAS,EAAE;AACPL,MAAAA;AADO;AAJoC,GAA1B,CAAzB;AASA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAMe,QAAQ,GAAGjB,WAAW,CAAC,MAAMgB,gBAAgB,CAAC,IAAD,CAAvB,EAA+B,EAA/B,CAA5B;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,IAAI,IAAIA,IAAI,CAACQ,IAAL,CAAUC,kBAAV,CAA6BC,MAAzC,EAAiD;AAC7CJ,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH;AACJ,GAJQ,EAIN,CAACN,IAAD,CAJM,CAAT;AAMA,MAAIW,wBAAwB,GAAG,EAA/B;AACA,MAAIC,sBAAsB,GAAG,IAA7B;AACA,MAAIC,sBAAsB,GAAG;AACzBC,IAAAA,OAAO,EAAE,IADgB;AAEzBC,IAAAA,MAAM,EAAE,EAFiB;AAGzBC,IAAAA,GAAG,EAAE;AAHoB,GAA7B;;AAKA,MAAIhB,IAAJ,EAAU;AACN,UAAM;AAAEQ,MAAAA;AAAF,QAAWR,IAAjB;AACA,UAAM;AAAES,MAAAA,kBAAkB,EAAEQ;AAAtB,QAA4CT,IAAlD;;AACA,QAAIS,iBAAiB,CAACP,MAAtB,EAA8B;AAC1B,YAAMQ,sBAAsB,GAAGD,iBAAiB,CAAC,CAAD,CAAhD;AACA,YAAM;AACFE,QAAAA,0BAA0B,EAAEC,eAD1B;AAEFN,QAAAA,OAFE;AAGFO,QAAAA,QAHE;AAIFN,QAAAA,MAJE;AAKFO,QAAAA,wBAAwB,EAAEC;AALxB,UAMFL,sBANJ;AAQAL,MAAAA,sBAAsB,GAAG;AACrBC,QAAAA,OAAO,EAAEA,OAAO,CAACU,IADI;AAErBT,QAAAA,MAAM,EAAEA,MAAM,CAACS,IAFM;AAGrBR,QAAAA,GAAG,EAAEK;AAHgB,OAAzB,CAV0B,CAgB1B;AACA;;AACAV,MAAAA,wBAAwB,GAAG,CAAC,GAAGS,eAAJ,EAAqBK,IAArB,CACvB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAASC,KAAT,GAAiBF,CAAC,CAACC,MAAF,CAASC,KADb,CAA3B;;AAIA,UAAIN,cAAJ,EAAoB;AAChBX,QAAAA,sBAAsB,aAAMW,cAAc,CAACO,YAArB,cAClBP,cAAc,CAACQ,WADG,CAAtB;AAGH;AACJ;AACJ;;AAED,SAAO;AACHC,IAAAA,UAAU,EAAErB,wBAAwB,CAACD,MADlC;AAEHL,IAAAA,aAFG;AAGHQ,IAAAA,sBAHG;AAIHD,IAAAA,sBAJG;AAKHQ,IAAAA,eAAe,EAAET,wBALd;AAMHJ,IAAAA;AANG,GAAP;AAQH,CAvEM;AAyEP;;AAEA;;;;;;;;;;;;AAYA","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport { useCartContext } from '../../../../context/cart';\n\n/**\n * Contains logic for a shipping method selector component.\n * It performs effect and returns props data used to render that component.\n *\n * This talon performs the following effects:\n *\n * - Set the shipping form visibility value based on the shipping methods associated with the cart\n *\n * @function\n *\n * @param {Object} props\n * @param {ShippingMethodsQueries} props.queries GraphQL queries for shipping methods\n *\n * @returns {ShippingMethodsTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useShippingMethods } from '@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingMethods';\n */\nexport const useShippingMethods = props => {\n    const {\n        queries: { getShippingMethodsQuery }\n    } = props;\n    const [{ cartId }] = useCartContext();\n    const { data } = useQuery(getShippingMethodsQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !cartId,\n        variables: {\n            cartId\n        }\n    });\n\n    const [isShowingForm, setIsShowingForm] = useState(false);\n    const showForm = useCallback(() => setIsShowingForm(true), []);\n\n    useEffect(() => {\n        if (data && data.cart.shipping_addresses.length) {\n            setIsShowingForm(true);\n        }\n    }, [data]);\n\n    let formattedShippingMethods = [];\n    let selectedShippingMethod = null;\n    let selectedShippingFields = {\n        country: 'US',\n        region: '',\n        zip: ''\n    };\n    if (data) {\n        const { cart } = data;\n        const { shipping_addresses: shippingAddresses } = cart;\n        if (shippingAddresses.length) {\n            const primaryShippingAddress = shippingAddresses[0];\n            const {\n                available_shipping_methods: shippingMethods,\n                country,\n                postcode,\n                region,\n                selected_shipping_method: shippingMethod\n            } = primaryShippingAddress;\n\n            selectedShippingFields = {\n                country: country.code,\n                region: region.code,\n                zip: postcode\n            };\n\n            // GraphQL has some sort order problems when updating the cart.\n            // This ensures we're always ordering the result set by price.\n            formattedShippingMethods = [...shippingMethods].sort(\n                (a, b) => a.amount.value - b.amount.value\n            );\n\n            if (shippingMethod) {\n                selectedShippingMethod = `${shippingMethod.carrier_code}|${\n                    shippingMethod.method_code\n                }`;\n            }\n        }\n    }\n\n    return {\n        hasMethods: formattedShippingMethods.length,\n        isShowingForm,\n        selectedShippingFields,\n        selectedShippingMethod,\n        shippingMethods: formattedShippingMethods,\n        showForm\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL queries for shipping methods.\n * This is a type used in the {@link useShippingMethods} talon.\n *\n * @typedef {Object} ShippingMethodsQueries\n *\n * @property {GraphQLAST} getShippingMethodsQuery Query to get the available shipping methods.\n *\n * @see [shippingMethods.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/ShippingMethods/shippingMethods.gql.js}\n * for the queries used in Venia\n */\n\n/**\n * Object type returned by the {@link useShippingMethods} talon.\n * It provides prop data to use when rendering shipping methods.\n *\n * @typedef {Object} ShippingMethodsTalonProps\n *\n * @property {number} hasMethods Provides the number of shipping methods available.\n * Can be used as a boolean value since having no shipping methods would return 0.\n * @property {boolean} isShowingForm True if the form should be shown. False otherwise.\n * @property {SelectShippingFields} selectedShippingFields Values for the select input fields on the shipping form\n * @property {String} selectedShippingMethod A serialized string of <carrier-code>|<method-code>, eg. usps|priority.\n * @property {Array<Object>} shippingMethods A list of available shipping methods based on the primary shipping address\n * @property {function} showForm A function that sets the `isShowingForm` value to true.\n */\n"]}