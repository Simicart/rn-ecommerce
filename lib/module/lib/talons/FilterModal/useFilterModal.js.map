{"version":3,"sources":["useFilterModal.js"],"names":["useCallback","useEffect","useMemo","useRef","useState","useQuery","useHistory","useLocation","useAppContext","getSearchFromState","getStateFromSearch","stripHtml","useFilterState","useFilterModal","props","filters","queries","filterIntrospection","isApplying","setIsApplying","drawer","closeDrawer","filterState","filterApi","prevDrawer","isOpen","history","pathname","search","data","introspectionData","inputFields","__type","attributeCodes","map","attribute_code","DISABLED_FILTERS","disabled","Set","add","possibleFilters","nextFilters","name","isValid","includes","isEnabled","has","filterNames","filterKeys","filterItems","names","Map","keys","itemsByGroup","filter","options","label","group","items","set","value","push","title","nextSearch","justOpened","current","justClosed","nextState","setItems","handleApply","handleClose","handleReset","clear"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\n\nimport { getSearchFromState, getStateFromSearch, stripHtml } from './helpers';\nimport { useFilterState } from './useFilterState';\n\n/**\n * Filter Modal talon.\n *\n * @returns {{\n *   filterApi: any,\n *   filterState: any,\n *   handleClose: function,\n *   isOpen: boolean\n * }}\n */\nexport const useFilterModal = props => {\n    const {\n        filters,\n        queries: { filterIntrospection }\n    } = props;\n    const [isApplying, setIsApplying] = useState(false);\n    const [{ drawer }, { closeDrawer }] = useAppContext();\n    const [filterState, filterApi] = useFilterState();\n    const prevDrawer = useRef(null);\n    const isOpen = drawer === 'filter';\n\n    const history = useHistory();\n    const { pathname, search } = useLocation();\n\n    const { data: introspectionData } = useQuery(filterIntrospection);\n\n    const inputFields = introspectionData\n        ? introspectionData.__type.inputFields\n        : [];\n\n    const attributeCodes = useMemo(\n        () => filters.map(({ attribute_code }) => attribute_code),\n        [filters]\n    );\n\n    // Create a set of disabled filters.\n    const DISABLED_FILTERS = useMemo(() => {\n        const disabled = new Set();\n        // Disable category filtering when not on a search page.\n        if (pathname !== '/search.html') {\n            disabled.add('category_id');\n        }\n\n        return disabled;\n    }, [pathname]);\n\n    // Get \"allowed\" filters by intersection of filter attribute codes and\n    // schema input field types. This restricts the displayed filters to those\n    // that the api will understand.\n    const possibleFilters = useMemo(() => {\n        const nextFilters = new Set();\n\n        // perform mapping and filtering in the same cycle\n        for (const { name } of inputFields) {\n            const isValid = attributeCodes.includes(name);\n            const isEnabled = !DISABLED_FILTERS.has(name);\n\n            if (isValid && isEnabled) {\n                nextFilters.add(name);\n            }\n        }\n\n        return nextFilters;\n    }, [DISABLED_FILTERS, attributeCodes, inputFields]);\n\n    // iterate over filters once to set up all the collections we need\n    const [filterNames, filterKeys, filterItems] = useMemo(() => {\n        const names = new Map();\n        const keys = new Set();\n        const itemsByGroup = new Map();\n\n        for (const filter of filters) {\n            const { options, label: name, attribute_code: group } = filter;\n\n            // If this aggregation is not a possible filter, just back out.\n            if (possibleFilters.has(group)) {\n                const items = [];\n\n                // add filter name\n                names.set(group, name);\n\n                // add filter key permutations\n                keys.add(`${group}[filter]`);\n\n                // add items\n                for (const { label, value } of options) {\n                    items.push({ title: stripHtml(label), value });\n                }\n                itemsByGroup.set(group, items);\n            }\n        }\n\n        return [names, keys, itemsByGroup];\n    }, [filters, possibleFilters]);\n\n    // on apply, write filter state to location\n    useEffect(() => {\n        if (isApplying) {\n            const nextSearch = getSearchFromState(\n                search,\n                filterKeys,\n                filterState\n            );\n\n            // write filter state to history\n            history.push({ pathname, search: nextSearch });\n\n            // mark the operation as complete\n            setIsApplying(false);\n        }\n    }, [filterKeys, filterState, history, isApplying, pathname, search]);\n\n    // on drawer toggle, read filter state from location\n    useEffect(() => {\n        const justOpened = prevDrawer.current === null && drawer === 'filter';\n        const justClosed = prevDrawer.current === 'filter' && drawer === null;\n\n        if (justOpened || justClosed) {\n            const nextState = getStateFromSearch(\n                search,\n                filterKeys,\n                filterItems\n            );\n\n            filterApi.setItems(nextState);\n        }\n        prevDrawer.current = drawer;\n    }, [drawer, filterApi, filterItems, filterKeys, search]);\n\n    const handleApply = useCallback(() => {\n        setIsApplying(true);\n        closeDrawer();\n    }, [closeDrawer]);\n\n    const handleClose = useCallback(() => {\n        closeDrawer();\n    }, [closeDrawer]);\n\n    const handleReset = useCallback(() => {\n        filterApi.clear();\n        setIsApplying(true);\n    }, [filterApi, setIsApplying]);\n\n    return {\n        filterApi,\n        filterItems,\n        filterKeys,\n        filterNames,\n        filterState,\n        handleApply,\n        handleClose,\n        handleReset,\n        isApplying,\n        isOpen\n    };\n};\n"]}