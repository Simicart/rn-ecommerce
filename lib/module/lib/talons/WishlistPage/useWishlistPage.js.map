{"version":3,"sources":["useWishlistPage.js"],"names":["useEffect","useMemo","useHistory","useQuery","useUserContext","useTypePolicies","useWishlistPage","props","queries","types","getCustomerWishlistQuery","history","isSignedIn","data","error","fetchPolicy","nextFetchPolicy","skip","derivedWishlists","customer","wishlists","errors","Map","push"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,OAAO,MAAMC,eAAe,GAAGC,KAAK,IAAI;AACpC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBF,KAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAA+BF,OAArC;AAEAH,EAAAA,eAAe,CAACI,KAAD,CAAf;AAEA,QAAME,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAM,CAAC;AAAEU,IAAAA;AAAF,GAAD,IAAmBR,cAAc,EAAvC;AAEA,QAAM;AAAES,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBX,QAAQ,CAACO,wBAAD,EAA2B;AACvDK,IAAAA,WAAW,EAAE,mBAD0C;AAEvDC,IAAAA,eAAe,EAAE,aAFsC;AAGvDC,IAAAA,IAAI,EAAE,CAACL;AAHgD,GAA3B,CAAhC;AAMA,QAAMM,gBAAgB,GAAGjB,OAAO,CAAC,MAAM;AACnC,WAAQY,IAAI,IAAIA,IAAI,CAACM,QAAL,CAAcC,SAAvB,IAAqC,EAA5C;AACH,GAF+B,EAE7B,CAACP,IAAD,CAF6B,CAAhC;AAIA,QAAMQ,MAAM,GAAGpB,OAAO,CAAC,MAAM;AACzB,WAAO,IAAIqB,GAAJ,CAAQ,CAAC,CAAC,0BAAD,EAA6BR,KAA7B,CAAD,CAAR,CAAP;AACH,GAFqB,EAEnB,CAACA,KAAD,CAFmB,CAAtB;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACY,UAAL,EAAiB;AACbD,MAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACH;AACJ,GAJQ,EAIN,CAACZ,OAAD,EAAUC,UAAV,CAJM,CAAT;AAMA,SAAO;AACHS,IAAAA,MADG;AAEHD,IAAAA,SAAS,EAAEF;AAFR,GAAP;AAIH,CAjCM","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useUserContext } from '../../context/user';\nimport { useTypePolicies } from '../../hooks/useTypePolicies';\n\nexport const useWishlistPage = props => {\n    const { queries, types } = props;\n    const { getCustomerWishlistQuery } = queries;\n\n    useTypePolicies(types);\n\n    const history = useHistory();\n    const [{ isSignedIn }] = useUserContext();\n\n    const { data, error } = useQuery(getCustomerWishlistQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !isSignedIn\n    });\n\n    const derivedWishlists = useMemo(() => {\n        return (data && data.customer.wishlists) || [];\n    }, [data]);\n\n    const errors = useMemo(() => {\n        return new Map([['getCustomerWishlistQuery', error]]);\n    }, [error]);\n\n    useEffect(() => {\n        if (!isSignedIn) {\n            history.push('/');\n        }\n    }, [history, isSignedIn]);\n\n    return {\n        errors,\n        wishlists: derivedWishlists\n    };\n};\n"]}