{"version":3,"sources":["useOption.js"],"names":["useCallback","useMemo","useState","useOption","props","attribute_id","label","onSelectionChange","selectedValue","values","selection","setSelection","initialSelection","searchValue","find","value","default_label","valuesMap","Map","map","value_index","store_label","selectedValueLabel","selectedValueDescription","handleSelectionChange","get"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA;;;;;;;;;;AASA,OAAO,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAC9B,QAAM;AACFC,IAAAA,YADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA,iBAHE;AAIFC,IAAAA,aAJE;AAKFC,IAAAA;AALE,MAMFL,KANJ;AAOA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMU,gBAAgB,GAAGX,OAAO,CAAC,MAAM;AACnC,QAAIW,gBAAgB,GAAG,EAAvB;AACA,UAAMC,WAAW,GAAGH,SAAS,IAAIF,aAAjC;;AACA,QAAIK,WAAJ,EAAiB;AACbD,MAAAA,gBAAgB,GACZH,MAAM,CAACK,IAAP,CAAYC,KAAK,IAAIA,KAAK,CAACC,aAAN,KAAwBH,WAA7C,KAA6D,EADjE;AAEH;;AACD,WAAOD,gBAAP;AACH,GAR+B,EAQ7B,CAACJ,aAAD,EAAgBE,SAAhB,EAA2BD,MAA3B,CAR6B,CAAhC;AAUA,QAAMQ,SAAS,GAAGhB,OAAO,CAAC,MAAM;AAC5B,WAAO,IAAIiB,GAAJ,CACHT,MAAM,CAACU,GAAP,CAAWJ,KAAK,IAAI,CAACA,KAAK,CAACK,WAAP,EAAoBL,KAAK,CAACM,WAA1B,CAApB,CADG,CAAP;AAGH,GAJwB,EAItB,CAACZ,MAAD,CAJsB,CAAzB;AAMA,QAAMa,kBAAkB,sBAAehB,KAAf,MAAxB;AACA,QAAMiB,wBAAwB,GAC1Bb,SAAS,IAAIE,gBAAgB,CAACI,aAA9B,IAA+C,MADnD;AAGA,QAAMQ,qBAAqB,GAAGxB,WAAW,CACrCU,SAAS,IAAI;AACTC,IAAAA,YAAY,CAACM,SAAS,CAACQ,GAAV,CAAcf,SAAd,CAAD,CAAZ;;AAEA,QAAIH,iBAAJ,EAAuB;AACnBA,MAAAA,iBAAiB,CAACF,YAAD,EAAeK,SAAf,CAAjB;AACH;AACJ,GAPoC,EAQrC,CAACL,YAAD,EAAeE,iBAAf,EAAkCU,SAAlC,CARqC,CAAzC;AAUA,SAAO;AACHO,IAAAA,qBADG;AAEHZ,IAAAA,gBAFG;AAGHU,IAAAA,kBAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH,CA7CM","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\n/**\n * Talon for Option.\n *\n * @param {number} props.attribute_id the id of the option\n * @param {string} props.label the label for the option\n * @param {function} props.onSelectionChange callback handler for when the option is clicked\n * @param {string} props.selectedValue the label of the selected option\n * @param {array} props.values an array containing possible values\n */\nexport const useOption = props => {\n    const {\n        attribute_id,\n        label,\n        onSelectionChange,\n        selectedValue,\n        values\n    } = props;\n    const [selection, setSelection] = useState(null);\n    const initialSelection = useMemo(() => {\n        let initialSelection = {};\n        const searchValue = selection || selectedValue;\n        if (searchValue) {\n            initialSelection =\n                values.find(value => value.default_label === searchValue) || {};\n        }\n        return initialSelection;\n    }, [selectedValue, selection, values]);\n\n    const valuesMap = useMemo(() => {\n        return new Map(\n            values.map(value => [value.value_index, value.store_label])\n        );\n    }, [values]);\n\n    const selectedValueLabel = `Selected ${label}:`;\n    const selectedValueDescription =\n        selection || initialSelection.default_label || 'None';\n\n    const handleSelectionChange = useCallback(\n        selection => {\n            setSelection(valuesMap.get(selection));\n\n            if (onSelectionChange) {\n                onSelectionChange(attribute_id, selection);\n            }\n        },\n        [attribute_id, onSelectionChange, valuesMap]\n    );\n    return {\n        handleSelectionChange,\n        initialSelection,\n        selectedValueLabel,\n        selectedValueDescription\n    };\n};\n"]}