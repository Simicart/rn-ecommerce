{"version":3,"sources":["useCmsPage.js"],"names":["useEffect","useMemo","useQuery","useAppContext","useCmsPage","props","id","queries","getCmsPage","loading","error","data","variables","Number","fetchPolicy","actions","setPageLoading","shouldShowLoadingIndicator","cmsPage","hasContent","content","length","includes"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEA;;;;;;;;;;AASA,OAAO,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC/B,QAAM;AACFC,IAAAA,EADE;AAEFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAFP,MAGFH,KAHJ;AAKA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACM,UAAD,EAAa;AAClDI,IAAAA,SAAS,EAAE;AACPN,MAAAA,EAAE,EAAEO,MAAM,CAACP,EAAD;AADH,KADuC;AAIlDQ,IAAAA,WAAW,EAAE;AAJqC,GAAb,CAAzC;AAOA,QAAM,GAEF;AACIC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADb,GAFE,IAKFb,aAAa,EALjB,CAb+B,CAoB/B;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTgB,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH,KAFD;AAGH,GAJQ,EAIN,CAACA,cAAD,CAJM,CAAT,CArB+B,CA2B/B;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,cAAc,CAACP,OAAD,CAAd;AACH,GAFQ,EAEN,CAACA,OAAD,EAAUO,cAAV,CAFM,CAAT;AAIA,QAAMC,0BAA0B,GAAG,CAACN,IAApC;AAEA,QAAMO,OAAO,GAAGP,IAAI,GAAGA,IAAI,CAACO,OAAR,GAAkB,IAAtC,CAlC+B,CAoC/B;;AACA,QAAMC,UAAU,GAAGlB,OAAO,CAAC,MAAM;AAC7B,WACIiB,OAAO,IACPA,OAAO,CAACE,OADR,IAEAF,OAAO,CAACE,OAAR,CAAgBC,MAAhB,GAAyB,CAFzB,IAGA,CAACH,OAAO,CAACE,OAAR,CAAgBE,QAAhB,CAAyB,iCAAzB,CAJL;AAMH,GAPyB,EAOvB,CAACJ,OAAD,CAPuB,CAA1B;AASA,SAAO;AACHA,IAAAA,OADG;AAEHC,IAAAA,UAFG;AAGHT,IAAAA,KAHG;AAIHO,IAAAA;AAJG,GAAP;AAMH,CApDM","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useAppContext } from '../../context/app';\n\n/**\n * Retrieves data necessary to render a CMS Page\n *\n * @param {object} props\n * @param {object} props.id - CMS Page ID\n * @param {object} props.queries - Collection of GraphQL queries\n * @param {object} props.queries.getCmsPage - Query for getting a CMS Page\n * @returns {{shouldShowLoadingIndicator: *, hasContent: *, cmsPage: *, error: *}}\n */\nexport const useCmsPage = props => {\n    const {\n        id,\n        queries: { getCmsPage }\n    } = props;\n\n    const { loading, error, data } = useQuery(getCmsPage, {\n        variables: {\n            id: Number(id)\n        },\n        fetchPolicy: 'cache-and-network'\n    });\n\n    const [\n        ,\n        {\n            actions: { setPageLoading }\n        }\n    ] = useAppContext();\n\n    // To prevent loading indicator from getting stuck, unset on unmount.\n    useEffect(() => {\n        return () => {\n            setPageLoading(false);\n        };\n    }, [setPageLoading]);\n\n    // Ensure we mark the page as loading while we check the network for updates\n    useEffect(() => {\n        setPageLoading(loading);\n    }, [loading, setPageLoading]);\n\n    const shouldShowLoadingIndicator = !data;\n\n    const cmsPage = data ? data.cmsPage : null;\n\n    // TODO: we shouldn't be validating strings to determine if the page has content or not\n    const hasContent = useMemo(() => {\n        return (\n            cmsPage &&\n            cmsPage.content &&\n            cmsPage.content.length > 0 &&\n            !cmsPage.content.includes('CMS homepage content goes here.')\n        );\n    }, [cmsPage]);\n\n    return {\n        cmsPage,\n        hasContent,\n        error,\n        shouldShowLoadingIndicator\n    };\n};\n"]}