{"version":3,"sources":["price.js"],"names":["React","Fragment","number","string","shape","patches","useIntl","Price","props","locale","value","currencyCode","classes","parts","toParts","call","Intl","NumberFormat","style","currency","children","map","part","i","partClass","type","key","propTypes","integer","decimal","fraction","isRequired","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,QAAsC,YAAtC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA;;;;;;;;;;;AAWA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAaH,OAAO,EAA1B;AACA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA,YAAT;AAAuBC,IAAAA;AAAvB,MAAmCJ,KAAzC,CAFmB,CAInB;AACA;;AACA,QAAMK,KAAK,GAAGR,OAAO,CAACS,OAAR,CAAgBC,IAAhB,CACV,IAAIC,IAAI,CAACC,YAAT,CAAsBR,MAAtB,EAA8B;AAC1BS,IAAAA,KAAK,EAAE,UADmB;AAE1BC,IAAAA,QAAQ,EAAER;AAFgB,GAA9B,CADU,EAKVD,KALU,CAAd;AAQA,QAAMU,QAAQ,GAAGP,KAAK,CAACQ,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACpC,UAAMC,SAAS,GAAGZ,OAAO,CAACU,IAAI,CAACG,IAAN,CAAzB;AACA,UAAMC,GAAG,aAAMH,CAAN,cAAWD,IAAI,CAACZ,KAAhB,CAAT;AAEA,wBACI;AAAM,MAAA,GAAG,EAAEgB,GAAX;AAAgB,MAAA,SAAS,EAAEF;AAA3B,OACKF,IAAI,CAACZ,KADV,CADJ;AAKH,GATgB,CAAjB;AAWA,sBAAO,oBAAC,QAAD,QAAWU,QAAX,CAAP;AACH,CA1BD;;AA4BAb,KAAK,CAACoB,SAAN,GAAkB;AACd;;;AAGAf,EAAAA,OAAO,EAAER,KAAK,CAAC;AACXe,IAAAA,QAAQ,EAAEhB,MADC;AAEXyB,IAAAA,OAAO,EAAEzB,MAFE;AAGX0B,IAAAA,OAAO,EAAE1B,MAHE;AAIX2B,IAAAA,QAAQ,EAAE3B;AAJC,GAAD,CAJA;;AAUd;;;AAGAO,EAAAA,KAAK,EAAER,MAAM,CAAC6B,UAbA;;AAcd;;;AAGApB,EAAAA,YAAY,EAAER,MAAM,CAAC4B;AAjBP,CAAlB;AAoBAxB,KAAK,CAACyB,YAAN,GAAqB;AACjBpB,EAAAA,OAAO,EAAE;AADQ,CAArB;AAIA,eAAeL,KAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { number, string, shape } from 'prop-types';\nimport patches from '../util/intlPatches';\nimport { useIntl } from 'react-intl';\n\n/**\n * The **Price** component is used anywhere a price needs to be displayed.\n *\n * Formatting of prices and currency symbol selection is handled entirely by the ECMAScript Internationalization API available in modern browsers.\n *\n * A [polyfill][] is required for any JavaScript runtime that does not have [Intl.NumberFormat.prototype.formatToParts][].\n *\n * [polyfill]: https://www.npmjs.com/package/intl\n * [Intl.NumberFormat.prototype.formatToParts]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n */\n\nconst Price = props => {\n    const { locale } = useIntl();\n    const { value, currencyCode, classes } = props;\n\n    // If the optional locale prop is not provided or is undefined,\n    // the runtime's default locale is used in the Intl.NumberFormat() constructor.\n    const parts = patches.toParts.call(\n        new Intl.NumberFormat(locale, {\n            style: 'currency',\n            currency: currencyCode\n        }),\n        value\n    );\n\n    const children = parts.map((part, i) => {\n        const partClass = classes[part.type];\n        const key = `${i}-${part.value}`;\n\n        return (\n            <span key={key} className={partClass}>\n                {part.value}\n            </span>\n        );\n    });\n\n    return <Fragment>{children}</Fragment>;\n};\n\nPrice.propTypes = {\n    /**\n     * Class names to use when styling this component\n     */\n    classes: shape({\n        currency: string,\n        integer: string,\n        decimal: string,\n        fraction: string\n    }),\n    /**\n     * The numeric price\n     */\n    value: number.isRequired,\n    /**\n     * A string with any of the currency code supported by Intl.NumberFormat\n     */\n    currencyCode: string.isRequired\n};\n\nPrice.defaultProps = {\n    classes: {}\n};\n\nexport default Price;\n"]}