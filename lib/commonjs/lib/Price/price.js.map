{"version":3,"sources":["price.js"],"names":["Price","props","locale","value","currencyCode","classes","parts","patches","toParts","call","Intl","NumberFormat","style","currency","children","map","part","i","partClass","type","key","propTypes","string","integer","decimal","fraction","number","isRequired","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;;;;;;;AAWA,MAAMA,KAAK,GAAGC,KAAK,IAAI;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAa,yBAAnB;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,YAAT;AAAuBC,IAAAA;AAAvB,MAAmCJ,KAAzC,CAFmB,CAInB;AACA;;AACA,QAAMK,KAAK,GAAGC,qBAAQC,OAAR,CAAgBC,IAAhB,CACV,IAAIC,IAAI,CAACC,YAAT,CAAsBT,MAAtB,EAA8B;AAC1BU,IAAAA,KAAK,EAAE,UADmB;AAE1BC,IAAAA,QAAQ,EAAET;AAFgB,GAA9B,CADU,EAKVD,KALU,CAAd;;AAQA,QAAMW,QAAQ,GAAGR,KAAK,CAACS,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACpC,UAAMC,SAAS,GAAGb,OAAO,CAACW,IAAI,CAACG,IAAN,CAAzB;AACA,UAAMC,GAAG,aAAMH,CAAN,cAAWD,IAAI,CAACb,KAAhB,CAAT;AAEA,wBACI;AAAM,MAAA,GAAG,EAAEiB,GAAX;AAAgB,MAAA,SAAS,EAAEF;AAA3B,OACKF,IAAI,CAACb,KADV,CADJ;AAKH,GATgB,CAAjB;AAWA,sBAAO,6BAAC,eAAD,QAAWW,QAAX,CAAP;AACH,CA1BD;;AA4BAd,KAAK,CAACqB,SAAN,GAAkB;AACd;;;AAGAhB,EAAAA,OAAO,EAAE,sBAAM;AACXQ,IAAAA,QAAQ,EAAES,iBADC;AAEXC,IAAAA,OAAO,EAAED,iBAFE;AAGXE,IAAAA,OAAO,EAAEF,iBAHE;AAIXG,IAAAA,QAAQ,EAAEH;AAJC,GAAN,CAJK;;AAUd;;;AAGAnB,EAAAA,KAAK,EAAEuB,kBAAOC,UAbA;;AAcd;;;AAGAvB,EAAAA,YAAY,EAAEkB,kBAAOK;AAjBP,CAAlB;AAoBA3B,KAAK,CAAC4B,YAAN,GAAqB;AACjBvB,EAAAA,OAAO,EAAE;AADQ,CAArB;eAIeL,K","sourcesContent":["import React, { Fragment } from 'react';\nimport { number, string, shape } from 'prop-types';\nimport patches from '../util/intlPatches';\nimport { useIntl } from 'react-intl';\n\n/**\n * The **Price** component is used anywhere a price needs to be displayed.\n *\n * Formatting of prices and currency symbol selection is handled entirely by the ECMAScript Internationalization API available in modern browsers.\n *\n * A [polyfill][] is required for any JavaScript runtime that does not have [Intl.NumberFormat.prototype.formatToParts][].\n *\n * [polyfill]: https://www.npmjs.com/package/intl\n * [Intl.NumberFormat.prototype.formatToParts]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n */\n\nconst Price = props => {\n    const { locale } = useIntl();\n    const { value, currencyCode, classes } = props;\n\n    // If the optional locale prop is not provided or is undefined,\n    // the runtime's default locale is used in the Intl.NumberFormat() constructor.\n    const parts = patches.toParts.call(\n        new Intl.NumberFormat(locale, {\n            style: 'currency',\n            currency: currencyCode\n        }),\n        value\n    );\n\n    const children = parts.map((part, i) => {\n        const partClass = classes[part.type];\n        const key = `${i}-${part.value}`;\n\n        return (\n            <span key={key} className={partClass}>\n                {part.value}\n            </span>\n        );\n    });\n\n    return <Fragment>{children}</Fragment>;\n};\n\nPrice.propTypes = {\n    /**\n     * Class names to use when styling this component\n     */\n    classes: shape({\n        currency: string,\n        integer: string,\n        decimal: string,\n        fraction: string\n    }),\n    /**\n     * The numeric price\n     */\n    value: number.isRequired,\n    /**\n     * A string with any of the currency code supported by Intl.NumberFormat\n     */\n    currencyCode: string.isRequired\n};\n\nPrice.defaultProps = {\n    classes: {}\n};\n\nexport default Price;\n"]}