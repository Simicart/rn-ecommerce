{"version":3,"sources":["cart.js"],"names":["name","initialState","addItemError","cartId","details","detailsError","getCartError","isLoading","isUpdatingItem","isAddingItem","removeItemError","shippingMethods","updateItemError","reducerMap","actions","getCart","receive","state","payload","error","String","getDetails","request","addItem","updateItem","removeItem","reset"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\n\nimport actions from '../actions/cart';\n\nexport const name = 'cart';\n\nexport const initialState = {\n    addItemError: null,\n    cartId: null,\n    details: {},\n    detailsError: null,\n    getCartError: null,\n    isLoading: false,\n    isUpdatingItem: false,\n    isAddingItem: false,\n    removeItemError: null,\n    shippingMethods: [],\n    updateItemError: null\n};\n\nconst reducerMap = {\n    [actions.getCart.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...initialState,\n                getCartError: payload\n            };\n        }\n\n        return {\n            ...state,\n            cartId: String(payload),\n            getCartError: null\n        };\n    },\n    [actions.getDetails.request]: state => {\n        return {\n            ...state,\n            isLoading: true\n        };\n    },\n    [actions.getDetails.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                detailsError: payload,\n                isLoading: false\n            };\n        }\n\n        return {\n            ...state,\n            // The only time we should spread the payload into the cart store\n            // is after we've fetched cart details.\n            ...payload,\n            isLoading: false\n        };\n    },\n    [actions.addItem.request]: state => {\n        return {\n            ...state,\n            isAddingItem: true\n        };\n    },\n    [actions.addItem.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                addItemError: payload,\n                isAddingItem: false\n            };\n        }\n\n        return {\n            ...state,\n            isAddingItem: false\n        };\n    },\n    [actions.updateItem.request]: state => {\n        return {\n            ...state,\n            isUpdatingItem: true\n        };\n    },\n    [actions.updateItem.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                isUpdatingItem: false,\n                updateItemError: payload\n            };\n        }\n\n        // We don't actually have to update any items here\n        // because we force a refresh from the server.\n        return {\n            ...state,\n            isUpdatingItem: false\n        };\n    },\n    [actions.removeItem.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                removeItemError: payload\n            };\n        }\n        return {\n            ...state\n        };\n    },\n    [actions.reset]: () => initialState\n};\n\nexport default handleActions(reducerMap, initialState);\n"]}