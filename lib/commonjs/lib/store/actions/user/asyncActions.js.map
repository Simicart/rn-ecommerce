{"version":3,"sources":["asyncActions.js"],"names":["storage","BrowserPersistence","signOut","payload","thunk","dispatch","revokeToken","error","console","clearToken","actions","reset","getUserDetails","fetchUserDetails","args","getState","user","isSignedIn","getDetails","request","data","receive","customer","resetPassword","email","Promise","resolve","setToken","token","setItem","removeItem"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,OAAO,GAAG,IAAIC,0BAAJ,EAAhB;;AAEO,MAAMC,OAAO,GAAG,CAACC,OAAO,GAAG,EAAX,KACnB,eAAeC,KAAf,CAAqBC,QAArB,EAA+B;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAkBH,OAAxB;;AAEA,MAAIG,WAAJ,EAAiB;AACb;AACA,QAAI;AACA,YAAMA,WAAW,EAAjB;AACH,KAFD,CAEE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACH;AACJ,GAV0B,CAY3B;;;AACA,QAAMF,QAAQ,CAACI,UAAU,EAAX,CAAd;AACA,QAAMJ,QAAQ,CAACK,iBAAQC,KAAR,EAAD,CAAd;AACA,QAAM,6CAAN,CAf2B,CAiB3B;AACA;AACA;;AACA,QAAMN,QAAQ,CAAC,uBAAD,CAAd;AACH,CAtBE;;;;AAwBA,MAAMO,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAC1B,eAAeT,KAAf,CAAqB,GAAGU,IAAxB,EAA8B;AAC1B,QAAM,CAACT,QAAD,EAAWU,QAAX,IAAuBD,IAA7B;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAWD,QAAQ,EAAzB;;AAEA,MAAIC,IAAI,CAACC,UAAT,EAAqB;AACjBZ,IAAAA,QAAQ,CAACK,iBAAQQ,UAAR,CAAmBC,OAAnB,EAAD,CAAR;;AAEA,QAAI;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMP,gBAAgB,EAAvC;AAEAR,MAAAA,QAAQ,CAACK,iBAAQQ,UAAR,CAAmBG,OAAnB,CAA2BD,IAAI,CAACE,QAAhC,CAAD,CAAR;AACH,KAJD,CAIE,OAAOf,KAAP,EAAc;AACZF,MAAAA,QAAQ,CAACK,iBAAQQ,UAAR,CAAmBG,OAAnB,CAA2Bd,KAA3B,CAAD,CAAR;AACH;AACJ;AACJ,CAhBE;;;;AAkBA,MAAMgB,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACzB,eAAepB,KAAf,CAAqB,GAAGU,IAAxB,EAA8B;AAC1B,QAAM,CAACT,QAAD,IAAaS,IAAnB;AAEAT,EAAAA,QAAQ,CAACK,iBAAQa,aAAR,CAAsBJ,OAAtB,EAAD,CAAR,CAH0B,CAK1B;AACA;;AACA,QAAMM,OAAO,CAACC,OAAR,CAAgBF,KAAhB,CAAN;AAEAnB,EAAAA,QAAQ,CAACK,iBAAQa,aAAR,CAAsBF,OAAtB,EAAD,CAAR;AACH,CAXE;;;;AAaA,MAAMM,QAAQ,GAAGC,KAAK,IACzB,eAAexB,KAAf,CAAqB,GAAGU,IAAxB,EAA8B;AAC1B,QAAM,CAACT,QAAD,IAAaS,IAAnB,CAD0B,CAG1B;AACA;;AACAd,EAAAA,OAAO,CAAC6B,OAAR,CAAgB,cAAhB,EAAgCD,KAAhC,EAAuC,IAAvC,EAL0B,CAO1B;;AACAvB,EAAAA,QAAQ,CAACK,iBAAQiB,QAAR,CAAiBC,KAAjB,CAAD,CAAR;AACH,CAVE;;;;AAYA,MAAMnB,UAAU,GAAG,MACtB,eAAeL,KAAf,CAAqB,GAAGU,IAAxB,EAA8B;AAC1B,QAAM,CAACT,QAAD,IAAaS,IAAnB,CAD0B,CAG1B;;AACAd,EAAAA,OAAO,CAAC8B,UAAR,CAAmB,cAAnB,EAJ0B,CAM1B;;AACAzB,EAAAA,QAAQ,CAACK,iBAAQD,UAAR,EAAD,CAAR;AACH,CATE","sourcesContent":["import BrowserPersistence from '../../../util/simplePersistence';\nimport { removeCart } from '../cart';\nimport { clearCheckoutDataFromStorage } from '../checkout';\n\nimport actions from './actions';\n\nconst storage = new BrowserPersistence();\n\nexport const signOut = (payload = {}) =>\n    async function thunk(dispatch) {\n        const { revokeToken } = payload;\n\n        if (revokeToken) {\n            // Send mutation to revoke token.\n            try {\n                await revokeToken();\n            } catch (error) {\n                console.error('Error Revoking Token', error);\n            }\n        }\n\n        // Remove token from local storage and Redux.\n        await dispatch(clearToken());\n        await dispatch(actions.reset());\n        await clearCheckoutDataFromStorage();\n\n        // Now that we're signed out, forget the old (customer) cart.\n        // We don't need to create a new cart here because we're going to refresh\n        // the page immediately after.\n        await dispatch(removeCart());\n    };\n\nexport const getUserDetails = ({ fetchUserDetails }) =>\n    async function thunk(...args) {\n        const [dispatch, getState] = args;\n        const { user } = getState();\n\n        if (user.isSignedIn) {\n            dispatch(actions.getDetails.request());\n\n            try {\n                const { data } = await fetchUserDetails();\n\n                dispatch(actions.getDetails.receive(data.customer));\n            } catch (error) {\n                dispatch(actions.getDetails.receive(error));\n            }\n        }\n    };\n\nexport const resetPassword = ({ email }) =>\n    async function thunk(...args) {\n        const [dispatch] = args;\n\n        dispatch(actions.resetPassword.request());\n\n        // TODO: actually make the call to the API.\n        // For now, just return a resolved promise.\n        await Promise.resolve(email);\n\n        dispatch(actions.resetPassword.receive());\n    };\n\nexport const setToken = token =>\n    async function thunk(...args) {\n        const [dispatch] = args;\n\n        // Store token in local storage.\n        // TODO: Get correct token expire time from API\n        storage.setItem('signin_token', token, 3600);\n\n        // Persist in store\n        dispatch(actions.setToken(token));\n    };\n\nexport const clearToken = () =>\n    async function thunk(...args) {\n        const [dispatch] = args;\n\n        // Clear token from local storage\n        storage.removeItem('signin_token');\n\n        // Remove from store\n        dispatch(actions.clearToken());\n    };\n"]}