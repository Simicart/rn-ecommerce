{"version":3,"sources":["items.js"],"names":["Items","props","getItemKey","initialSelection","items","onSelectionChange","renderItem","selectionModel","state","api","cursor","hasFocus","selectedKeys","removeFocus","setFocus","updateSelectedKeys","children","Array","from","item","index","key","has","propTypes","func","isRequired","array","object","iterable","string","defaultProps","id"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA;;;;;;;;;;AAUA,MAAMA,KAAK,GAAGC,KAAK,IAAI;AACnB,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,gBAFE;AAGFC,IAAAA,KAHE;AAIFC,IAAAA,iBAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA;AANE,MAOFN,KAPJ;AASA,QAAM,CAACO,KAAD,EAAQC,GAAR,IAAe,gCAAa;AAC9BP,IAAAA,UAD8B;AAE9BC,IAAAA,gBAF8B;AAG9BE,IAAAA,iBAH8B;AAI9BE,IAAAA;AAJ8B,GAAb,CAArB;AAMA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAqCJ,KAA3C;AACA,QAAM;AAAEK,IAAAA,WAAF;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA;AAAzB,MAAgDN,GAAtD;AAEA,QAAMO,QAAQ,GAAG,oBAAQ,MAAM;AAC3B,WAAOC,KAAK,CAACC,IAAN,CAAWd,KAAX,EAAkB,CAACe,IAAD,EAAOC,KAAP,KAAiB;AACtC,YAAMC,GAAG,GAAGnB,UAAU,CAACiB,IAAD,EAAOC,KAAP,CAAtB;AAEA,0BACI,6BAAC,aAAD;AACI,QAAA,QAAQ,EAAET,QAAQ,IAAID,MAAM,KAAKW,GADrC;AAEI,QAAA,UAAU,EAAET,YAAY,CAACU,GAAb,CAAiBD,GAAjB,CAFhB;AAGI,QAAA,IAAI,EAAEF,IAHV;AAII,QAAA,SAAS,EAAEC,KAJf;AAKI,QAAA,GAAG,EAAEC,GALT;AAMI,QAAA,MAAM,EAAER,WANZ;AAOI,QAAA,MAAM,EAAEP,UAPZ;AAQI,QAAA,QAAQ,EAAEQ,QARd;AASI,QAAA,QAAQ,EAAEO,GATd;AAUI,QAAA,kBAAkB,EAAEN;AAVxB,QADJ;AAcH,KAjBM,CAAP;AAkBH,GAnBgB,EAmBd,CACCL,MADD,EAECR,UAFD,EAGCS,QAHD,EAICP,KAJD,EAKCS,WALD,EAMCP,UAND,EAOCM,YAPD,EAQCE,QARD,EASCC,kBATD,CAnBc,CAAjB;AA+BA,sBAAO,6BAAC,eAAD,QAAWC,QAAX,CAAP;AACH,CAnDD;AAqDA;;;;;;;;;;;;;;AAYAhB,KAAK,CAACuB,SAAN,GAAkB;AACdrB,EAAAA,UAAU,EAAEsB,gBAAKC,UADH;AAEdtB,EAAAA,gBAAgB,EAAE,0BAAU,CAACuB,gBAAD,EAAQC,iBAAR,CAAV,CAFJ;AAGdvB,EAAAA,KAAK,EAAEwB,kBAASH,UAHF;AAIdpB,EAAAA,iBAAiB,EAAEmB,eAJL;AAKdlB,EAAAA,UAAU,EAAE,0BAAU,CAACkB,eAAD,EAAOK,iBAAP,CAAV,CALE;AAMdtB,EAAAA,cAAc,EAAE,sBAAM,CAAC,UAAD,EAAa,OAAb,CAAN;AANF,CAAlB;AASA;;;;;;AAKAP,KAAK,CAAC8B,YAAN,GAAqB;AACjB5B,EAAAA,UAAU,EAAE,CAAC;AAAE6B,IAAAA;AAAF,GAAD,KAAYA,EADP;AAEjBxB,EAAAA,cAAc,EAAE;AAFC,CAArB;eAKeP,K","sourcesContent":["import React, { Fragment, useMemo } from 'react';\nimport { array, func, object, oneOf, oneOfType, string } from 'prop-types';\n\nimport iterable from '../validators/iterable';\nimport Item from './item';\nimport { useListState } from './useListState';\n\n/**\n * The **Items** component is a container holding all the items\n *\n * @typedef Items\n * @kind functional component\n *\n * @param {props} props\n *\n * @returns{React.Element} A React component container for all the items in list.\n */\nconst Items = props => {\n    const {\n        getItemKey,\n        initialSelection,\n        items,\n        onSelectionChange,\n        renderItem,\n        selectionModel\n    } = props;\n\n    const [state, api] = useListState({\n        getItemKey,\n        initialSelection,\n        onSelectionChange,\n        selectionModel\n    });\n    const { cursor, hasFocus, selectedKeys } = state;\n    const { removeFocus, setFocus, updateSelectedKeys } = api;\n\n    const children = useMemo(() => {\n        return Array.from(items, (item, index) => {\n            const key = getItemKey(item, index);\n\n            return (\n                <Item\n                    hasFocus={hasFocus && cursor === key}\n                    isSelected={selectedKeys.has(key)}\n                    item={item}\n                    itemIndex={index}\n                    key={key}\n                    onBlur={removeFocus}\n                    render={renderItem}\n                    setFocus={setFocus}\n                    uniqueId={key}\n                    updateSelectedKeys={updateSelectedKeys}\n                />\n            );\n        });\n    }, [\n        cursor,\n        getItemKey,\n        hasFocus,\n        items,\n        removeFocus,\n        renderItem,\n        selectedKeys,\n        setFocus,\n        updateSelectedKeys\n    ]);\n\n    return <Fragment>{children}</Fragment>;\n};\n\n/**\n * props for {@link Items}\n *\n * @typedef props\n *\n * @property {func} getItemKey item key value getter\n * @property {array | object} initialSelection A single or list of objects that should start off selected\n * @property {iterable} items An iterable that yields `[key, item]` pairs such as an ES2015 Map\n * @property {func} onSelectionChange A callback that fires when the selection state changes\n * @property {func | string} renderItem A render prop for the list item elements. A tagname string, such as `\"div\"`, is also valid\n * @property {checkbox | radio} selectionModel A string corresponding to a selection model\n */\nItems.propTypes = {\n    getItemKey: func.isRequired,\n    initialSelection: oneOfType([array, object]),\n    items: iterable.isRequired,\n    onSelectionChange: func,\n    renderItem: oneOfType([func, string]),\n    selectionModel: oneOf(['checkbox', 'radio'])\n};\n\n/**\n * default props for {@link Items}\n *\n * @typedef @defaultProps\n */\nItems.defaultProps = {\n    getItemKey: ({ id }) => id,\n    selectionModel: 'radio'\n};\n\nexport default Items;\n"]}