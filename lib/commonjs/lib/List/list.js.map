{"version":3,"sources":["list.js"],"names":["List","props","classes","getItemKey","initialSelection","items","render","renderItem","onSelectionChange","selectionModel","restProps","customProps","handleSelectionChange","selection","Root","Object","keys","root","propTypes","string","func","isRequired","array","object","iterable","defaultProps","id"],"mappings":";;;;;;;AAAA;;AACA;;AAUA;;AACA;;AACA;;;;;;;;;;AAEA;;;;;;;;;;;AAWA,MAAMA,IAAI,GAAGC,KAAK,IAAI;AAClB,QAAM;AACFC,IAAAA,OADE;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,gBAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,MALE;AAMFC,IAAAA,UANE;AAOFC,IAAAA,iBAPE;AAQFC,IAAAA,cARE;AASF,OAAGC;AATD,MAUFT,KAVJ;AAYA,QAAMU,WAAW,GAAG;AAChBT,IAAAA,OADgB;AAEhBC,IAAAA,UAFgB;AAGhBE,IAAAA,KAHgB;AAIhBG,IAAAA,iBAJgB;AAKhBC,IAAAA;AALgB,GAApB;AAQA,QAAMG,qBAAqB,GAAG,wBAC1BC,SAAS,IAAI;AACT,QAAIL,iBAAJ,EAAuB;AACnBA,MAAAA,iBAAiB,CAACK,SAAD,CAAjB;AACH;AACJ,GALyB,EAM1B,CAACL,iBAAD,CAN0B,CAA9B;AASA,QAAMM,IAAI,GAAG,oBACT,MAAM,6BAAeR,MAAf,EAAuBS,MAAM,CAACC,IAAP,CAAYL,WAAZ,CAAvB,CADG,EAET,CAACL,MAAD,EAASK,WAAT,CAFS,CAAb;AAKA,sBACI,6BAAC,IAAD;AAAM,IAAA,SAAS,EAAET,OAAO,CAACe;AAAzB,KAAmCN,WAAnC,EAAoDD,SAApD,gBACI,6BAAC,cAAD;AACI,IAAA,UAAU,EAAEP,UADhB;AAEI,IAAA,gBAAgB,EAAEC,gBAFtB;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,UAAU,EAAEE,UAJhB;AAKI,IAAA,cAAc,EAAEE,cALpB;AAMI,IAAA,iBAAiB,EAAEG;AANvB,IADJ,CADJ;AAYH,CA/CD;AAiDA;;;;;;;;;;;;;;;;;AAeAZ,IAAI,CAACkB,SAAL,GAAiB;AACbhB,EAAAA,OAAO,EAAE,sBAAM;AACXe,IAAAA,IAAI,EAAEE;AADK,GAAN,CADI;AAIbhB,EAAAA,UAAU,EAAEiB,gBAAKC,UAJJ;AAKbjB,EAAAA,gBAAgB,EAAE,0BAAU,CAACkB,gBAAD,EAAQC,iBAAR,CAAV,CALL;AAMblB,EAAAA,KAAK,EAAEmB,kBAASH,UANH;AAObf,EAAAA,MAAM,EAAE,0BAAU,CAACc,eAAD,EAAOD,iBAAP,CAAV,EAA0BE,UAPrB;AAQbd,EAAAA,UAAU,EAAE,0BAAU,CAACa,eAAD,EAAOD,iBAAP,CAAV,CARC;AASbX,EAAAA,iBAAiB,EAAEY,eATN;AAUbX,EAAAA,cAAc,EAAE,sBAAM,CAAC,UAAD,EAAa,OAAb,CAAN;AAVH,CAAjB;AAaA;;;;;;AAKAT,IAAI,CAACyB,YAAL,GAAoB;AAChBvB,EAAAA,OAAO,EAAE,EADO;AAEhBC,EAAAA,UAAU,EAAE,CAAC;AAAEuB,IAAAA;AAAF,GAAD,KAAYA,EAFR;AAGhBrB,EAAAA,KAAK,EAAE,EAHS;AAIhBC,EAAAA,MAAM,EAAE,KAJQ;AAKhBC,EAAAA,UAAU,EAAE,KALI;AAMhBE,EAAAA,cAAc,EAAE;AANA,CAApB;eASeT,I","sourcesContent":["import React, { useMemo, useCallback } from 'react';\nimport {\n    array,\n    func,\n    object,\n    oneOf,\n    oneOfType,\n    shape,\n    string\n} from 'prop-types';\n\nimport fromRenderProp from '../util/fromRenderProp';\nimport iterable from '../validators/iterable';\nimport Items from './items';\n\n/**\n * The **List** component maps a collection of data objects into an array of elements.\n * It also manages the selection and focus of those elements.\n *\n * @typedef List\n * @kind functional component\n *\n * @param {props} props React Component props\n *\n * @returns{React.Element} A React component that displays list data.\n */\nconst List = props => {\n    const {\n        classes,\n        getItemKey,\n        initialSelection,\n        items,\n        render,\n        renderItem,\n        onSelectionChange,\n        selectionModel,\n        ...restProps\n    } = props;\n\n    const customProps = {\n        classes,\n        getItemKey,\n        items,\n        onSelectionChange,\n        selectionModel\n    };\n\n    const handleSelectionChange = useCallback(\n        selection => {\n            if (onSelectionChange) {\n                onSelectionChange(selection);\n            }\n        },\n        [onSelectionChange]\n    );\n\n    const Root = useMemo(\n        () => fromRenderProp(render, Object.keys(customProps)),\n        [render, customProps]\n    );\n\n    return (\n        <Root className={classes.root} {...customProps} {...restProps}>\n            <Items\n                getItemKey={getItemKey}\n                initialSelection={initialSelection}\n                items={items}\n                renderItem={renderItem}\n                selectionModel={selectionModel}\n                onSelectionChange={handleSelectionChange}\n            />\n        </Root>\n    );\n};\n\n/**\n * props for {@link List}\n *\n * @typedef props\n *\n * @property {Object} classes css classes prop for List\n * @property {string} classes.root css classes for List root container\n * @property {func} getItemKey item key value getter\n * @property {array | object} initialSelection A single or list of objects that should start off selected\n * @property {iterable} items An iterable that yields `[key, item]` pairs such as an ES2015 Map\n * @property {func | string} render A render prop for the list element. A tagname string, such as `\"div\"`, is also valid.\n * @property {func | string} renderItem A render prop for the list item elements. A tagname string, such as `\"div\"`, is also valid\n * @property {func} onSelectionChange A callback that fires when the selection state changes\n * @property {checkbox | radio} selectionModel A string corresponding to a selection model\n */\nList.propTypes = {\n    classes: shape({\n        root: string\n    }),\n    getItemKey: func.isRequired,\n    initialSelection: oneOfType([array, object]),\n    items: iterable.isRequired,\n    render: oneOfType([func, string]).isRequired,\n    renderItem: oneOfType([func, string]),\n    onSelectionChange: func,\n    selectionModel: oneOf(['checkbox', 'radio'])\n};\n\n/**\n * default props for {@link List}\n *\n * @typedef defaultProps\n */\nList.defaultProps = {\n    classes: {},\n    getItemKey: ({ id }) => id,\n    items: [],\n    render: 'div',\n    renderItem: 'div',\n    selectionModel: 'radio'\n};\n\nexport default List;\n"]}