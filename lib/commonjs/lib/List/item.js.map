{"version":3,"sources":["item.js"],"names":["Item","props","classes","hasFocus","isSelected","item","itemIndex","render","setFocus","uniqueId","key","updateSelectedKeys","restProps","children","onClick","onFocus","customProps","Root","Object","keys","root","propTypes","string","bool","any","isRequired","number","func","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;AAEA;;;;;;;;;;AAUA,MAAMA,IAAI,GAAGC,KAAK,IAAI;AAClB,QAAM;AACFC,IAAAA,OADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA,SALE;AAMFC,IAAAA,MANE;AAOFC,IAAAA,QAPE;AAQFC,IAAAA,QAAQ,EAAEC,GARR;AASFC,IAAAA,kBATE;AAUF,OAAGC;AAVD,MAWFX,KAXJ;AAaA,QAAMY,QAAQ,GAAG,OAAOR,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,IAAnD;AAEA,QAAMS,OAAO,GAAG,wBAAY,MAAMH,kBAAkB,CAACD,GAAD,CAApC,EAA2C,CACvDA,GADuD,EAEvDC,kBAFuD,CAA3C,CAAhB;AAIA,QAAMI,OAAO,GAAG,wBAAY,MAAMP,QAAQ,CAACE,GAAD,CAA1B,EAAiC,CAACA,GAAD,EAAMF,QAAN,CAAjC,CAAhB;AAEA,QAAMQ,WAAW,GAAG;AAChBd,IAAAA,OADgB;AAEhBC,IAAAA,QAFgB;AAGhBC,IAAAA,UAHgB;AAIhBC,IAAAA,IAJgB;AAKhBC,IAAAA,SALgB;AAMhBQ,IAAAA,OANgB;AAOhBC,IAAAA;AAPgB,GAApB;AAUA,QAAME,IAAI,GAAG,oBACT,MAAM,6BAAeV,MAAf,EAAuBW,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAvB,CADG,EAET,CAACT,MAAD,EAASS,WAAT,CAFS,CAAb;AAKA,sBACI,6BAAC,IAAD;AAAM,IAAA,SAAS,EAAEd,OAAO,CAACkB;AAAzB,KAAmCJ,WAAnC,EAAoDJ,SAApD,GACKC,QADL,CADJ;AAKH,CA1CD;AA4CA;;;;;;;;;;;;;;;;;;AAgBAb,IAAI,CAACqB,SAAL,GAAiB;AACbnB,EAAAA,OAAO,EAAE,sBAAM;AACXkB,IAAAA,IAAI,EAAEE;AADK,GAAN,CADI;AAIbnB,EAAAA,QAAQ,EAAEoB,eAJG;AAKbnB,EAAAA,UAAU,EAAEmB,eALC;AAMblB,EAAAA,IAAI,EAAEmB,eAAIC,UANG;AAObnB,EAAAA,SAAS,EAAEoB,kBAAOD,UAPL;AAQblB,EAAAA,MAAM,EAAE,0BAAU,CAACoB,eAAD,EAAOL,iBAAP,CAAV,EAA0BG,UARrB;AASbjB,EAAAA,QAAQ,EAAEmB,eATG;AAUblB,EAAAA,QAAQ,EAAE,0BAAU,CAACiB,iBAAD,EAASJ,iBAAT,CAAV,EAA4BG,UAVzB;AAWbd,EAAAA,kBAAkB,EAAEgB,gBAAKF;AAXZ,CAAjB;AAcA;;;;;;AAKAzB,IAAI,CAAC4B,YAAL,GAAoB;AAChB1B,EAAAA,OAAO,EAAE,EADO;AAEhBC,EAAAA,QAAQ,EAAE,KAFM;AAGhBC,EAAAA,UAAU,EAAE,KAHI;AAIhBG,EAAAA,MAAM,EAAE;AAJQ,CAApB;eAOeP,I","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { any, bool, func, number, oneOfType, shape, string } from 'prop-types';\n\nimport fromRenderProp from '../util/fromRenderProp';\n\n/**\n * The **Item** Component is reponsible for rendering each item in list\n *\n * @typedef Item\n * @kind functional component\n *\n * @param {props} props\n *\n * @returns{React.Element} A React component for rendering each item in list.\n */\nconst Item = props => {\n    const {\n        classes,\n        hasFocus,\n        isSelected,\n        item,\n        itemIndex,\n        render,\n        setFocus,\n        uniqueId: key,\n        updateSelectedKeys,\n        ...restProps\n    } = props;\n\n    const children = typeof item === 'string' ? item : null;\n\n    const onClick = useCallback(() => updateSelectedKeys(key), [\n        key,\n        updateSelectedKeys\n    ]);\n    const onFocus = useCallback(() => setFocus(key), [key, setFocus]);\n\n    const customProps = {\n        classes,\n        hasFocus,\n        isSelected,\n        item,\n        itemIndex,\n        onClick,\n        onFocus\n    };\n\n    const Root = useMemo(\n        () => fromRenderProp(render, Object.keys(customProps)),\n        [render, customProps]\n    );\n\n    return (\n        <Root className={classes.root} {...customProps} {...restProps}>\n            {children}\n        </Root>\n    );\n};\n\n/**\n * props for {@link Item}\n *\n * @typedef props\n *\n * @property {Object} classes css classes prop for Item\n * @property {string} classes.root css classes for Item root container\n * @property {bool} hasFocus Does the item have focus\n * @property {bool} isSelected Is the item currently selected\n * @property {any} item item data\n * @property {number} itemIndex index of item\n * @property {func | string} render A render prop for the list item. A tagname string, such as `\"div\"`, is also valid\n * @property {func} setFocus A callback for setting focus\n * @property {number | string} uniqueId unique Id given for the item\n * @property {func} updateSelectedKeys A callback for updating selected items\n */\nItem.propTypes = {\n    classes: shape({\n        root: string\n    }),\n    hasFocus: bool,\n    isSelected: bool,\n    item: any.isRequired,\n    itemIndex: number.isRequired,\n    render: oneOfType([func, string]).isRequired,\n    setFocus: func,\n    uniqueId: oneOfType([number, string]).isRequired,\n    updateSelectedKeys: func.isRequired\n};\n\n/**\n * default props for {@link Item}\n *\n * @typedef @defaultProps\n */\nItem.defaultProps = {\n    classes: {},\n    hasFocus: false,\n    isSelected: false,\n    render: 'div'\n};\n\nexport default Item;\n"]}