{"version":3,"sources":["useToasts.js"],"names":["DEFAULT_TIMEOUT","getToastId","type","message","dismissable","actionText","icon","combined","join","hash","i","chr","length","charCodeAt","useToasts","state","dispatch","removeToast","id","payload","addToast","toastProps","timeout","onDismiss","onAction","TypeError","handleDismiss","handleAction","removalTimeoutId","setTimeout","timestamp","Date","now","api"],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useToastContext } from './useToastContext';\n\n// By default all toasts are dismissed after a timeout unless specified by the\n// implementer via `timeout = 0` or `timeout = false`.\nconst DEFAULT_TIMEOUT = 5000;\n\n/**\n * Generates an identifier for a toast by inspecting the properties that\n * differentiate toasts from one another.\n *\n * @typedef getToastId\n * @kind function\n *\n * @param {Object} properties A composite identifier object with properties\n *   that identify a specific toast using its {@link ToastProps}.\n * @param {String} properties.type Maps to the `type` property of {@link ToastProps}\n * @param {String} properties.message Maps to the `message` property of {@link ToastProps}\n * @param {Boolean} properties.dismissable=true Maps to the `dismissable` property of {@link ToastProps}\n * @param {String} properties.actionText='' Maps to the `actionText` property of {@link ToastProps}\n * @param {React.Element} properties.icon=()=>{} Maps to the `icon` property of {@link ToastProps}\n *\n */\nexport const getToastId = ({\n    type,\n    message,\n    dismissable = true,\n    actionText = '',\n    icon = () => {}\n}) => {\n    const combined = [type, message, dismissable, actionText, icon].join();\n\n    // The hashing function below should generally avoid accidental collisions.\n    // It exists to give a \"readable\" identifier to toasts for debugging.\n    let hash = 0;\n    let i;\n    let chr;\n    if (combined.length === 0) return hash;\n    for (i = 0; i < combined.length; i++) {\n        chr = combined.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n};\n\n/**\n * A hook that provides access to the toast state and toast api.\n *\n * @kind function\n *\n * @returns {Object[]} An array containing objects for the toast state and its API: [{@link ../useToastContext#ToastState ToastState}, {@link API}]\n */\nexport const useToasts = () => {\n    const [state, dispatch] = useToastContext();\n\n    /**\n     * Removes a toast from the toast store.\n     *\n     * @function API.removeToast\n     *\n     * @param {Number} id The id of the toast to remove\n     */\n    const removeToast = useCallback(\n        id => {\n            dispatch({\n                type: 'remove',\n                payload: { id }\n            });\n        },\n        [dispatch]\n    );\n\n    /**\n     * Dispatches an add action. Includes all props passed along with a hash id\n     * and a timeout id generated based on the incoming props.\n     *\n     * @function API.addToast\n     *\n     * @param {ToastProps} toastProps The object containing props for adding a toast.\n     *\n     * @returns {Number} id The key referencing the toast in the store\n     */\n    const addToast = useCallback(\n        /**\n         * Object containing data for creating toasts using {@link API.addToast}.\n         *\n         * @typedef ToastProps\n         *\n         * @property {String} type One of the following toast types: 'info', 'warning',\n         *   or 'error'\n         * @property {String} message The message to display on the toast\n         * @property {Bool} [dismissable] Indicates whether the toast is dismissable.\n         *   If `onDismiss` is provided, this property is assumed to be true.\n         *   This property is optional when creating toasts.\n         * @property {React.Element} [icon] The icon element to display.\n         *   This property is optional when creating toasts.\n         * @property {Function} [onDismiss] Callback invoked when a user clicks the\n         *   dismiss icon.\n         *   This property is optional when creating toasts.\n         * @property {String} [actionText] Text to display as a call to action.\n         *   This property is optional when creating toasts.\n         * @property {Function} [onAction] Callback invoked when a user clicks the action\n         *   text.\n         *   This property is optional when creating toasts.\n         * @property {Number} [timeout] Time, in ms, before the toast is automatically\n         *   dismissed.\n         *   If `0` or `false` is passed, the toast will not timeout.\n         *   This property is optional when creating toasts.\n         *\n         */\n        toastProps => {\n            const {\n                dismissable,\n                message,\n                timeout,\n                type,\n                onDismiss,\n                onAction\n            } = toastProps;\n\n            if (!type) {\n                throw new TypeError('toast.type is required');\n            }\n\n            if (!message) {\n                throw new TypeError('toast.message is required');\n            }\n\n            if (\n                !(timeout || timeout === 0 || timeout === false) &&\n                !(onDismiss || dismissable)\n            ) {\n                throw new TypeError(\n                    'Toast should be user-dismissable or have a timeout'\n                );\n            }\n\n            // Generate the id to use in the removal timeout.\n            const id = getToastId(toastProps);\n\n            const handleDismiss = () => {\n                onDismiss ? onDismiss(() => removeToast(id)) : removeToast(id);\n            };\n\n            const handleAction = () =>\n                onAction ? onAction(() => removeToast(id)) : () => {};\n\n            // A timeout of 0 means no auto-dismiss.\n            let removalTimeoutId;\n            if (timeout !== 0 && timeout !== false) {\n                removalTimeoutId = setTimeout(\n                    () => {\n                        handleDismiss();\n                    },\n                    timeout ? timeout : DEFAULT_TIMEOUT\n                );\n            }\n\n            dispatch({\n                type: 'add',\n                payload: {\n                    ...toastProps,\n                    id,\n                    timestamp: Date.now(),\n                    removalTimeoutId,\n                    handleDismiss,\n                    handleAction\n                }\n            });\n\n            return id;\n        },\n        [dispatch, removeToast]\n    );\n\n    /**\n     * The API for managing toasts.\n     * Use this API to add and remove toasts.\n     *\n     * @typedef API\n     * @type Object\n     */\n    const api = useMemo(\n        () => ({\n            addToast,\n            dispatch,\n            removeToast\n        }),\n        [addToast, dispatch, removeToast]\n    );\n\n    return [state, api];\n};\n"]}