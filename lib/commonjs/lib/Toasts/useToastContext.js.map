{"version":3,"sources":["useToastContext.js"],"names":["initialState","toasts","Map","reducer","prevState","action","type","payload","nextToasts","prevToast","get","id","isDuplicate","timestamp","window","clearTimeout","removalTimeoutId","set","delete","ToastContext","wrappedReducer","ToastContextProvider","children","store","useToastContext"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;;;;;;AAOA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IAAIC,GAAJ;AADS,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,SAAS,GAAGJ,YAAb,EAA2BK,MAAM,GAAG,EAApC,KAA2C;AACvD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACI,SAAK,KAAL;AAAY;AACR,cAAME,UAAU,GAAG,IAAIN,GAAJ,CAAQE,SAAS,CAACH,MAAlB,CAAnB;AACA,cAAMQ,SAAS,GAAGD,UAAU,CAACE,GAAX,CAAeH,OAAO,CAACI,EAAvB,CAAlB;AAEA,cAAMC,WAAW,GAAG,CAAC,CAACH,SAAtB;AACA,YAAII,SAAS,GAAGN,OAAO,CAACM,SAAxB;;AACA,YAAID,WAAJ,EAAiB;AACb;AACA;AACAE,UAAAA,MAAM,CAACC,YAAP,CAAoBN,SAAS,CAACO,gBAA9B,EAHa,CAKb;AACA;;AACAH,UAAAA,SAAS,GAAGJ,SAAS,CAACI,SAAtB;AACH;;AAEDL,QAAAA,UAAU,CAACS,GAAX,CAAeV,OAAO,CAACI,EAAvB,EAA2B,EACvB,GAAGJ,OADoB;AAEvBM,UAAAA,SAFuB;AAGvBD,UAAAA;AAHuB,SAA3B;AAMA,eAAO,EACH,GAAGR,SADA;AAEHH,UAAAA,MAAM,EAAEO;AAFL,SAAP;AAIH;;AACD,SAAK,QAAL;AAAe;AACX,cAAMA,UAAU,GAAG,IAAIN,GAAJ,CAAQE,SAAS,CAACH,MAAlB,CAAnB;AAEA,cAAMQ,SAAS,GAAGD,UAAU,CAACE,GAAX,CAAeH,OAAO,CAACI,EAAvB,CAAlB;;AACA,YAAIF,SAAJ,EAAe;AACXK,UAAAA,MAAM,CAACC,YAAP,CAAoBN,SAAS,CAACO,gBAA9B;AACH;;AAEDR,QAAAA,UAAU,CAACU,MAAX,CAAkBX,OAAO,CAACI,EAA1B;AAEA,eAAO,EACH,GAAGP,SADA;AAEHH,UAAAA,MAAM,EAAEO;AAFL,SAAP;AAIH;;AACD;AACI,aAAOJ,SAAP;AA5CR;AA8CH,CAjDD;;AAmDA,MAAMe,YAAY,gBAAG,2BAArB;AAEA,MAAMC,cAAc,GAAG,yBAAWjB,OAAX,CAAvB;AAEA;;;;;;;;;AAQO,MAAMkB,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAClD,QAAMC,KAAK,GAAG,uBAAWH,cAAX,EAA2BpB,YAA3B,CAAd;AACA,sBACI,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEuB;AAA9B,KAAsCD,QAAtC,CADJ;AAGH,CALM;AAOP;;;;;;;;;;;;;;;AAWO,MAAME,eAAe,GAAG,MAAM,uBAAWL,YAAX,CAA9B","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\nimport withLogger from '../util/withLogger';\n\n/**\n * The current state of the toast store.\n *\n * @typedef {Object} ToastState\n *\n * @property {Map} toasts Map object associating an id to toast data\n */\nconst initialState = {\n    toasts: new Map()\n};\n\nconst reducer = (prevState = initialState, action = {}) => {\n    const { type, payload } = action;\n\n    switch (type) {\n        case 'add': {\n            const nextToasts = new Map(prevState.toasts);\n            const prevToast = nextToasts.get(payload.id);\n\n            const isDuplicate = !!prevToast;\n            let timestamp = payload.timestamp;\n            if (isDuplicate) {\n                // If this is a _new_ duplicate toast we need to clear the\n                // previous timeout to prevent premature removal.\n                window.clearTimeout(prevToast.removalTimeoutId);\n\n                // And to retain chronological order of addition, keep the\n                // original timestamp.\n                timestamp = prevToast.timestamp;\n            }\n\n            nextToasts.set(payload.id, {\n                ...payload,\n                timestamp,\n                isDuplicate\n            });\n\n            return {\n                ...prevState,\n                toasts: nextToasts\n            };\n        }\n        case 'remove': {\n            const nextToasts = new Map(prevState.toasts);\n\n            const prevToast = nextToasts.get(payload.id);\n            if (prevToast) {\n                window.clearTimeout(prevToast.removalTimeoutId);\n            }\n\n            nextToasts.delete(payload.id);\n\n            return {\n                ...prevState,\n                toasts: nextToasts\n            };\n        }\n        default:\n            return prevState;\n    }\n};\n\nconst ToastContext = createContext();\n\nconst wrappedReducer = withLogger(reducer);\n\n/**\n * A [context]{@link https://reactjs.org/docs/context.html} provider that\n * provides the toast state object and a dispatch function to toast\n * functionality consumers.\n *\n * @typedef ToastContextProvider\n *\n */\nexport const ToastContextProvider = ({ children }) => {\n    const store = useReducer(wrappedReducer, initialState);\n    return (\n        <ToastContext.Provider value={store}>{children}</ToastContext.Provider>\n    );\n};\n\n/**\n * A hook that provides access to the toast state and dispatch.\n * Any component using this hook _must_ be a child of a {@link ToastContextProvider}.\n *\n * @typedef useToastContext\n *\n * @return {Object[]} An array containing the state and dispatch function: [{@link ToastState}, function]\n *\n * @example\n *   const [toastState, dispatch] = useToastState();\n */\nexport const useToastContext = () => useContext(ToastContext);\n"]}