{"version":3,"sources":["useCreateAccount.js"],"names":["useCreateAccount","props","queries","customerQuery","getCartDetailsQuery","mutations","createAccountMutation","createCartMutation","signInMutation","mergeCartsMutation","initialValues","onSubmit","onCancel","apolloClient","isSubmitting","setIsSubmitting","cartId","createCart","removeCart","getCartDetails","isGettingDetails","isSignedIn","getUserDetails","setToken","fetchCartId","mergeCarts","createAccount","error","createAccountError","fetchPolicy","signIn","signInError","fetchUserDetails","fetchCartDetails","handleCancel","handleSubmit","formValues","sourceCartId","variables","email","customer","firstname","lastname","password","is_subscribed","subscribe","signInResponse","token","data","generateCustomerToken","destinationCartId","process","env","NODE_ENV","console","sanitizedInitialValues","firstName","lastName","rest","errors","Map","isDisabled"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { useApolloClient, useMutation } from '@apollo/client';\n\nimport { useUserContext } from '../../../lib/context/user';\nimport { useCartContext } from '../../../lib/context/cart';\nimport { useAwaitQuery } from '../../../lib/hooks/useAwaitQuery';\nimport { clearCartDataFromCache } from '../../Apollo/clearCartDataFromCache';\nimport { clearCustomerDataFromCache } from '../../Apollo/clearCustomerDataFromCache';\nimport { retrieveCartId } from '../../store/actions/cart';\n\n/**\n * Returns props necessary to render CreateAccount component. In particular this\n * talon handles the submission flow by first doing a pre-submisson validation\n * and then, on success, invokes the `onSubmit` prop, which is usually the action.\n *\n * @param {CreateAccountQueries} props.queries queries used by the talon\n * @param {CreateAccountMutations} props.mutations mutations used by the talon\n * @param {InitialValues} props.initialValues initial values to sanitize and seed the form\n * @param {Function} props.onSubmit the post submit callback\n * @param {Function} props.onCancel the cancel callback\n *\n * @returns {CreateAccountProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useForgotPassword } from '@magento/peregrine/lib/talons/CreateAccount/useCreateAccount.js';\n */\nexport const useCreateAccount = props => {\n    const {\n        queries: { customerQuery, getCartDetailsQuery },\n        mutations: {\n            createAccountMutation,\n            createCartMutation,\n            signInMutation,\n            mergeCartsMutation\n        },\n        initialValues = {},\n        onSubmit,\n        onCancel\n    } = props;\n    const apolloClient = useApolloClient();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [\n        { cartId },\n        { createCart, removeCart, getCartDetails }\n    ] = useCartContext();\n    const [\n        { isGettingDetails, isSignedIn },\n        { getUserDetails, setToken }\n    ] = useUserContext();\n\n    const [fetchCartId] = useMutation(createCartMutation);\n\n    const [mergeCarts] = useMutation(mergeCartsMutation);\n\n    // For create account and sign in mutations, we don't want to cache any\n    // personally identifiable information (PII). So we set fetchPolicy to 'no-cache'.\n    const [createAccount, { error: createAccountError }] = useMutation(\n        createAccountMutation,\n        {\n            fetchPolicy: 'no-cache'\n        }\n    );\n\n    const [signIn, { error: signInError }] = useMutation(signInMutation, {\n        fetchPolicy: 'no-cache'\n    });\n\n    const fetchUserDetails = useAwaitQuery(customerQuery);\n    const fetchCartDetails = useAwaitQuery(getCartDetailsQuery);\n\n    const handleCancel = useCallback(() => {\n        onCancel();\n    }, [onCancel]);\n\n    const handleSubmit = useCallback(\n        async formValues => {\n            setIsSubmitting(true);\n            try {\n                // Get source cart id (guest cart id).\n                const sourceCartId = cartId;\n\n                // Create the account and then sign in.\n                await createAccount({\n                    variables: {\n                        email: formValues.customer.email,\n                        firstname: formValues.customer.firstname,\n                        lastname: formValues.customer.lastname,\n                        password: formValues.password,\n                        is_subscribed: !!formValues.subscribe\n                    }\n                });\n                const signInResponse = await signIn({\n                    variables: {\n                        email: formValues.customer.email,\n                        password: formValues.password\n                    }\n                });\n                const token = signInResponse.data.generateCustomerToken.token;\n                await setToken(token);\n\n                // Clear all cart/customer data from cache and redux.\n                await clearCartDataFromCache(apolloClient);\n                await clearCustomerDataFromCache(apolloClient);\n                await removeCart();\n\n                // Create and get the customer's cart id.\n                await createCart({\n                    fetchCartId\n                });\n                const destinationCartId = await retrieveCartId();\n\n                // Merge the guest cart into the customer cart.\n                await mergeCarts({\n                    variables: {\n                        destinationCartId,\n                        sourceCartId\n                    }\n                });\n\n                // Ensure old stores are updated with any new data.\n                await getUserDetails({ fetchUserDetails });\n                await getCartDetails({\n                    fetchCartId,\n                    fetchCartDetails\n                });\n\n                // Finally, invoke the post-submission callback.\n                if (onSubmit) {\n                    onSubmit();\n                }\n            } catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                setIsSubmitting(false);\n            }\n        },\n        [\n            cartId,\n            apolloClient,\n            removeCart,\n            createAccount,\n            signIn,\n            setToken,\n            createCart,\n            fetchCartId,\n            mergeCarts,\n            getUserDetails,\n            fetchUserDetails,\n            getCartDetails,\n            fetchCartDetails,\n            onSubmit\n        ]\n    );\n\n    const sanitizedInitialValues = useMemo(() => {\n        const { email, firstName, lastName, ...rest } = initialValues;\n\n        return {\n            customer: { email, firstname: firstName, lastname: lastName },\n            ...rest\n        };\n    }, [initialValues]);\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['createAccountQuery', createAccountError],\n                ['signInMutation', signInError]\n            ]),\n        [createAccountError, signInError]\n    );\n\n    return {\n        errors,\n        handleCancel,\n        handleSubmit,\n        initialValues: sanitizedInitialValues,\n        isDisabled: isSubmitting || isGettingDetails,\n        isSignedIn\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL queries for the create account form.\n * This is a type used by the {@link useCreateAccount} talon.\n *\n * @typedef {Object} CreateAccountQueries\n *\n * @property {GraphQLAST} customerQuery query to fetch customer details\n * @property {GraphQLAST} getCartDetailsQuery query to get cart details\n */\n\n/**\n * GraphQL mutations for the create account form.\n * This is a type used by the {@link useCreateAccount} talon.\n *\n * @typedef {Object} CreateAccountMutations\n *\n * @property {GraphQLAST} createAccountMutation mutation for creating new account\n * @property {GraphQLAST} createCartMutation mutation for creating new cart\n * @property {GraphQLAST} mergeCartsMutation mutation for merging carts\n * @property {GraphQLAST} signInMutation mutation for signing\n */\n\n/**\n * Initial values for the create account form.\n * This is a type used by the {@link useCreateAccount} talon.\n *\n * @typedef {Object} InitialValues\n *\n * @property {String} email email id of the user\n * @property {String} firstName first name of the user\n * @property {String} lastName last name of the user\n */\n\n/**\n * Sanitized initial values for the create account form.\n * This is a type used by the {@link useCreateAccount} talon.\n *\n * @typedef {Object} SanitizedInitialValues\n *\n * @property {String} email email id of the user\n * @property {String} firstname first name of the user\n * @property {String} lastname last name of the user\n */\n\n/**\n * Object type returned by the {@link useCreateAccount} talon.\n * It provides props data to use when rendering the create account form component.\n *\n * @typedef {Object} CreateAccountProps\n *\n * @property {Map} errors a map of errors to their respective mutations\n * @property {Function} handleCancel callback function to handle form cancellations\n * @property {Function} handleSubmit callback function to handle form submission\n * @property {SanitizedInitialValues} initialValues initial values for the create account form\n * @property {Boolean} isDisabled true if either details are being fetched or form is being submitted. False otherwise.\n * @property {Boolean} isSignedIn true if user is signed in. False otherwise.\n */\n"]}