{"version":3,"sources":["useCartPage.js"],"names":["useCartPage","props","queries","getCartDetails","toggleDrawer","isSignedIn","cartId","isCartUpdating","setIsCartUpdating","called","data","loading","fetchPolicy","nextFetchPolicy","skip","variables","handleSignIn","hasItems","cart","total_quantity","shouldShowLoadingIndicator","cartItems","items"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;AAkBO,MAAMA,WAAW,GAAGC,KAAK,IAAI;AAChC,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFF,KAFJ;AAIA,QAAM,GAAG;AAAEG,IAAAA;AAAF,GAAH,IAAuB,yBAA7B;AACA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,IAAmB,2BAAzB;AACA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,IAAe,2BAArB;AAEA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC,qBAAS,KAAT,CAA5C;AAEA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAA4B,sBAASR,cAAT,EAAyB;AACvDS,IAAAA,WAAW,EAAE,mBAD0C;AAEvDC,IAAAA,eAAe,EAAE,aAFsC;AAGvDC,IAAAA,IAAI,EAAE,CAACR,MAHgD;AAIvDS,IAAAA,SAAS,EAAE;AAAET,MAAAA;AAAF;AAJ4C,GAAzB,CAAlC;AAOA,QAAMU,YAAY,GAAG,wBAAY,MAAM;AACnC;AACAZ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHoB,EAGlB,CAACA,YAAD,CAHkB,CAArB;AAKA,wBAAU,MAAM;AACZ;AACAI,IAAAA,iBAAiB,CAACG,OAAD,CAAjB;AACH,GAHD,EAGG,CAACA,OAAD,CAHH;AAKA,QAAMM,QAAQ,GAAG,CAAC,EAAEP,IAAI,IAAIA,IAAI,CAACQ,IAAL,CAAUC,cAApB,CAAlB;AACA,QAAMC,0BAA0B,GAAGX,MAAM,IAAIE,OAAV,IAAqB,CAACM,QAAzD;AAEA,QAAMI,SAAS,GAAG,oBAAQ,MAAM;AAC5B,WAAQX,IAAI,IAAIA,IAAI,CAACQ,IAAL,CAAUI,KAAnB,IAA6B,EAApC;AACH,GAFiB,EAEf,CAACZ,IAAD,CAFe,CAAlB;AAIA,SAAO;AACHW,IAAAA,SADG;AAEHJ,IAAAA,QAFG;AAGHD,IAAAA,YAHG;AAIHX,IAAAA,UAJG;AAKHE,IAAAA,cALG;AAMHC,IAAAA,iBANG;AAOHY,IAAAA;AAPG,GAAP;AASH,CA5CM;AA8CP;;AAEA;;;;;;;;;;;AAWA","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\n\n/**\n * This talon contains logic for a cart page component.\n * It performs effects and returns prop data for rendering the component.\n *\n * This talon performs the following effects:\n *\n * - Manages the updating state of the cart while cart details data is being fetched\n *\n * @function\n *\n * @param {Object} props\n * @param {CartPageQueries} props.queries GraphQL queries\n *\n * @returns {CartPageTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useCartPage } from '@magento/peregrine/lib/talons/CartPage/useCartPage';\n */\nexport const useCartPage = props => {\n    const {\n        queries: { getCartDetails }\n    } = props;\n\n    const [, { toggleDrawer }] = useAppContext();\n    const [{ isSignedIn }] = useUserContext();\n    const [{ cartId }] = useCartContext();\n\n    const [isCartUpdating, setIsCartUpdating] = useState(false);\n\n    const { called, data, loading } = useQuery(getCartDetails, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !cartId,\n        variables: { cartId }\n    });\n\n    const handleSignIn = useCallback(() => {\n        // TODO: set navigation state to \"SIGN_IN\". useNavigation:showSignIn doesn't work.\n        toggleDrawer('nav');\n    }, [toggleDrawer]);\n\n    useEffect(() => {\n        // Let the cart page know it is updating while we're waiting on network data.\n        setIsCartUpdating(loading);\n    }, [loading]);\n\n    const hasItems = !!(data && data.cart.total_quantity);\n    const shouldShowLoadingIndicator = called && loading && !hasItems;\n\n    const cartItems = useMemo(() => {\n        return (data && data.cart.items) || [];\n    }, [data]);\n\n    return {\n        cartItems,\n        hasItems,\n        handleSignIn,\n        isSignedIn,\n        isCartUpdating,\n        setIsCartUpdating,\n        shouldShowLoadingIndicator\n    };\n};\n\n/** JSDoc type definitions */\n\n/**\n * GraphQL formatted string queries used in this talon.\n *\n * @typedef {Object} CartPageQueries\n *\n * @property {GraphQLAST} getCartDetails Query for getting the cart details.\n *\n * @see [cartPage.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/cartPage.gql.js}\n * for queries used in Venia\n */\n\n/**\n * Props data to use when rendering a cart page component.\n *\n * @typedef {Object} CartPageTalonProps\n *\n * @property {Array<Object>} cartItems An array of item objects in the cart.\n * @property {boolean} hasItems True if the cart has items. False otherwise.\n * @property {function} handleSignIn Callback function to call for handling a sign in event.\n * @property {boolean} isSignedIn True if the current user is signed in. False otherwise.\n * @property {boolean} isCartUpdating True if the cart is updating. False otherwise.\n * @property {function} setIsCartUpdating Callback function for setting the updating state of the cart page.\n * @property {boolean} shouldShowLoadingIndicator True if the loading indicator should be rendered. False otherwise.\n */\n"]}