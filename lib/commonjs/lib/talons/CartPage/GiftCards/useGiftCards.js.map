{"version":3,"sources":["useGiftCards.js"],"names":["actions","APPLY","CHECK_BALANCE","REMOVE","useGiftCards","props","setIsCartUpdating","mutations","applyCardMutation","removeCardMutation","queries","appliedCardsQuery","cardBalanceQuery","cartId","appliedCardsResult","fetchPolicy","nextFetchPolicy","skip","variables","checkCardBalance","balanceResult","applyCard","applyCardResult","removeCard","removeCardResult","formApi","setFormApi","mostRecentAction","setMostRecentAction","applyGiftCard","giftCardCode","getValue","reset","checkGiftCardBalance","removeGiftCard","err","called","applyCardCalled","loading","applyCardLoading","removeCardCalled","removeCardLoading","shouldDisplayCardBalance","Boolean","data","shouldDisplayCardError","error","checkBalanceData","giftCardAccount","errorLoadingGiftCards","errorRemovingCard","giftCardsData","cart","applied_gift_cards","isLoadingGiftCards","isApplyingCard","isCheckingBalance","isRemovingCard"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\n\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\n\n// To keep track of the most recent action taken.\nconst actions = {\n    APPLY: 'apply',\n    CHECK_BALANCE: 'check',\n    REMOVE: 'remove'\n};\n\n/**\n * Handles the logic for a component that renders a list of gift cards.\n * It performs effects and returns the prop data necessary for rendering\n * the component.\n *\n * This talon performs the following effects:\n *\n * - Fetch the currently applied gift cards for a cart\n * - Manage the updating state of the cart while a gift card is being applied or removed\n *\n * @function\n *\n * @param {Object} props\n * @param {function} props.setIsCartUpdating Callback function for setting the update state for the cart.\n * @param {GiftCardsMutations} props.mutations GraphQL mutations for Gift Cards\n * @param {GiftCardsQueries} props.queries GraphQL queries for Gift Cards\n *\n * @returns {GiftCardsTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useGiftCards } from '@magento/peregrine/lib/talons/CartPage/GiftCards'\n */\nexport const useGiftCards = props => {\n    const {\n        setIsCartUpdating,\n        mutations: { applyCardMutation, removeCardMutation },\n        queries: { appliedCardsQuery, cardBalanceQuery }\n    } = props;\n\n    // We need the cartId for all of our queries and mutations.\n    const [{ cartId }] = useCartContext();\n\n    /*\n     * Apollo hooks.\n     *\n     * Immediately execute the cart query and set up the other graphql actions.\n     */\n    const appliedCardsResult = useQuery(appliedCardsQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !cartId,\n        variables: { cartId }\n    });\n\n    const [checkCardBalance, balanceResult] = useLazyQuery(cardBalanceQuery, {\n        // For security, always fetch this from the network and never cache the\n        // result.\n        fetchPolicy: 'no-cache'\n    });\n\n    const [applyCard, applyCardResult] = useMutation(applyCardMutation);\n    const [removeCard, removeCardResult] = useMutation(removeCardMutation);\n\n    /*\n     *  useState hooks.\n     */\n    const [formApi, setFormApi] = useState();\n    const [mostRecentAction, setMostRecentAction] = useState(null);\n\n    /*\n     * useCallback hooks.\n     */\n    const applyGiftCard = useCallback(async () => {\n        setMostRecentAction(actions.APPLY);\n\n        const giftCardCode = formApi.getValue('card');\n\n        await applyCard({\n            variables: {\n                cartId,\n                giftCardCode\n            }\n        });\n\n        // Clear the input form after successful apply.\n        formApi.reset();\n    }, [formApi, applyCard, cartId]);\n\n    const checkGiftCardBalance = useCallback(() => {\n        setMostRecentAction(actions.CHECK_BALANCE);\n\n        const giftCardCode = formApi.getValue('card');\n\n        checkCardBalance({\n            variables: { giftCardCode }\n        });\n    }, [formApi, checkCardBalance]);\n\n    const removeGiftCard = useCallback(\n        async giftCardCode => {\n            setMostRecentAction(actions.REMOVE);\n\n            try {\n                await removeCard({\n                    variables: {\n                        cartId,\n                        giftCardCode\n                    }\n                });\n            } catch (err) {\n                // do nothing\n            }\n        },\n        [cartId, removeCard]\n    );\n\n    const {\n        called: applyCardCalled,\n        loading: applyCardLoading\n    } = applyCardResult;\n    const {\n        called: removeCardCalled,\n        loading: removeCardLoading\n    } = removeCardResult;\n\n    useEffect(() => {\n        if (applyCardCalled || removeCardCalled) {\n            // If a gift card mutation is in flight, tell the cart.\n            setIsCartUpdating(applyCardLoading || removeCardLoading);\n        }\n    }, [\n        applyCardCalled,\n        applyCardLoading,\n        removeCardCalled,\n        removeCardLoading,\n        setIsCartUpdating\n    ]);\n\n    const shouldDisplayCardBalance =\n        mostRecentAction === actions.CHECK_BALANCE &&\n        Boolean(balanceResult.data);\n\n    // We should only display the last card error if the most recent action was apply or check and they had an error\n    const shouldDisplayCardError =\n        (mostRecentAction === actions.APPLY && applyCardResult.error) ||\n        (mostRecentAction === actions.CHECK_BALANCE && balanceResult.error);\n\n    return {\n        applyGiftCard,\n        checkBalanceData:\n            balanceResult.data && balanceResult.data.giftCardAccount,\n        checkGiftCardBalance,\n        errorLoadingGiftCards: Boolean(appliedCardsResult.error),\n        errorRemovingCard: Boolean(removeCardResult.error),\n        giftCardsData:\n            (appliedCardsResult.data &&\n                appliedCardsResult.data.cart.applied_gift_cards) ||\n            [],\n        isLoadingGiftCards: appliedCardsResult.loading,\n        isApplyingCard: applyCardLoading,\n        isCheckingBalance: balanceResult.loading,\n        isRemovingCard: removeCardLoading,\n        removeGiftCard,\n        setFormApi,\n        shouldDisplayCardBalance,\n        shouldDisplayCardError\n    };\n};\n\n/** JSDoc type definitions */\n\n/**\n * GraphQL mutations for Gift Cards.\n *\n * @typedef {Object} GiftCardsMutations\n *\n * @property {GraphQLAST} applyCardMutation The mutation used to apply a gift card to the cart.\n * @property {GraphQLAST} removeCardMutation The mutation used to remove a gift card from the cart.\n *\n * @see [`giftCardQueries.js`]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/GiftCards/giftCardQueries.js}\n * for queries used in Venia\n */\n\n/**\n * GraphQL queries for Gift Cards.\n *\n * @typedef {Object} GiftCardsQueries\n *\n * @property {GraphQLAST} appliedCardsQuery The query used to get the gift cards currently applied to the cart.\n * @property {GraphQLAST} cardBalanceQuery The query used to get the gift cards currently applied to the cart.\n *\n * @see [`giftCardQueries.js`]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/GiftCards/giftCardQueries.js}\n * for queries used in Venia\n */\n\n/**\n * Props data to use when rendering a list of gift cards.\n *\n * @typedef {Object} GiftCardsTalonProps\n *\n * @property {function}  applyGiftCard - A callback to apply a gift card to the cart.\n * @property {Object}    checkBalanceData - The giftCardAccount object of the most recent successful check balance GraphQL query.\n * @property {function}  checkGiftCardBalance - A callback to check the balance of a gift card.\n * @property {boolean}   errorLoadingGiftCards - Whether there was an error loading the cart's gift cards.\n * @property {boolean}   errorApplyingCard - Whether there was an error applying the gift card.\n * @property {boolean}   errorCheckingBalance - Whether there was an error checking the balance of the gift card.\n * @property {boolean}   errorRemovingCard - Whether there was an error removing the gift card.\n * @property {Array}     giftCardsData - The applied_gift_cards object of the cart query.\n * @property {boolean}   isLoadingGiftCards - Whether the cart's gift card data is loading.\n * @property {boolean}   isApplyingCard - Whether the apply gift card operation is in progress.\n * @property {boolean}   isCheckingBalance - Whether the check gift card balance operation is in progress.\n * @property {boolean}   isRemovingCard - Whether the remove gift card operation is in progress.\n * @property {function}  removeGiftCard - A callback to remove a gift card from the cart.\n * @property {boolean}   shouldDisplayCardBalance - Whether to display the gift card balance to the user\n * @property {boolean}   shouldDisplayCardError - Whether to display an error message under the card input field.\n */\n"]}