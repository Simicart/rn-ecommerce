{"version":3,"sources":["useShippingRadios.js"],"names":["useShippingRadios","props","setIsCartUpdating","selectedShippingMethod","shippingMethods","mutations","setShippingMethodMutation","shippingMethodFieldApi","setShippingMethod","called","setShippingMethodCalled","loading","setShippingMethodLoading","cartId","formattedShippingMethods","map","shippingMethod","serializedValue","carrier_code","method_code","currentMethod","getValue","defaultFirstMethod","setValue","handleShippingSelection","value","carrierCode","methodCode","split","variables"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBO,MAAMA,iBAAiB,GAAGC,KAAK,IAAI;AACtC,QAAM;AACFC,IAAAA,iBADE;AAEFC,IAAAA,sBAFE;AAGFC,IAAAA,eAHE;AAIFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAJT,MAKFL,KALJ;AAMA,QAAMM,sBAAsB,GAAG,2BAAY,QAAZ,CAA/B;AAEA,QAAM,CACFC,iBADE,EAEF;AAAEC,IAAAA,MAAM,EAAEC,uBAAV;AAAmCC,IAAAA,OAAO,EAAEC;AAA5C,GAFE,IAGF,yBAAYN,yBAAZ,CAHJ;AAKA,QAAM,CAAC;AAAEO,IAAAA;AAAF,GAAD,IAAe,2BAArB;AAEA,QAAMC,wBAAwB,GAAGV,eAAe,CAACW,GAAhB,CAAoBC,cAAc,KAAK,EACpE,GAAGA,cADiE;AAEpEC,IAAAA,eAAe,YAAKD,cAAc,CAACE,YAApB,cACXF,cAAc,CAACG,WADJ;AAFqD,GAAL,CAAlC,CAAjC;AAOA,wBAAU,MAAM;AACZ,UAAMC,aAAa,GAAGb,sBAAsB,CAACc,QAAvB,EAAtB;;AACA,QAAI,CAACD,aAAL,EAAoB;AAChB,YAAME,kBAAkB,GAAGR,wBAAwB,CAAC,CAAD,CAAnD;;AACA,UAAIQ,kBAAJ,EAAwB;AACpBf,QAAAA,sBAAsB,CAACgB,QAAvB,CACID,kBAAkB,CAACL,eADvB;AAGH;AACJ;AACJ,GAVD,EAUG,CACCH,wBADD,EAECX,sBAFD,EAGCI,sBAHD,CAVH;AAgBA,QAAMiB,uBAAuB,GAAG,wBAC5BC,KAAK,IAAI;AACL,UAAM,CAACC,WAAD,EAAcC,UAAd,IAA4BF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAlC;AACApB,IAAAA,iBAAiB,CAAC;AACdqB,MAAAA,SAAS,EAAE;AACPhB,QAAAA,MADO;AAEPG,QAAAA,cAAc,EAAE;AACZE,UAAAA,YAAY,EAAEQ,WADF;AAEZP,UAAAA,WAAW,EAAEQ;AAFD;AAFT;AADG,KAAD,CAAjB;AASH,GAZ2B,EAa5B,CAACd,MAAD,EAASL,iBAAT,CAb4B,CAAhC;AAgBA,wBAAU,MAAM;AACZ,QAAIE,uBAAJ,EAA6B;AACzB;AACAR,MAAAA,iBAAiB,CAACU,wBAAD,CAAjB;AACH;AACJ,GALD,EAKG,CAACV,iBAAD,EAAoBQ,uBAApB,EAA6CE,wBAA7C,CALH;AAOA,SAAO;AACHE,IAAAA,wBADG;AAEHU,IAAAA;AAFG,GAAP;AAIH,CAlEM;AAoEP;;AAEA;;;;;;;;;AASA","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useFieldApi } from 'informed';\nimport { useMutation } from '@apollo/client';\n\nimport { useCartContext } from '../../../../context/cart';\n\n/**\n * Contains logic for a component that renders a radio selector for shipping.\n * It performs effects and returns props data used for rendering that component.\n *\n * This talon performs the following effects:\n *\n * - Sets the value of the shipping method to a default value if there is no current method selected\n * - Manage the updating state of the cart while a shipping method is being applied\n *\n * @function\n *\n * @param {Object} props\n * @param {function} props.setIsCartUpdating Function for setting the updating state of the shopping cart\n * @param {String} props.selectedShippingMethod A serialized string of <carrier-code>|<method-code>, eg. usps|priority.\n * @param {Array<Object>} props.shippingMethods An array of available shipping methods\n * @param {ShippingRadiosMutations} props.mutations GraphQL mutations for a shipping radio selector component.\n *\n * @return {ShippingRadiosTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useShippingRadios } from '@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingRadios';\n */\nexport const useShippingRadios = props => {\n    const {\n        setIsCartUpdating,\n        selectedShippingMethod,\n        shippingMethods,\n        mutations: { setShippingMethodMutation }\n    } = props;\n    const shippingMethodFieldApi = useFieldApi('method');\n\n    const [\n        setShippingMethod,\n        { called: setShippingMethodCalled, loading: setShippingMethodLoading }\n    ] = useMutation(setShippingMethodMutation);\n\n    const [{ cartId }] = useCartContext();\n\n    const formattedShippingMethods = shippingMethods.map(shippingMethod => ({\n        ...shippingMethod,\n        serializedValue: `${shippingMethod.carrier_code}|${\n            shippingMethod.method_code\n        }`\n    }));\n\n    useEffect(() => {\n        const currentMethod = shippingMethodFieldApi.getValue();\n        if (!currentMethod) {\n            const defaultFirstMethod = formattedShippingMethods[0];\n            if (defaultFirstMethod) {\n                shippingMethodFieldApi.setValue(\n                    defaultFirstMethod.serializedValue\n                );\n            }\n        }\n    }, [\n        formattedShippingMethods,\n        selectedShippingMethod,\n        shippingMethodFieldApi\n    ]);\n\n    const handleShippingSelection = useCallback(\n        value => {\n            const [carrierCode, methodCode] = value.split('|');\n            setShippingMethod({\n                variables: {\n                    cartId,\n                    shippingMethod: {\n                        carrier_code: carrierCode,\n                        method_code: methodCode\n                    }\n                }\n            });\n        },\n        [cartId, setShippingMethod]\n    );\n\n    useEffect(() => {\n        if (setShippingMethodCalled) {\n            // If a shipping mutation is in flight, tell the cart.\n            setIsCartUpdating(setShippingMethodLoading);\n        }\n    }, [setIsCartUpdating, setShippingMethodCalled, setShippingMethodLoading]);\n\n    return {\n        formattedShippingMethods,\n        handleShippingSelection\n    };\n};\n\n/** JSDoc type definitions */\n\n/**\n * GraphQL mutations for a shipping radio selector component.\n * This is a type used by the {@link useShippingRadios} talon.\n *\n * @typedef {Object} ShippingRadiosMutations\n *\n * @property {GraphQLAST} setShippingMethodMutation Mutation for setting the shipping method on a cart.\n */\n\n/**\n * Object type returned by the {@link useShippingRadios} talon.\n * It provides data to use when rendering a radio selector for shipping methods.\n *\n * @typedef {Object} ShippingRadiosTalonProps\n *\n * @property {Object} formattedShippingMethods Shipping method data that has been formatted.\n * @property {function} handleShippingSelection Callback function for handling shipping selection form updates.\n */\n"]}