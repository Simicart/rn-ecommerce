{"version":3,"sources":["useCouponCode.js"],"names":["useCouponCode","props","setIsCartUpdating","mutations","applyCouponMutation","removeCouponMutation","queries","getAppliedCouponsQuery","cartId","data","error","fetchError","fetchPolicy","nextFetchPolicy","skip","variables","applyCoupon","called","applyCouponCalled","applyError","loading","applyingCoupon","removeCoupon","removeCouponCalled","removeCouponError","removingCoupon","handleApplyCoupon","couponCode","e","handleRemoveCoupon","errors","Map"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBO,MAAMA,aAAa,GAAGC,KAAK,IAAI;AAClC,QAAM;AACFC,IAAAA,iBADE;AAEFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,mBAAF;AAAuBC,MAAAA;AAAvB,KAFT;AAGFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAHP,MAIFN,KAJJ;AAMA,QAAM,CAAC;AAAEO,IAAAA;AAAF,GAAD,IAAe,2BAArB;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAK,EAAEC;AAAf,MAA8B,sBAASJ,sBAAT,EAAiC;AACjEK,IAAAA,WAAW,EAAE,mBADoD;AAEjEC,IAAAA,eAAe,EAAE,aAFgD;AAGjEC,IAAAA,IAAI,EAAE,CAACN,MAH0D;AAIjEO,IAAAA,SAAS,EAAE;AACPP,MAAAA;AADO;AAJsD,GAAjC,CAApC;AASA,QAAM,CACFQ,WADE,EAEF;AACIC,IAAAA,MAAM,EAAEC,iBADZ;AAEIR,IAAAA,KAAK,EAAES,UAFX;AAGIC,IAAAA,OAAO,EAAEC;AAHb,GAFE,IAOF,yBAAYjB,mBAAZ,CAPJ;AASA,QAAM,CACFkB,YADE,EAEF;AACIL,IAAAA,MAAM,EAAEM,kBADZ;AAEIb,IAAAA,KAAK,EAAEc,iBAFX;AAGIJ,IAAAA,OAAO,EAAEK;AAHb,GAFE,IAOF,yBAAYpB,oBAAZ,CAPJ;AASA,QAAMqB,iBAAiB,GAAG,wBACtB,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAA0B;AACtB,QAAI,CAACA,UAAL,EAAiB;;AACjB,QAAI;AACA,YAAMX,WAAW,CAAC;AACdD,QAAAA,SAAS,EAAE;AACPP,UAAAA,MADO;AAEPmB,UAAAA;AAFO;AADG,OAAD,CAAjB;AAMH,KAPD,CAOE,OAAOC,CAAP,EAAU,CACR;AACH;AACJ,GAbqB,EActB,CAACZ,WAAD,EAAcR,MAAd,CAdsB,CAA1B;AAiBA,QAAMqB,kBAAkB,GAAG,wBACvB,MAAMF,UAAN,IAAoB;AAChB,QAAI;AACA,YAAML,YAAY,CAAC;AACfP,QAAAA,SAAS,EAAE;AACPP,UAAAA,MADO;AAEPmB,UAAAA;AAFO;AADI,OAAD,CAAlB;AAMH,KAPD,CAOE,OAAOC,CAAP,EAAU,CACR;AACH;AACJ,GAZsB,EAavB,CAACpB,MAAD,EAASc,YAAT,CAbuB,CAA3B;AAgBA,wBAAU,MAAM;AACZ,QAAIJ,iBAAiB,IAAIK,kBAAzB,EAA6C;AACzC;AACArB,MAAAA,iBAAiB,CAACmB,cAAc,IAAII,cAAnB,CAAjB;AACH;AACJ,GALD,EAKG,CACCP,iBADD,EAECG,cAFD,EAGCE,kBAHD,EAICE,cAJD,EAKCvB,iBALD,CALH,EApEkC,CAiFlC;;AACA,QAAM4B,MAAM,GAAG,oBACX,MACI,IAAIC,GAAJ,CAAQ,CACJ,CAAC,wBAAD,EAA2BpB,UAA3B,CADI,EAEJ,CAAC,qBAAD,EAAwBQ,UAAxB,CAFI,EAGJ,CAAC,sBAAD,EAAyBK,iBAAzB,CAHI,CAAR,CAFO,EAOX,CAACL,UAAD,EAAaR,UAAb,EAAyBa,iBAAzB,CAPW,CAAf;AAUA,SAAO;AACHH,IAAAA,cADG;AAEHZ,IAAAA,IAFG;AAGHqB,IAAAA,MAHG;AAIHJ,IAAAA,iBAJG;AAKHG,IAAAA,kBALG;AAMHJ,IAAAA;AANG,GAAP;AAQH,CApGM;AAsGP;;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAYA","sourcesContent":["import { useCallback, useEffect, useMemo } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\n\n/**\n * This talon contains the logic for a coupon code form component.\n * It performs effects and returns props data for rendering the component.\n *\n * This talon performs the following effects:\n *\n * - Fetch all coupons associated with the cart\n * - Manage the updating state of the cart while a coupon is being applied or removed\n *\n * @function\n *\n * @param {Object} props\n * @param {function} props.setIsCartUpdating Callback function for setting the update state for the cart.\n * @param {CouponCodeMutations} props.mutations GraphQL mutations for a cart's coupon code.\n * @param {CouponCodeQueries} props.queries GraphQL queries for a cart's coupon code.\n *\n * @return {CouponCodeTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useCouponCode } from '@magento/peregrine/lib/talons/CartPage/PriceAdjustments/useCouponCode';\n */\nexport const useCouponCode = props => {\n    const {\n        setIsCartUpdating,\n        mutations: { applyCouponMutation, removeCouponMutation },\n        queries: { getAppliedCouponsQuery }\n    } = props;\n\n    const [{ cartId }] = useCartContext();\n    const { data, error: fetchError } = useQuery(getAppliedCouponsQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !cartId,\n        variables: {\n            cartId\n        }\n    });\n\n    const [\n        applyCoupon,\n        {\n            called: applyCouponCalled,\n            error: applyError,\n            loading: applyingCoupon\n        }\n    ] = useMutation(applyCouponMutation);\n\n    const [\n        removeCoupon,\n        {\n            called: removeCouponCalled,\n            error: removeCouponError,\n            loading: removingCoupon\n        }\n    ] = useMutation(removeCouponMutation);\n\n    const handleApplyCoupon = useCallback(\n        async ({ couponCode }) => {\n            if (!couponCode) return;\n            try {\n                await applyCoupon({\n                    variables: {\n                        cartId,\n                        couponCode\n                    }\n                });\n            } catch (e) {\n                // Error is logged by apollo link - no need to double log.\n            }\n        },\n        [applyCoupon, cartId]\n    );\n\n    const handleRemoveCoupon = useCallback(\n        async couponCode => {\n            try {\n                await removeCoupon({\n                    variables: {\n                        cartId,\n                        couponCode\n                    }\n                });\n            } catch (e) {\n                // Error is logged by apollo link - no need to double log.\n            }\n        },\n        [cartId, removeCoupon]\n    );\n\n    useEffect(() => {\n        if (applyCouponCalled || removeCouponCalled) {\n            // If a coupon mutation is in flight, tell the cart.\n            setIsCartUpdating(applyingCoupon || removingCoupon);\n        }\n    }, [\n        applyCouponCalled,\n        applyingCoupon,\n        removeCouponCalled,\n        removingCoupon,\n        setIsCartUpdating\n    ]);\n\n    // Create a memoized error map and toggle individual errors when they change\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['getAppliedCouponsQuery', fetchError],\n                ['applyCouponMutation', applyError],\n                ['removeCouponMutation', removeCouponError]\n            ]),\n        [applyError, fetchError, removeCouponError]\n    );\n\n    return {\n        applyingCoupon,\n        data,\n        errors,\n        handleApplyCoupon,\n        handleRemoveCoupon,\n        removingCoupon\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL mutations for a cart's coupon code.\n * This is a type used by the {@link useCouponCode} talon.\n *\n * @typedef {Object} CouponCodeMutations\n *\n * @property {GraphQLAST} applyCouponMutation Mutation for applying a coupon code to a cart.\n * @property {GraphQLAST} removeCouponMutation Mutation for removing a coupon code from a cart.\n *\n * @see [CouponCode.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/CouponCode/couponCode.js}\n * for the queries used Venia\n */\n\n/**\n * GraphQL queries for a cart's coupon code.\n * This is a type used by the {@link useCouponCode} talon.\n *\n * @typedef {Object} CouponCodeQueries\n *\n * @property {GraphQLAST} getAppliedCouponsQuery Query to fetch the currently applied coupons for a cart.\n *\n * @see [CouponCode.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/CouponCode/couponCode.js}\n * for the queries used Venia\n */\n\n/**\n * Object type returned by the {@link useCouponCode} talon.\n * It provides props data to use when rendering a coupon code component.\n *\n * @typedef {Object} CouponCodeTalonProps\n *\n * @property {boolean} applyingCoupon True if a coupon is currently being applied. False otherwise.\n * @property {Object} data Data returned from the `getAppliedCouponsQuery`.\n * @property {String} errorMessage If GraphQL error occurs, this value is set.\n * @property {Object} fetchError The error data object returned by a GraphQL query.\n * @property {function} handleApplyCoupon Function to call for handling the application of a coupon code to a cart.\n * @property {function} handleRemoveCoupon Function to call for handling the removal of a coupon code from a cart\n * @property {boolean} removingCoupon True if a coupon code is currently being removed. False otherwise.\n */\n"]}