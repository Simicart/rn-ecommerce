{"version":3,"sources":["useProductForm.js"],"names":["useProductForm","props","cartItem","getConfigurableOptionsQuery","setIsCartUpdating","setVariantPrice","updateConfigurableOptionsMutation","updateQuantityMutation","closeDrawer","cartId","optionSelections","setOptionSelections","Map","updateItemQuantity","called","updateQuantityCalled","error","updateQuantityError","loading","updateQuantityLoading","updateConfigurableOptions","updateConfigurableCalled","updateConfigurableError","updateConfigurableLoading","isSaving","data","variables","sku","product","handleOptionSelection","optionId","selection","nextOptionSelections","initialSelection","configurable_options","find","option","id","value_id","delete","set","configItem","products","items","configurableOptionCodes","optionCodeMap","forEach","attribute_id","attribute_code","selectedVariant","size","has","variants","optionCodes","variantPrice","price","regularPrice","amount","handleSubmit","formValues","cartItemId","parentSku","variantSku","quantity","errors","isLoading"],"mappings":"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","sourcesContent":["import { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\nimport { useAppContext } from '../../../../context/app';\nimport { useCartContext } from '../../../../context/cart';\nimport { findMatchingVariant } from '../../../../util/findMatchingProductVariant';\n\n/**\n * This talon contains logic for a product edit form.\n * It performs effects and returns data for rendering the component inside a modal container.\n *\n * This talon performs the following effects:\n *\n * - Manage the updating state of the cart while form data is being saved\n * - Set the variant price on a product depending on the product's options\n *\n * @function\n *\n * @param {Object} props\n * @param {Object} props.cartItem The cart item to configure on the form\n * @param {GraphQLAST} props.getConfigurableOptionsQuery GraphQL query to get the configurable options for a product.\n * @param {function} props.setIsCartUpdating Function for setting the updating state for the shopping cart.\n * @param {function} props.setVariantPrice Function for setting the variant price on a product.\n * @param {GraphQLAST} props.updateConfigurableOptionsMutation GraphQL mutation for updating the configurable options for a product.\n * @param {GraphQLAST} props.updateQuantityMutation GraphQL mutation for updating the quantity of a product in a cart.\n *\n * @return {ProductFormTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useProductForm } from '@magento/peregrine/lib/talons/CartPage/ProductListing/EditModal/useProductForm';\n */\nexport const useProductForm = props => {\n    const {\n        cartItem,\n        getConfigurableOptionsQuery,\n        setIsCartUpdating,\n        setVariantPrice,\n        updateConfigurableOptionsMutation,\n        updateQuantityMutation\n    } = props;\n\n    const [, { closeDrawer }] = useAppContext();\n    const [{ cartId }] = useCartContext();\n\n    const [optionSelections, setOptionSelections] = useState(new Map());\n\n    const [\n        updateItemQuantity,\n        {\n            called: updateQuantityCalled,\n            error: updateQuantityError,\n            loading: updateQuantityLoading\n        }\n    ] = useMutation(updateQuantityMutation);\n\n    const [\n        updateConfigurableOptions,\n        {\n            called: updateConfigurableCalled,\n            error: updateConfigurableError,\n            loading: updateConfigurableLoading\n        }\n    ] = useMutation(updateConfigurableOptionsMutation);\n\n    const isSaving =\n        (updateQuantityCalled && updateQuantityLoading) ||\n        (updateConfigurableCalled && updateConfigurableLoading);\n\n    useEffect(() => {\n        setIsCartUpdating(isSaving);\n    }, [isSaving, setIsCartUpdating]);\n\n    const { data, error, loading } = useQuery(getConfigurableOptionsQuery, {\n        variables: {\n            sku: cartItem.product.sku\n        }\n    });\n\n    const handleOptionSelection = useCallback(\n        (optionId, selection) => {\n            const nextOptionSelections = new Map([...optionSelections]);\n            const initialSelection = cartItem.configurable_options.find(\n                option => option.id == optionId\n            );\n\n            if (initialSelection.value_id === selection) {\n                nextOptionSelections.delete(optionId);\n            } else {\n                nextOptionSelections.set(optionId, selection);\n            }\n\n            setOptionSelections(nextOptionSelections);\n        },\n        [cartItem.configurable_options, optionSelections]\n    );\n\n    const configItem = !loading && !error ? data.products.items[0] : null;\n    const configurableOptionCodes = useMemo(() => {\n        const optionCodeMap = new Map();\n        if (configItem) {\n            configItem.configurable_options.forEach(option => {\n                optionCodeMap.set(option.attribute_id, option.attribute_code);\n            });\n        }\n\n        return optionCodeMap;\n    }, [configItem]);\n\n    const selectedVariant = useMemo(() => {\n        if (optionSelections.size && configItem) {\n            cartItem.configurable_options.forEach(option => {\n                if (!optionSelections.has(`${option.id}`)) {\n                    optionSelections.set(`${option.id}`, option.value_id);\n                }\n            });\n            return findMatchingVariant({\n                variants: configItem.variants,\n                optionCodes: configurableOptionCodes,\n                optionSelections\n            });\n        }\n    }, [\n        cartItem.configurable_options,\n        configItem,\n        configurableOptionCodes,\n        optionSelections\n    ]);\n\n    useEffect(() => {\n        let variantPrice = null;\n\n        if (selectedVariant) {\n            const { product } = selectedVariant;\n            const { price } = product;\n            const { regularPrice } = price;\n            variantPrice = regularPrice.amount;\n        }\n\n        setVariantPrice(variantPrice);\n    }, [selectedVariant, setVariantPrice]);\n\n    const handleSubmit = useCallback(\n        async formValues => {\n            try {\n                if (selectedVariant) {\n                    await updateConfigurableOptions({\n                        variables: {\n                            cartId,\n                            cartItemId: cartItem.id,\n                            parentSku: cartItem.product.sku,\n                            variantSku: selectedVariant.product.sku,\n                            quantity: formValues.quantity\n                        }\n                    });\n                } else if (formValues.quantity !== cartItem.quantity) {\n                    await updateItemQuantity({\n                        variables: {\n                            cartId,\n                            cartItemId: cartItem.id,\n                            quantity: formValues.quantity\n                        }\n                    });\n                }\n            } catch {\n                return;\n            }\n\n            closeDrawer();\n        },\n        [\n            cartId,\n            cartItem.id,\n            cartItem.product.sku,\n            cartItem.quantity,\n            closeDrawer,\n            selectedVariant,\n            updateConfigurableOptions,\n            updateItemQuantity\n        ]\n    );\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['updateQuantityMutation', updateQuantityError],\n                ['updateConfigurableOptionsMutation', updateConfigurableError]\n            ]),\n        [updateConfigurableError, updateQuantityError]\n    );\n\n    return {\n        configItem,\n        errors,\n        handleOptionSelection,\n        handleSubmit,\n        isLoading: !!loading,\n        isSaving\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * Object type returned by the {@link useProductForm} talon.\n * It provides props data for a product form UI component inside a modal.\n *\n * @typedef {Object} ProductFormTalonProps\n *\n * @property {Object} configItem Cart item to configure\n * @property {Array<Error>} formErrors An array of form errors resulting from a configuration or quantity value\n * @property {function} handleOptionSelection A callback function handling an option selection event\n * @property {function} handleSubmit A callback function for handling form submission\n * @property {boolean} isLoading True if the form is loading data. False otherwise.\n * @property {boolean} isSaving True if the form is saving data. False otherwise.\n */\n"]}