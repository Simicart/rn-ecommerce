{"version":3,"sources":["useProduct.js"],"names":["useProduct","props","item","mutations","removeItemMutation","updateItemQuantityMutation","setActiveEditItem","setIsCartUpdating","flatProduct","flattenProduct","removeItem","called","removeItemCalled","error","removeItemError","loading","removeItemLoading","updateItemQuantity","updateItemLoading","updateError","updateItemCalled","cartId","drawer","toggleDrawer","isFavorite","setIsFavorite","displayError","setDisplayError","derivedErrorMessage","handleToggleFavorites","handleEditItem","handleRemoveFromCart","variables","itemId","id","err","handleUpdateItemQuantity","quantity","errorMessage","isEditable","options","length","product","configurable_options","prices","price","value","unitPrice","currency","name","small_image","stock_status","stockStatus","url_key","urlKey","url_suffix","urlSuffix","url","image"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\nimport { deriveErrorMessage } from '../../../util/deriveErrorMessage';\n\n/**\n * This talon contains logic for a product component used in a product listing component.\n * It performs effects and returns prop data for that component.\n *\n * This talon performs the following effects:\n *\n * - Manage the updating state of the cart while a product is being updated or removed\n * - Reset the current item being edited item when the app drawer is closed\n *\n * @function\n *\n * @param {Object} props\n * @param {ProductItem} props.item Product item data\n * @param {ProductMutations} props.mutations GraphQL mutations for a product in a cart\n * @param {function} props.setActiveEditItem Function for setting the actively editing item\n * @param {function} props.setIsCartUpdating Function for setting the updating state of the cart\n *\n * @return {ProductTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useProduct } from '@magento/peregrine/lib/talons/CartPage/ProductListing/useProduct';\n */\nexport const useProduct = props => {\n    const {\n        item,\n        mutations: { removeItemMutation, updateItemQuantityMutation },\n        setActiveEditItem,\n        setIsCartUpdating\n    } = props;\n\n    const flatProduct = flattenProduct(item);\n\n    const [\n        removeItem,\n        {\n            called: removeItemCalled,\n            error: removeItemError,\n            loading: removeItemLoading\n        }\n    ] = useMutation(removeItemMutation);\n\n    const [\n        updateItemQuantity,\n        {\n            loading: updateItemLoading,\n            error: updateError,\n            called: updateItemCalled\n        }\n    ] = useMutation(updateItemQuantityMutation);\n\n    useEffect(() => {\n        if (updateItemCalled || removeItemCalled) {\n            // If a product mutation is in flight, tell the cart.\n            setIsCartUpdating(updateItemLoading || removeItemLoading);\n        }\n\n        // Reset updating state on unmount\n        return () => setIsCartUpdating(false);\n    }, [\n        removeItemCalled,\n        removeItemLoading,\n        setIsCartUpdating,\n        updateItemCalled,\n        updateItemLoading\n    ]);\n\n    const [{ cartId }] = useCartContext();\n    const [{ drawer }, { toggleDrawer }] = useAppContext();\n\n    const [isFavorite, setIsFavorite] = useState(false);\n\n    // Use local state to determine whether to display errors or not.\n    // Could be replaced by a \"reset mutation\" function from apollo client.\n    // https://github.com/apollographql/apollo-feature-requests/issues/170\n    const [displayError, setDisplayError] = useState(false);\n\n    const derivedErrorMessage = useMemo(() => {\n        return (\n            (displayError &&\n                deriveErrorMessage([updateError, removeItemError])) ||\n            ''\n        );\n    }, [displayError, removeItemError, updateError]);\n\n    const handleToggleFavorites = useCallback(() => {\n        setIsFavorite(!isFavorite);\n    }, [isFavorite]);\n\n    const handleEditItem = useCallback(() => {\n        setActiveEditItem(item);\n        toggleDrawer('product.edit');\n\n        // If there were errors from removing/updating the product, hide them\n        // when we open the modal.\n        setDisplayError(false);\n    }, [item, setActiveEditItem, toggleDrawer]);\n\n    useEffect(() => {\n        if (drawer === null) {\n            setActiveEditItem(null);\n        }\n    }, [drawer, setActiveEditItem]);\n\n    const handleRemoveFromCart = useCallback(() => {\n        try {\n            removeItem({\n                variables: {\n                    cartId,\n                    itemId: item.id\n                }\n            });\n        } catch (err) {\n            // Make sure any errors from the mutation are displayed.\n            setDisplayError(true);\n        }\n    }, [cartId, item.id, removeItem]);\n\n    const handleUpdateItemQuantity = useCallback(\n        async quantity => {\n            try {\n                await updateItemQuantity({\n                    variables: {\n                        cartId,\n                        itemId: item.id,\n                        quantity\n                    }\n                });\n            } catch (err) {\n                // Make sure any errors from the mutation are displayed.\n                setDisplayError(true);\n            }\n        },\n        [cartId, item.id, updateItemQuantity]\n    );\n\n    return {\n        errorMessage: derivedErrorMessage,\n        handleEditItem,\n        handleRemoveFromCart,\n        handleToggleFavorites,\n        handleUpdateItemQuantity,\n        isEditable: !!flatProduct.options.length,\n        isFavorite,\n        product: flatProduct\n    };\n};\n\nconst flattenProduct = item => {\n    const {\n        configurable_options: options = [],\n        prices,\n        product,\n        quantity\n    } = item;\n\n    const { price } = prices;\n    const { value: unitPrice, currency } = price;\n\n    const {\n        name,\n        small_image,\n        stock_status: stockStatus,\n        url_key: urlKey,\n        url_suffix: urlSuffix\n    } = product;\n    const { url: image } = small_image;\n\n    return {\n        currency,\n        image,\n        name,\n        options,\n        quantity,\n        stockStatus,\n        unitPrice,\n        urlKey,\n        urlSuffix\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL mutations for a product in a cart.\n * This is a type used by the {@link useProduct} talon.\n *\n * @typedef {Object} ProductMutations\n *\n * @property {GraphQLAST} removeItemMutation Mutation for removing an item in a cart\n * @property {GraphQLAST} updateItemQuantityMutation Mutation for updating the item quantity in a cart\n *\n * @see [product.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/ProductListing/product.js}\n * to see the mutations used in Venia\n */\n\n/**\n * Object type returned by the {@link useProduct} talon.\n * It provides prop data for rendering a product component on a cart page.\n *\n * @typedef {Object} ProductTalonProps\n *\n * @property {String} errorMessage Error message from an operation perfored on a cart product.\n * @property {function} handleEditItem Function to use for handling when a product is modified.\n * @property {function} handleRemoveFromCart Function to use for handling the removal of a cart product.\n * @property {function} handleToggleFavorites Function to use for handling favorites toggling on a cart product.\n * @property {function} handleUpdateItemQuantity Function to use for handling updates to the product quantity in a cart.\n * @property {boolean} isEditable True if a cart product is editable. False otherwise.\n * @property {boolean} isFavorite True if the cart product is a favorite product. False otherwise.\n * @property {ProductItem} product Cart product data\n */\n\n/**\n * Data about a product item in the cart.\n * This type is used in the {@link ProductTalonProps} type returned by the {@link useProduct} talon.\n *\n * @typedef {Object} ProductItem\n *\n * @property {String} currency The currency associated with the cart product\n * @property {String} image The url for the cart product image\n * @property {String} name The name of the product\n * @property {Array<Object>} options A list of configurable option objects\n * @property {number} quantity The quantity associated with the cart product\n * @property {number} unitPrice The product's unit price\n * @property {String} urlKey The product's url key\n * @property {String} urlSuffix The product's url suffix\n */\n"]}