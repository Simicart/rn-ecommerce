{"version":3,"sources":["useProductListing.js"],"names":["useProductListing","props","queries","getProductListing","cartId","activeEditItem","setActiveEditItem","fetchProductListing","called","data","error","loading","variables","items","cart","isLoading"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBO,MAAMA,iBAAiB,GAAGC,KAAK,IAAI;AACtC,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFF,KAFJ;AAIA,QAAM,CAAC;AAAEG,IAAAA;AAAF,GAAD,IAAe,2BAArB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC,qBAAS,IAAT,CAA5C;AAEA,QAAM,CACFC,mBADE,EAEF;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,GAFE,IAGF,0BAAaR,iBAAb,CAHJ;AAKA,wBAAU,MAAM;AACZ,QAAIC,MAAJ,EAAY;AACRG,MAAAA,mBAAmB,CAAC;AAChBK,QAAAA,SAAS,EAAE;AACPR,UAAAA;AADO;AADK,OAAD,CAAnB;AAKH;AACJ,GARD,EAQG,CAACA,MAAD,EAASG,mBAAT,CARH;AAUA,MAAIM,KAAK,GAAG,EAAZ;;AACA,MAAIL,MAAM,IAAI,CAACE,KAAX,IAAoB,CAACC,OAAzB,EAAkC;AAC9BE,IAAAA,KAAK,GAAGJ,IAAI,CAACK,IAAL,CAAUD,KAAlB;AACH;;AAED,SAAO;AACHR,IAAAA,cADG;AAEHU,IAAAA,SAAS,EAAE,CAAC,CAACJ,OAFV;AAGHE,IAAAA,KAHG;AAIHP,IAAAA;AAJG,GAAP;AAMH,CAlCM;AAoCP;;AAEA;;;;;;;;;;;;AAYA","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\n\nimport { useCartContext } from '../../../context/cart';\n\n/**\n * This talon contains logic for a component that renders a list of products for a cart.\n * It performs effects and returns prop data to render the component on a cart page.\n *\n * This talon performs the following effects:\n *\n * - Fetch product listing data associated with the cart\n * - Log any GraphQL errors to the console\n *\n * @function\n *\n * @param {Object} props\n * @param {ProductListingQueries} props.queries GraphQL queries for getting product listing data.\n *\n * @returns {ProductListingTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useProductListing } from '@magento/peregrine/lib/talons/CartPage/ProductListing/useProductListing';\n */\nexport const useProductListing = props => {\n    const {\n        queries: { getProductListing }\n    } = props;\n\n    const [{ cartId }] = useCartContext();\n    const [activeEditItem, setActiveEditItem] = useState(null);\n\n    const [\n        fetchProductListing,\n        { called, data, error, loading }\n    ] = useLazyQuery(getProductListing);\n\n    useEffect(() => {\n        if (cartId) {\n            fetchProductListing({\n                variables: {\n                    cartId\n                }\n            });\n        }\n    }, [cartId, fetchProductListing]);\n\n    let items = [];\n    if (called && !error && !loading) {\n        items = data.cart.items;\n    }\n\n    return {\n        activeEditItem,\n        isLoading: !!loading,\n        items,\n        setActiveEditItem\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL queries for getting product listing data.\n * This is a type used in the {@link useProductListing} talon.\n *\n * @typedef {Object} ProductListingQueries\n *\n * @property {GraphQLAST} getProductListing Query to get the product list for a cart\n *\n * @see [productListingFragments.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/ProductListing/productListingFragments.js}\n * for the queries used in Venia\n */\n\n/**\n * Object type returned by the {@link useProductListing} talon.\n * It provides props data for a component that renders a product list.\n *\n * @typedef {Object} ProductListingTalonProps\n *\n * @property {Object} activeEditItem The product item currently being edited\n * @property {boolean} isLoading True if the query to get the product listing is still in progress. False otherwise.\n * @property {Array<Object>} items A list of products in a cart\n * @property {function} setActiveEditItem Function for setting the current item to edit\n *\n */\n"]}