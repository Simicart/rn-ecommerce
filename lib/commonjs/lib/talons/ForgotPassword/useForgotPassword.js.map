{"version":3,"sources":["useForgotPassword.js"],"names":["useForgotPassword","props","onCancel","mutations","hasCompleted","setCompleted","forgotPasswordEmail","setForgotPasswordEmail","requestResetEmail","error","requestResetEmailError","loading","isResettingPassword","requestPasswordResetEmailMutation","handleFormSubmit","email","variables","err","handleCancel","formErrors"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;AAaO,MAAMA,iBAAiB,GAAGC,KAAK,IAAI;AACtC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BF,KAAhC;AAEA,QAAM,CAACG,YAAD,EAAeC,YAAf,IAA+B,qBAAS,KAAT,CAArC;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgD,qBAAS,IAAT,CAAtD;AAEA,QAAM,CACFC,iBADE,EAEF;AAAEC,IAAAA,KAAK,EAAEC,sBAAT;AAAiCC,IAAAA,OAAO,EAAEC;AAA1C,GAFE,IAGF,yBAAYT,SAAS,CAACU,iCAAtB,CAHJ;AAKA,QAAMC,gBAAgB,GAAG,wBACrB,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAAqB;AACjB,QAAI;AACA,YAAMP,iBAAiB,CAAC;AAAEQ,QAAAA,SAAS,EAAE;AAAED,UAAAA;AAAF;AAAb,OAAD,CAAvB;AACAR,MAAAA,sBAAsB,CAACQ,KAAD,CAAtB;AACAV,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,KAJD,CAIE,OAAOY,GAAP,EAAY;AACVZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAToB,EAUrB,CAACG,iBAAD,CAVqB,CAAzB;AAaA,QAAMU,YAAY,GAAG,wBAAY,MAAM;AACnChB,IAAAA,QAAQ;AACX,GAFoB,EAElB,CAACA,QAAD,CAFkB,CAArB;AAIA,SAAO;AACHI,IAAAA,mBADG;AAEHa,IAAAA,UAAU,EAAE,CAACT,sBAAD,CAFT;AAGHQ,IAAAA,YAHG;AAIHJ,IAAAA,gBAJG;AAKHV,IAAAA,YALG;AAMHQ,IAAAA;AANG,GAAP;AAQH,CApCM;AAsCP;;AAEA;;;;;;;;;;;;AAYA","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\n/**\n * Returns props necessary to render a ForgotPassword form.\n *\n * @function\n *\n * @param {Function} props.onCancel - callback function to call when user clicks the cancel button\n * @param {RequestPasswordEmailMutations} props.mutations - GraphQL mutations for the forgot password form.\n *\n * @returns {ForgotPasswordProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useForgotPassword } from '@magento/peregrine/lib/talons/ForgotPassword/useForgotPassword.js';\n */\nexport const useForgotPassword = props => {\n    const { onCancel, mutations } = props;\n\n    const [hasCompleted, setCompleted] = useState(false);\n    const [forgotPasswordEmail, setForgotPasswordEmail] = useState(null);\n\n    const [\n        requestResetEmail,\n        { error: requestResetEmailError, loading: isResettingPassword }\n    ] = useMutation(mutations.requestPasswordResetEmailMutation);\n\n    const handleFormSubmit = useCallback(\n        async ({ email }) => {\n            try {\n                await requestResetEmail({ variables: { email } });\n                setForgotPasswordEmail(email);\n                setCompleted(true);\n            } catch (err) {\n                setCompleted(false);\n            }\n        },\n        [requestResetEmail]\n    );\n\n    const handleCancel = useCallback(() => {\n        onCancel();\n    }, [onCancel]);\n\n    return {\n        forgotPasswordEmail,\n        formErrors: [requestResetEmailError],\n        handleCancel,\n        handleFormSubmit,\n        hasCompleted,\n        isResettingPassword\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL mutations for the forgot password form.\n * This is a type used by the {@link useForgotPassword} talon.\n *\n * @typedef {Object} RequestPasswordEmailMutations\n *\n * @property {GraphQLAST} requestPasswordResetEmailMutation mutation for requesting password reset email\n *\n * @see [forgotPassword.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/ForgotPassword/forgotPassword.gql.js}\n * for the query used in Venia\n */\n\n/**\n * Object type returned by the {@link useForgotPassword} talon.\n * It provides props data to use when rendering the forgot password form component.\n *\n * @typedef {Object} ForgotPasswordProps\n *\n * @property {String} forgotPasswordEmail email address of the user whose password reset has been requested\n * @property {Array} formErrors A list of form errors\n * @property {Function} handleCancel Callback function to handle form cancellations\n * @property {Function} handleFormSubmit Callback function to handle form submission\n * @property {Boolean} hasCompleted True if password reset mutation has completed. False otherwise\n * @property {Boolean} isResettingPassword True if password reset mutation is in progress. False otherwise\n */\n"]}