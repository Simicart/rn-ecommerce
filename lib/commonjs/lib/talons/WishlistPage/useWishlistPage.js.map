{"version":3,"sources":["useWishlistPage.js"],"names":["useWishlistPage","props","queries","types","getCustomerWishlistQuery","history","isSignedIn","data","error","fetchPolicy","nextFetchPolicy","skip","derivedWishlists","customer","wishlists","errors","Map","push"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEO,MAAMA,eAAe,GAAGC,KAAK,IAAI;AACpC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBF,KAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAA+BF,OAArC;AAEA,wCAAgBC,KAAhB;AAEA,QAAME,OAAO,GAAG,iCAAhB;AACA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,IAAmB,2BAAzB;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkB,sBAASJ,wBAAT,EAAmC;AACvDK,IAAAA,WAAW,EAAE,mBAD0C;AAEvDC,IAAAA,eAAe,EAAE,aAFsC;AAGvDC,IAAAA,IAAI,EAAE,CAACL;AAHgD,GAAnC,CAAxB;AAMA,QAAMM,gBAAgB,GAAG,oBAAQ,MAAM;AACnC,WAAQL,IAAI,IAAIA,IAAI,CAACM,QAAL,CAAcC,SAAvB,IAAqC,EAA5C;AACH,GAFwB,EAEtB,CAACP,IAAD,CAFsB,CAAzB;AAIA,QAAMQ,MAAM,GAAG,oBAAQ,MAAM;AACzB,WAAO,IAAIC,GAAJ,CAAQ,CAAC,CAAC,0BAAD,EAA6BR,KAA7B,CAAD,CAAR,CAAP;AACH,GAFc,EAEZ,CAACA,KAAD,CAFY,CAAf;AAIA,wBAAU,MAAM;AACZ,QAAI,CAACF,UAAL,EAAiB;AACbD,MAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACH;AACJ,GAJD,EAIG,CAACZ,OAAD,EAAUC,UAAV,CAJH;AAMA,SAAO;AACHS,IAAAA,MADG;AAEHD,IAAAA,SAAS,EAAEF;AAFR,GAAP;AAIH,CAjCM","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useUserContext } from '../../context/user';\nimport { useTypePolicies } from '../../hooks/useTypePolicies';\n\nexport const useWishlistPage = props => {\n    const { queries, types } = props;\n    const { getCustomerWishlistQuery } = queries;\n\n    useTypePolicies(types);\n\n    const history = useHistory();\n    const [{ isSignedIn }] = useUserContext();\n\n    const { data, error } = useQuery(getCustomerWishlistQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !isSignedIn\n    });\n\n    const derivedWishlists = useMemo(() => {\n        return (data && data.customer.wishlists) || [];\n    }, [data]);\n\n    const errors = useMemo(() => {\n        return new Map([['getCustomerWishlistQuery', error]]);\n    }, [error]);\n\n    useEffect(() => {\n        if (!isSignedIn) {\n            history.push('/');\n        }\n    }, [history, isSignedIn]);\n\n    return {\n        errors,\n        wishlists: derivedWishlists\n    };\n};\n"]}