{"version":3,"sources":["usePaymentsFormItems.js"],"names":["usePaymentsFormItems","props","isReady","setIsReady","isSubmitting","setIsSubmitting","onCancel","onSubmit","formState","addressDiffers","values","addresses_same","handleCancel","handleError","handleSuccess","value","sameAsShippingAddress","billingAddress","city","email","firstname","lastname","postcode","region_code","street","telephone","paymentMethod","code","data","isDisabled"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAMO,MAAMA,oBAAoB,GAAGC,KAAK,IAAI;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAAS,KAAT,CAA9B;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA,QAAjC;AAA2CC,IAAAA;AAA3C,MAAwDN,KAA9D,CAFyC,CAIzC;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMO,SAAS,GAAG,6BAAlB;AACA,QAAMC,cAAc,GAAGD,SAAS,CAACE,MAAV,CAAiBC,cAAjB,KAAoC,KAA3D;AAEA,QAAMC,YAAY,GAAG,wBAAY,MAAM;AACnCN,IAAAA,QAAQ;AACX,GAFoB,EAElB,CAACA,QAAD,CAFkB,CAArB;AAIA,QAAMO,WAAW,GAAG,wBAAY,MAAM;AAClCR,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GAFmB,EAEjB,CAACA,eAAD,CAFiB,CAApB,CAjByC,CAqBzC;AACA;AACA;AACA;;AACA,QAAMS,aAAa,GAAG,wBAClBC,KAAK,IAAI;AACLV,IAAAA,eAAe,CAAC,KAAD,CAAf;AACA,UAAMW,qBAAqB,GAAGR,SAAS,CAACE,MAAV,CAAiB,gBAAjB,CAA9B;AACA,QAAIO,cAAJ;;AACA,QAAI,CAACD,qBAAL,EAA4B;AACxBC,MAAAA,cAAc,GAAG;AACbC,QAAAA,IAAI,EAAEV,SAAS,CAACE,MAAV,CAAiB,MAAjB,CADO;AAEbS,QAAAA,KAAK,EAAEX,SAAS,CAACE,MAAV,CAAiB,OAAjB,CAFM;AAGbU,QAAAA,SAAS,EAAEZ,SAAS,CAACE,MAAV,CAAiB,WAAjB,CAHE;AAIbW,QAAAA,QAAQ,EAAEb,SAAS,CAACE,MAAV,CAAiB,UAAjB,CAJG;AAKbY,QAAAA,QAAQ,EAAEd,SAAS,CAACE,MAAV,CAAiB,UAAjB,CALG;AAMba,QAAAA,WAAW,EAAEf,SAAS,CAACE,MAAV,CAAiB,aAAjB,CANA;AAObc,QAAAA,MAAM,EAAEhB,SAAS,CAACE,MAAV,CAAiB,QAAjB,CAPK;AAQbe,QAAAA,SAAS,EAAEjB,SAAS,CAACE,MAAV,CAAiB,WAAjB;AARE,OAAjB;AAUH,KAXD,MAWO;AACHO,MAAAA,cAAc,GAAG;AACbD,QAAAA;AADa,OAAjB;AAGH;;AACDT,IAAAA,QAAQ,CAAC;AACLU,MAAAA,cADK;AAELS,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,WADK;AAEXC,QAAAA,IAAI,EAAEb;AAFK;AAFV,KAAD,CAAR;AAOH,GA5BiB,EA6BlB,CAACP,SAAS,CAACE,MAAX,EAAmBL,eAAnB,EAAoCE,QAApC,CA7BkB,CAAtB;AAgCA,SAAO;AACHE,IAAAA,cADG;AAEHG,IAAAA,YAFG;AAGHC,IAAAA,WAHG;AAIHC,IAAAA,aAJG;AAKHe,IAAAA,UAAU,EAAE,CAAC3B,OAAD,IAAYE,YALrB;AAMHD,IAAAA;AANG,GAAP;AAQH,CAjEM","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useFormState } from 'informed';\n\n/**\n *\n * @param {boolean} props.isSubmitting whether or not the payment form items are\n * @param {function} props.setIsSubmitting callback for setting submitting state\n * @param {function} props.onSubmit submit callback\n */\nexport const usePaymentsFormItems = props => {\n    const [isReady, setIsReady] = useState(false);\n    const { isSubmitting, setIsSubmitting, onCancel, onSubmit } = props;\n\n    // Currently form state toggles dirty from false to true because of how\n    // informed is implemented. This effectively causes this child components\n    // to re-render multiple times. Keep tabs on the following issue:\n    //   https://github.com/joepuzzo/informed/issues/138\n    // If they resolve it or we move away from informed we can probably get some\n    // extra performance.\n    const formState = useFormState();\n    const addressDiffers = formState.values.addresses_same === false;\n\n    const handleCancel = useCallback(() => {\n        onCancel();\n    }, [onCancel]);\n\n    const handleError = useCallback(() => {\n        setIsSubmitting(false);\n    }, [setIsSubmitting]);\n\n    // The success callback. Unfortunately since form state is created first and\n    // then modified when using initialValues any component who uses this\n    // callback will be rendered multiple times on first render. See above\n    // comments for more info.\n    const handleSuccess = useCallback(\n        value => {\n            setIsSubmitting(false);\n            const sameAsShippingAddress = formState.values['addresses_same'];\n            let billingAddress;\n            if (!sameAsShippingAddress) {\n                billingAddress = {\n                    city: formState.values['city'],\n                    email: formState.values['email'],\n                    firstname: formState.values['firstname'],\n                    lastname: formState.values['lastname'],\n                    postcode: formState.values['postcode'],\n                    region_code: formState.values['region_code'],\n                    street: formState.values['street'],\n                    telephone: formState.values['telephone']\n                };\n            } else {\n                billingAddress = {\n                    sameAsShippingAddress\n                };\n            }\n            onSubmit({\n                billingAddress,\n                paymentMethod: {\n                    code: 'braintree',\n                    data: value\n                }\n            });\n        },\n        [formState.values, setIsSubmitting, onSubmit]\n    );\n\n    return {\n        addressDiffers,\n        handleCancel,\n        handleError,\n        handleSuccess,\n        isDisabled: !isReady || isSubmitting,\n        setIsReady\n    };\n};\n"]}