{"version":3,"sources":["useOrderHistoryPage.js"],"names":["useOrderHistoryPage","props","queries","types","getCustomerOrdersQuery","actions","setPageLoading","history","isSignedIn","data","loading","fetchPolicy","skip","isLoadingWithoutData","isBackgroundLoading","orders","customer","items","push"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEO,MAAMA,mBAAmB,GAAGC,KAAK,IAAI;AACxC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBF,KAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAA6BF,OAAnC;AAEA,wCAAgBC,KAAhB;AAEA,QAAM,GAEF;AACIE,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADb,GAFE,IAKF,yBALJ;AAMA,QAAMC,OAAO,GAAG,iCAAhB;AACA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,IAAmB,2BAAzB;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoB,sBAASN,sBAAT,EAAiC;AACvDO,IAAAA,WAAW,EAAE,mBAD0C;AAEvDC,IAAAA,IAAI,EAAE,CAACJ;AAFgD,GAAjC,CAA1B;AAKA,QAAMK,oBAAoB,GAAG,CAACJ,IAAD,IAASC,OAAtC;AACA,QAAMI,mBAAmB,GAAG,CAAC,CAACL,IAAF,IAAUC,OAAtC;AACA,QAAMK,MAAM,GAAG,oBAAQ,MAAM;AACzB,QAAIN,IAAJ,EAAU;AACN,aAAOA,IAAI,CAACO,QAAL,CAAcD,MAAd,CAAqBE,KAA5B;AACH;;AAED,WAAO,EAAP;AACH,GANc,EAMZ,CAACR,IAAD,CANY,CAAf,CAtBwC,CA8BxC;;AACA,wBAAU,MAAM;AACZ,QAAI,CAACD,UAAL,EAAiB;AACbD,MAAAA,OAAO,CAACW,IAAR,CAAa,GAAb;AACH;AACJ,GAJD,EAIG,CAACX,OAAD,EAAUC,UAAV,CAJH,EA/BwC,CAqCxC;;AACA,wBAAU,MAAM;AACZF,IAAAA,cAAc,CAACQ,mBAAD,CAAd;AACH,GAFD,EAEG,CAACA,mBAAD,EAAsBR,cAAtB,CAFH;AAIA,SAAO;AACHO,IAAAA,oBADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CA9CM","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useAppContext } from '../../context/app';\nimport { useUserContext } from '../../context/user';\nimport { useTypePolicies } from '../../hooks/useTypePolicies';\n\nexport const useOrderHistoryPage = props => {\n    const { queries, types } = props;\n    const { getCustomerOrdersQuery } = queries;\n\n    useTypePolicies(types);\n\n    const [\n        ,\n        {\n            actions: { setPageLoading }\n        }\n    ] = useAppContext();\n    const history = useHistory();\n    const [{ isSignedIn }] = useUserContext();\n\n    const { data, loading } = useQuery(getCustomerOrdersQuery, {\n        fetchPolicy: 'cache-and-network',\n        skip: !isSignedIn\n    });\n\n    const isLoadingWithoutData = !data && loading;\n    const isBackgroundLoading = !!data && loading;\n    const orders = useMemo(() => {\n        if (data) {\n            return data.customer.orders.items;\n        }\n\n        return [];\n    }, [data]);\n\n    // If the user is no longer signed in, redirect to the home page.\n    useEffect(() => {\n        if (!isSignedIn) {\n            history.push('/');\n        }\n    }, [history, isSignedIn]);\n\n    // Update the page indicator if the GraphQL query is in flight.\n    useEffect(() => {\n        setPageLoading(isBackgroundLoading);\n    }, [isBackgroundLoading, setPageLoading]);\n\n    return {\n        isLoadingWithoutData,\n        orders\n    };\n};\n"]}