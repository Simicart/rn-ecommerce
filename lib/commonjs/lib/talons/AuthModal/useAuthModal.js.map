{"version":3,"sources":["useAuthModal.js"],"names":["UNAUTHED_ONLY","useAuthModal","props","closeDrawer","showCreateAccount","showForgotPassword","showMainMenu","showMyAccount","showSignIn","signOutMutation","view","apolloClient","isSigningOut","setIsSigningOut","username","setUsername","currentUser","isSignedIn","signOut","revokeToken","history","email","includes","handleClose","handleCancel","handleCreateAccount","handleSignOut","go"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA,MAAMA,aAAa,GAAG,CAAC,gBAAD,EAAmB,iBAAnB,EAAsC,SAAtC,CAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AACjC,QAAM;AACFC,IAAAA,WADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,kBAHE;AAIFC,IAAAA,YAJE;AAKFC,IAAAA,aALE;AAMFC,IAAAA,UANE;AAOFC,IAAAA,eAPE;AAQFC,IAAAA;AARE,MASFR,KATJ;AAWA,QAAMS,YAAY,GAAG,8BAArB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC,qBAAS,KAAT,CAAxC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B,qBAAS,EAAT,CAAhC;AACA,QAAM,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,IAA6C,2BAAnD;AACA,QAAM,CAACC,WAAD,IAAgB,yBAAYV,eAAZ,CAAtB;AACA,QAAMW,OAAO,GAAG,iCAAhB,CAjBiC,CAmBjC;AACA;;AACA,wBAAU,MAAM;AACZ,QAAIJ,WAAW,IAAIA,WAAW,CAACK,KAA3B,IAAoCrB,aAAa,CAACsB,QAAd,CAAuBZ,IAAvB,CAAxC,EAAsE;AAClEH,MAAAA,aAAa;AAChB;AACJ,GAJD,EAIG,CAACS,WAAD,EAAcT,aAAd,EAA6BG,IAA7B,CAJH,EArBiC,CA2BjC;AACA;;AACA,wBAAU,MAAM;AACZ,QAAI,CAACO,UAAD,IAAeP,IAAI,KAAK,YAAxB,IAAwC,CAACE,YAA7C,EAA2D;AACvDN,MAAAA,YAAY;AACf;AACJ,GAJD,EAIG,CAACW,UAAD,EAAaL,YAAb,EAA2BN,YAA3B,EAAyCI,IAAzC,CAJH;AAMA,QAAMa,WAAW,GAAG,wBAAY,MAAM;AAClCjB,IAAAA,YAAY;AACZH,IAAAA,WAAW;AACd,GAHmB,EAGjB,CAACA,WAAD,EAAcG,YAAd,CAHiB,CAApB;AAKA,QAAMkB,YAAY,GAAG,wBAAY,MAAM;AACnChB,IAAAA,UAAU;AACb,GAFoB,EAElB,CAACA,UAAD,CAFkB,CAArB;AAIA,QAAMiB,mBAAmB,GAAG,wBAAY,MAAM;AAC1ClB,IAAAA,aAAa;AAChB,GAF2B,EAEzB,CAACA,aAAD,CAFyB,CAA5B;AAIA,QAAMmB,aAAa,GAAG,wBAAY,YAAY;AAC1Cb,IAAAA,eAAe,CAAC,IAAD,CAAf,CAD0C,CAG1C;;AACA,UAAMK,OAAO,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAb;AACA,UAAM,oDAAuBR,YAAvB,CAAN;AACA,UAAM,4DAA2BA,YAA3B,CAAN,CAN0C,CAQ1C;AACA;AACA;;AACAS,IAAAA,OAAO,CAACO,EAAR,CAAW,CAAX;AACH,GAZqB,EAYnB,CAAChB,YAAD,EAAeS,OAAf,EAAwBD,WAAxB,EAAqCD,OAArC,CAZmB,CAAtB;AAcA,SAAO;AACHM,IAAAA,YADG;AAEHD,IAAAA,WAFG;AAGHE,IAAAA,mBAHG;AAIHC,IAAAA,aAJG;AAKHX,IAAAA,WALG;AAMHX,IAAAA,iBANG;AAOHC,IAAAA,kBAPG;AAQHE,IAAAA,aARG;AASHO,IAAAA;AATG,GAAP;AAWH,CAzEM","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useApolloClient, useMutation } from '@apollo/client';\n\nimport { useUserContext } from '../../context/user';\nimport { clearCartDataFromCache } from '../../Apollo/clearCartDataFromCache';\nimport { clearCustomerDataFromCache } from '../../Apollo/clearCustomerDataFromCache';\n\nconst UNAUTHED_ONLY = ['CREATE_ACCOUNT', 'FORGOT_PASSWORD', 'SIGN_IN'];\n\n/**\n * Returns props necessary to render an AuthModal component.\n *\n * @param {object} props\n * @param {function} props.closeDrawer - callback that closes drawer\n * @param {function} props.showCreateAccount - callback that shows create account view\n * @param {function} props.showForgotPassword - callback that shows forgot password view\n * @param {function} props.showMainMenu - callback that shows main menu view\n * @param {function} props.showMyAccount - callback that shows my account view\n * @param {function} props.showSignIn - callback that shows signin view\n * @param {DocumentNode} props.signOutMutation - mutation to call when signing out\n * @param {string} props.view - string that represents the current view\n *\n * @return {{\n *  handleClose: function,\n *  handleCreateAccount: function,\n *  handleSignOut: function,\n *  setUsername: function,\n *  showCreateAccount: function,\n *  showForgotPassword: function,\n *  showMyAccount: function,\n *  username: string\n * }}\n */\nexport const useAuthModal = props => {\n    const {\n        closeDrawer,\n        showCreateAccount,\n        showForgotPassword,\n        showMainMenu,\n        showMyAccount,\n        showSignIn,\n        signOutMutation,\n        view\n    } = props;\n\n    const apolloClient = useApolloClient();\n    const [isSigningOut, setIsSigningOut] = useState(false);\n    const [username, setUsername] = useState('');\n    const [{ currentUser, isSignedIn }, { signOut }] = useUserContext();\n    const [revokeToken] = useMutation(signOutMutation);\n    const history = useHistory();\n\n    // If the user is authed, the only valid view is \"MY_ACCOUNT\".\n    // view an also be `MENU` but in that case we don't want to act.\n    useEffect(() => {\n        if (currentUser && currentUser.email && UNAUTHED_ONLY.includes(view)) {\n            showMyAccount();\n        }\n    }, [currentUser, showMyAccount, view]);\n\n    // If the user token was invalidated by way of expiration, we need to reset\n    // the view back to the main menu.\n    useEffect(() => {\n        if (!isSignedIn && view === 'MY_ACCOUNT' && !isSigningOut) {\n            showMainMenu();\n        }\n    }, [isSignedIn, isSigningOut, showMainMenu, view]);\n\n    const handleClose = useCallback(() => {\n        showMainMenu();\n        closeDrawer();\n    }, [closeDrawer, showMainMenu]);\n\n    const handleCancel = useCallback(() => {\n        showSignIn();\n    }, [showSignIn]);\n\n    const handleCreateAccount = useCallback(() => {\n        showMyAccount();\n    }, [showMyAccount]);\n\n    const handleSignOut = useCallback(async () => {\n        setIsSigningOut(true);\n\n        // Delete cart/user data from the redux store.\n        await signOut({ revokeToken });\n        await clearCartDataFromCache(apolloClient);\n        await clearCustomerDataFromCache(apolloClient);\n\n        // Refresh the page as a way to say \"re-initialize\". An alternative\n        // would be to call apolloClient.resetStore() but that would require\n        // a large refactor.\n        history.go(0);\n    }, [apolloClient, history, revokeToken, signOut]);\n\n    return {\n        handleCancel,\n        handleClose,\n        handleCreateAccount,\n        handleSignOut,\n        setUsername,\n        showCreateAccount,\n        showForgotPassword,\n        showMyAccount,\n        username\n    };\n};\n"]}