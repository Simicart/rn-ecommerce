{"version":3,"sources":["useSignIn.js"],"names":["useSignIn","props","createCartMutation","customerQuery","getCartDetailsQuery","mergeCartsMutation","setDefaultUsername","showCreateAccount","showForgotPassword","signInMutation","apolloClient","isSigningIn","setIsSigningIn","cartId","createCart","removeCart","getCartDetails","isGettingDetails","getDetailsError","getUserDetails","setToken","signIn","error","signInError","fetchPolicy","fetchCartId","mergeCarts","fetchUserDetails","fetchCartDetails","formApiRef","setFormApi","api","current","handleSubmit","email","password","sourceCartId","signInResponse","variables","token","data","generateCustomerToken","destinationCartId","process","env","NODE_ENV","console","handleForgotPassword","formApi","getValue","handleCreateAccount","errors","Map","isBusy"],"mappings":"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","sourcesContent":["import { useCallback, useRef, useState, useMemo } from 'react';\nimport { useApolloClient, useMutation } from '@apollo/client';\n\nimport { retrieveCartId } from '../../store/actions/cart';\nimport { useUserContext } from '../../context/user';\nimport { useCartContext } from '../../context/cart';\nimport { useAwaitQuery } from '../../hooks/useAwaitQuery';\nimport { clearCartDataFromCache } from '../../Apollo/clearCartDataFromCache';\nimport { clearCustomerDataFromCache } from '../../Apollo/clearCustomerDataFromCache';\n\nexport const useSignIn = props => {\n    const {\n        createCartMutation,\n        customerQuery,\n        getCartDetailsQuery,\n        mergeCartsMutation,\n        setDefaultUsername,\n        showCreateAccount,\n        showForgotPassword,\n        signInMutation\n    } = props;\n\n    const apolloClient = useApolloClient();\n    const [isSigningIn, setIsSigningIn] = useState(false);\n\n    const [\n        { cartId },\n        { createCart, removeCart, getCartDetails }\n    ] = useCartContext();\n\n    const [\n        { isGettingDetails, getDetailsError },\n        { getUserDetails, setToken }\n    ] = useUserContext();\n\n    const [signIn, { error: signInError }] = useMutation(signInMutation, {\n        fetchPolicy: 'no-cache'\n    });\n\n    const [fetchCartId] = useMutation(createCartMutation);\n    const [mergeCarts] = useMutation(mergeCartsMutation);\n    const fetchUserDetails = useAwaitQuery(customerQuery);\n    const fetchCartDetails = useAwaitQuery(getCartDetailsQuery);\n\n    const formApiRef = useRef(null);\n    const setFormApi = useCallback(api => (formApiRef.current = api), []);\n\n    const handleSubmit = useCallback(\n        async ({ email, password }) => {\n            setIsSigningIn(true);\n            try {\n                // Get source cart id (guest cart id).\n                const sourceCartId = cartId;\n\n                // Sign in and set the token.\n                const signInResponse = await signIn({\n                    variables: { email, password }\n                });\n                const token = signInResponse.data.generateCustomerToken.token;\n                await setToken(token);\n\n                // Clear all cart/customer data from cache and redux.\n                await clearCartDataFromCache(apolloClient);\n                await clearCustomerDataFromCache(apolloClient);\n                await removeCart();\n\n                // Create and get the customer's cart id.\n                await createCart({\n                    fetchCartId\n                });\n                const destinationCartId = await retrieveCartId();\n\n                // Merge the guest cart into the customer cart.\n                await mergeCarts({\n                    variables: {\n                        destinationCartId,\n                        sourceCartId\n                    }\n                });\n\n                // Ensure old stores are updated with any new data.\n                getUserDetails({ fetchUserDetails });\n                getCartDetails({ fetchCartId, fetchCartDetails });\n            } catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n\n                setIsSigningIn(false);\n            }\n        },\n        [\n            cartId,\n            apolloClient,\n            removeCart,\n            signIn,\n            setToken,\n            createCart,\n            fetchCartId,\n            mergeCarts,\n            getUserDetails,\n            fetchUserDetails,\n            getCartDetails,\n            fetchCartDetails\n        ]\n    );\n\n    const handleForgotPassword = useCallback(() => {\n        const { current: formApi } = formApiRef;\n\n        if (formApi) {\n            setDefaultUsername(formApi.getValue('email'));\n        }\n\n        showForgotPassword();\n    }, [setDefaultUsername, showForgotPassword]);\n\n    const handleCreateAccount = useCallback(() => {\n        const { current: formApi } = formApiRef;\n\n        if (formApi) {\n            setDefaultUsername(formApi.getValue('email'));\n        }\n\n        showCreateAccount();\n    }, [setDefaultUsername, showCreateAccount]);\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['getUserDetailsQuery', getDetailsError],\n                ['signInMutation', signInError]\n            ]),\n        [getDetailsError, signInError]\n    );\n\n    return {\n        errors,\n        handleCreateAccount,\n        handleForgotPassword,\n        handleSubmit,\n        isBusy: isGettingDetails || isSigningIn,\n        setFormApi\n    };\n};\n"]}