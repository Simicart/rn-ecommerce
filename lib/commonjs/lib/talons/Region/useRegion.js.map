{"version":3,"sources":["useRegion.js"],"names":["useRegion","props","countryCodeField","fieldInput","fieldSelect","optionValueKey","queries","getRegionsQuery","hasInitialized","countryFieldState","value","country","regionInputFieldApi","regionSelectFieldApi","current","exists","reset","data","error","loading","variables","countryCode","formattedRegionsData","label","available_regions","availableRegions","map","region","key","id","name","unshift","disabled","hidden","regions"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;AAeO,MAAMA,SAAS,GAAGC,KAAK,IAAI;AAC9B,QAAM;AACFC,IAAAA,gBAAgB,GAAG,SADjB;AAEFC,IAAAA,UAAU,GAAG,QAFX;AAGFC,IAAAA,WAAW,GAAG,QAHZ;AAIFC,IAAAA,cAAc,GAAG,MAJf;AAKFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AALP,MAMFN,KANJ;AAQA,QAAMO,cAAc,GAAG,mBAAO,KAAP,CAAvB;AACA,QAAMC,iBAAiB,GAAG,6BAAcP,gBAAd,CAA1B;AACA,QAAM;AAAEQ,IAAAA,KAAK,EAAEC;AAAT,MAAqBF,iBAA3B;AAEA,QAAMG,mBAAmB,GAAG,2BAAYT,UAAZ,CAA5B;AACA,QAAMU,oBAAoB,GAAG,2BAAYT,WAAZ,CAA7B,CAd8B,CAgB9B;AACA;AACA;;AACA,wBAAU,MAAM;AACZ,QAAIO,OAAJ,EAAa;AACT,UAAIH,cAAc,CAACM,OAAnB,EAA4B;AACxBF,QAAAA,mBAAmB,CAACG,MAApB,MAAgCH,mBAAmB,CAACI,KAApB,EAAhC;AACAH,QAAAA,oBAAoB,CAACE,MAArB,MAAiCF,oBAAoB,CAACG,KAArB,EAAjC;AACH,OAHD,MAGO;AACHR,QAAAA,cAAc,CAACM,OAAf,GAAyB,IAAzB;AACH;AACJ;AACJ,GATD,EASG,CAACH,OAAD,EAAUC,mBAAV,EAA+BC,oBAA/B,CATH;AAWA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2B,sBAASZ,eAAT,EAA0B;AACvDa,IAAAA,SAAS,EAAE;AAAEC,MAAAA,WAAW,EAAEV;AAAf;AAD4C,GAA1B,CAAjC;AAIA,MAAIW,oBAAoB,GAAG,CAAC;AAAEC,IAAAA,KAAK,EAAE,oBAAT;AAA+Bb,IAAAA,KAAK,EAAE;AAAtC,GAAD,CAA3B;;AACA,MAAI,CAACS,OAAD,IAAY,CAACD,KAAjB,EAAwB;AACpB,UAAM;AAAEP,MAAAA;AAAF,QAAcM,IAApB;AACA,UAAM;AAAEO,MAAAA,iBAAiB,EAAEC;AAArB,QAA0Cd,OAAhD;;AACA,QAAIc,gBAAJ,EAAsB;AAClBH,MAAAA,oBAAoB,GAAGG,gBAAgB,CAACC,GAAjB,CAAqBC,MAAM,KAAK;AACnDC,QAAAA,GAAG,EAAED,MAAM,CAACE,EADuC;AAEnDN,QAAAA,KAAK,EAAEI,MAAM,CAACG,IAFqC;AAGnDpB,QAAAA,KAAK,EAAEiB,MAAM,CAACtB,cAAD;AAHsC,OAAL,CAA3B,CAAvB;AAKAiB,MAAAA,oBAAoB,CAACS,OAArB,CAA6B;AACzBC,QAAAA,QAAQ,EAAE,IADe;AAEzBC,QAAAA,MAAM,EAAE,IAFiB;AAGzBV,QAAAA,KAAK,EAAE,EAHkB;AAIzBb,QAAAA,KAAK,EAAE;AAJkB,OAA7B;AAMH,KAZD,MAYO;AACHY,MAAAA,oBAAoB,GAAG,EAAvB;AACH;AACJ;;AAED,SAAO;AACHH,IAAAA,OADG;AAEHe,IAAAA,OAAO,EAAEZ;AAFN,GAAP;AAIH,CA3DM;AA6DP;;AAEA;;;;;;;;AAQA","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useFieldApi, useFieldState } from 'informed';\n\n/**\n * The useRegion talon handles logic for:\n *\n *  * Resetting the region field value when the country changes.\n *  * Querying for available regions for a country and rendering them.\n *\n * @param {Object} props\n * @param {string} props.countryCodeField\n * @param {string} props.fieldInput - the reference field path for free form text input Defaults to \"region\".\n * @param {string} props.fieldSelect - the reference field path for selectable list of regions. Defaults to \"region\".\n * @param {string} props.optionValueKey - the key used to get the value for the field. Defaults to \"code\"\n * @param {GraphQLAST} props.queries.getRegionsQuery - query to fetch regions for a country.\n *\n * @return {RegionTalonProps}\n */\nexport const useRegion = props => {\n    const {\n        countryCodeField = 'country',\n        fieldInput = 'region',\n        fieldSelect = 'region',\n        optionValueKey = 'code',\n        queries: { getRegionsQuery }\n    } = props;\n\n    const hasInitialized = useRef(false);\n    const countryFieldState = useFieldState(countryCodeField);\n    const { value: country } = countryFieldState;\n\n    const regionInputFieldApi = useFieldApi(fieldInput);\n    const regionSelectFieldApi = useFieldApi(fieldSelect);\n\n    // Reset region value when country changes. Because of how Informed sets\n    // initialValues, we want to skip the first state change of the value being\n    // initialized.\n    useEffect(() => {\n        if (country) {\n            if (hasInitialized.current) {\n                regionInputFieldApi.exists() && regionInputFieldApi.reset();\n                regionSelectFieldApi.exists() && regionSelectFieldApi.reset();\n            } else {\n                hasInitialized.current = true;\n            }\n        }\n    }, [country, regionInputFieldApi, regionSelectFieldApi]);\n\n    const { data, error, loading } = useQuery(getRegionsQuery, {\n        variables: { countryCode: country }\n    });\n\n    let formattedRegionsData = [{ label: 'Loading Regions...', value: '' }];\n    if (!loading && !error) {\n        const { country } = data;\n        const { available_regions: availableRegions } = country;\n        if (availableRegions) {\n            formattedRegionsData = availableRegions.map(region => ({\n                key: region.id,\n                label: region.name,\n                value: region[optionValueKey]\n            }));\n            formattedRegionsData.unshift({\n                disabled: true,\n                hidden: true,\n                label: '',\n                value: ''\n            });\n        } else {\n            formattedRegionsData = [];\n        }\n    }\n\n    return {\n        loading,\n        regions: formattedRegionsData\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * @typedef {Object} RegionTalonProps\n *\n * @property {boolean} loading whether the regions are loading\n * @property {Array<Region>} regions array of formatted regions for the country\n *\n */\n\n/**\n * @typedef {Object} Region\n *\n * @property {number} key the id of the region\n * @property {String} label the label of the region\n * @property {String} value the value of the region\n */\n"]}