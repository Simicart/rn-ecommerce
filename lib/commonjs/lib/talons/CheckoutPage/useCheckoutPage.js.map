{"version":3,"sources":["useCheckoutPage.js"],"names":["CHECKOUT_STEP","SHIPPING_ADDRESS","SHIPPING_METHOD","PAYMENT","REVIEW","useCheckoutPage","props","mutations","createCartMutation","placeOrderMutation","queries","getCheckoutDetailsQuery","getCustomerQuery","getOrderDetailsQuery","reviewOrderButtonClicked","setReviewOrderButtonClicked","apolloClient","isUpdating","setIsUpdating","activeContent","setActiveContent","checkoutStep","setCheckoutStep","toggleDrawer","isSignedIn","cartId","createCart","removeCart","fetchCartId","placeOrder","data","placeOrderData","error","placeOrderError","loading","placeOrderLoading","called","placeOrderCalled","getOrderDetails","orderDetailsData","orderDetailsLoading","fetchPolicy","customerData","customerLoading","skip","checkoutData","networkStatus","checkoutQueryNetworkStatus","notifyOnNetworkStatusChange","variables","cartItems","cart","items","isLoading","checkoutQueryInFlight","customer","toggleActiveContent","nextContentState","checkoutError","CheckoutError","handleSignIn","handleReviewOrder","resetReviewOrderButtonClicked","setShippingInformationDone","setShippingMethodDone","setPaymentInformationDone","window","scrollTo","left","top","behavior","handlePlaceOrder","placeOrderAndCleanup","err","console","hasError","isCartEmpty","total_quantity","isGuestCheckout","orderNumber","order","order_number"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n    useApolloClient,\n    useLazyQuery,\n    useMutation,\n    useQuery\n} from '@apollo/client';\n\nimport { clearCartDataFromCache } from '../../Apollo/clearCartDataFromCache';\nimport { useAppContext } from '../../context/app';\nimport { useUserContext } from '../../context/user';\nimport { useCartContext } from '../../context/cart';\nimport CheckoutError from './CheckoutError';\n\nexport const CHECKOUT_STEP = {\n    SHIPPING_ADDRESS: 1,\n    SHIPPING_METHOD: 2,\n    PAYMENT: 3,\n    REVIEW: 4\n};\n\nexport const useCheckoutPage = props => {\n    const {\n        mutations: { createCartMutation, placeOrderMutation },\n        queries: {\n            getCheckoutDetailsQuery,\n            getCustomerQuery,\n            getOrderDetailsQuery\n        }\n    } = props;\n\n    const [reviewOrderButtonClicked, setReviewOrderButtonClicked] = useState(\n        false\n    );\n\n    const apolloClient = useApolloClient();\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [activeContent, setActiveContent] = useState('checkout');\n    const [checkoutStep, setCheckoutStep] = useState(\n        CHECKOUT_STEP.SHIPPING_ADDRESS\n    );\n    const [, { toggleDrawer }] = useAppContext();\n    const [{ isSignedIn }] = useUserContext();\n    const [{ cartId }, { createCart, removeCart }] = useCartContext();\n\n    const [fetchCartId] = useMutation(createCartMutation);\n    const [\n        placeOrder,\n        {\n            data: placeOrderData,\n            error: placeOrderError,\n            loading: placeOrderLoading,\n            called: placeOrderCalled\n        }\n    ] = useMutation(placeOrderMutation);\n\n    const [\n        getOrderDetails,\n        { data: orderDetailsData, loading: orderDetailsLoading }\n    ] = useLazyQuery(getOrderDetailsQuery, {\n        // We use this query to fetch details _just_ before submission, so we\n        // want to make sure it is fresh. We also don't want to cache this data\n        // because it may contain PII.\n        fetchPolicy: 'no-cache'\n    });\n\n    const { data: customerData, loading: customerLoading } = useQuery(\n        getCustomerQuery,\n        { skip: !isSignedIn }\n    );\n\n    const {\n        data: checkoutData,\n        networkStatus: checkoutQueryNetworkStatus\n    } = useQuery(getCheckoutDetailsQuery, {\n        /**\n         * Skip fetching checkout details if the `cartId`\n         * is a falsy value.\n         */\n        skip: !cartId,\n        notifyOnNetworkStatusChange: true,\n        variables: {\n            cartId\n        }\n    });\n\n    const cartItems = useMemo(() => {\n        return (checkoutData && checkoutData.cart.items) || [];\n    }, [checkoutData]);\n\n    /**\n     * For more info about network statues check this out\n     *\n     * https://www.apollographql.com/docs/react/data/queries/#inspecting-loading-states\n     */\n    const isLoading = useMemo(() => {\n        const checkoutQueryInFlight = checkoutQueryNetworkStatus\n            ? checkoutQueryNetworkStatus < 7\n            : true;\n\n        return checkoutQueryInFlight || customerLoading;\n    }, [checkoutQueryNetworkStatus, customerLoading]);\n\n    const customer = customerData && customerData.customer;\n\n    const toggleActiveContent = useCallback(() => {\n        const nextContentState =\n            activeContent === 'checkout' ? 'addressBook' : 'checkout';\n        setActiveContent(nextContentState);\n    }, [activeContent]);\n\n    const checkoutError = useMemo(() => {\n        if (placeOrderError) {\n            return new CheckoutError(placeOrderError);\n        }\n    }, [placeOrderError]);\n\n    const handleSignIn = useCallback(() => {\n        // TODO: set navigation state to \"SIGN_IN\". useNavigation:showSignIn doesn't work.\n        toggleDrawer('nav');\n    }, [toggleDrawer]);\n\n    const handleReviewOrder = useCallback(() => {\n        setReviewOrderButtonClicked(true);\n    }, []);\n\n    const resetReviewOrderButtonClicked = useCallback(() => {\n        setReviewOrderButtonClicked(false);\n    }, [setReviewOrderButtonClicked]);\n\n    const setShippingInformationDone = useCallback(() => {\n        if (checkoutStep === CHECKOUT_STEP.SHIPPING_ADDRESS) {\n            setCheckoutStep(CHECKOUT_STEP.SHIPPING_METHOD);\n        }\n    }, [checkoutStep, setCheckoutStep]);\n\n    const setShippingMethodDone = useCallback(() => {\n        if (checkoutStep === CHECKOUT_STEP.SHIPPING_METHOD) {\n            setCheckoutStep(CHECKOUT_STEP.PAYMENT);\n        }\n    }, [checkoutStep, setCheckoutStep]);\n\n    const setPaymentInformationDone = useCallback(() => {\n        if (checkoutStep === CHECKOUT_STEP.PAYMENT) {\n            window.scrollTo({\n                left: 0,\n                top: 0,\n                behavior: 'smooth'\n            });\n            setCheckoutStep(CHECKOUT_STEP.REVIEW);\n        }\n    }, [checkoutStep, setCheckoutStep]);\n\n    const handlePlaceOrder = useCallback(async () => {\n        // Fetch order details and then use an effect to actually place the\n        // order. If/when Apollo returns promises for invokers from useLazyQuery\n        // we can just await this function and then perform the rest of order\n        // placement.\n        getOrderDetails({\n            variables: {\n                cartId\n            }\n        });\n    }, [cartId, getOrderDetails]);\n\n    useEffect(() => {\n        async function placeOrderAndCleanup() {\n            try {\n                await placeOrder({\n                    variables: {\n                        cartId\n                    }\n                });\n\n                // Cleanup stale cart and customer info.\n                await removeCart();\n                await clearCartDataFromCache(apolloClient);\n\n                await createCart({\n                    fetchCartId\n                });\n            } catch (err) {\n                console.error(\n                    'An error occurred during when placing the order',\n                    err\n                );\n                setReviewOrderButtonClicked(false);\n                setCheckoutStep(CHECKOUT_STEP.PAYMENT);\n            }\n        }\n\n        if (orderDetailsData && !placeOrderCalled) {\n            placeOrderAndCleanup();\n        }\n    }, [\n        apolloClient,\n        cartId,\n        createCart,\n        fetchCartId,\n        orderDetailsData,\n        placeOrder,\n        placeOrderCalled,\n        removeCart\n    ]);\n\n    return {\n        activeContent,\n        cartItems,\n        checkoutStep,\n        customer,\n        error: checkoutError,\n        handleSignIn,\n        handlePlaceOrder,\n        hasError: !!checkoutError,\n        isCartEmpty: !(checkoutData && checkoutData.cart.total_quantity),\n        isGuestCheckout: !isSignedIn,\n        isLoading,\n        isUpdating,\n        orderDetailsData,\n        orderDetailsLoading,\n        orderNumber:\n            (placeOrderData && placeOrderData.placeOrder.order.order_number) ||\n            null,\n        placeOrderLoading,\n        setCheckoutStep,\n        setIsUpdating,\n        setShippingInformationDone,\n        setShippingMethodDone,\n        setPaymentInformationDone,\n        resetReviewOrderButtonClicked,\n        handleReviewOrder,\n        reviewOrderButtonClicked,\n        toggleActiveContent\n    };\n};\n"]}