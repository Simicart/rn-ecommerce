{"version":3,"sources":["usePaymentInformation.js"],"names":["usePaymentInformation","props","mutations","onSave","checkoutError","queries","resetShouldSubmit","setCheckoutStep","shouldSubmit","setFreePaymentMethodMutation","setBillingAddressMutation","getPaymentInformation","getPaymentNonceQuery","doneEditing","setDoneEditing","drawer","toggleDrawer","closeDrawer","isEditModalActive","cartId","client","showEditModal","hideEditModal","handlePaymentSuccess","handlePaymentError","data","paymentInformationData","loading","paymentInformationLoading","fetchPolicy","nextFetchPolicy","skip","variables","setFreePaymentMethod","setFreePaymentMethodLoading","clearPaymentDetails","writeQuery","query","cart","__typename","id","paymentNonce","setBillingAddress","isLoading","availablePaymentMethods","available_payment_methods","selectedPaymentMethod","selected_payment_method","code","find","CHECKOUT_STEP","PAYMENT","setFreeIfAvailable","freeIsAvailable","shippingAddressOnCart","shipping_addresses","length","firstname","lastname","street","city","region","postcode","country","telephone","regionCode","countryCode","handleExpiredPaymentError","CheckoutError","hasPaymentExpired"],"mappings":"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","sourcesContent":["import { useCallback, useState, useEffect } from 'react';\nimport { useQuery, useApolloClient, useMutation } from '@apollo/client';\n\nimport { useAppContext } from '../../../context/app';\nimport { useCartContext } from '../../../context/cart';\nimport CheckoutError from '../CheckoutError';\nimport { CHECKOUT_STEP } from '../useCheckoutPage';\n\n/**\n *\n * @param {Function} props.onSave callback to be called when user clicks review order button\n * @param {Object} props.checkoutError an instance of the `CheckoutError` error that has been generated using the error from the place order mutation\n * @param {DocumentNode} props.queries.getPaymentNonceQuery query to fetch and/or clear payment nonce from cache\n * @param {Boolean} props.shouldSubmit property telling us to proceed to next step\n * @param {Function} props.resetShouldSubmit callback to reset the review order button flag\n * @param {DocumentNode} props.queries.getPaymentInformation query to fetch data to render this component\n * @param {DocumentNode} props.mutation.setBillingAddressMutation\n * @param {DocumentNode} props.mutation.setFreePaymentMethodMutation\n *\n * @returns {\n *   doneEditing: Boolean,\n *   isEditModalActive: Boolean,\n *   showEditModal: Function,\n *   hideEditModal: Function,\n *   handlePaymentError: Function,\n *   handlePaymentSuccess: Function,\n *   checkoutStep: Number,\n *\n * }\n */\nexport const usePaymentInformation = props => {\n    const {\n        mutations,\n        onSave,\n        checkoutError,\n        queries,\n        resetShouldSubmit,\n        setCheckoutStep,\n        shouldSubmit\n    } = props;\n    const {\n        setFreePaymentMethodMutation,\n        setBillingAddressMutation\n    } = mutations;\n    const { getPaymentInformation, getPaymentNonceQuery } = queries;\n\n    /**\n     * Definitions\n     */\n\n    const [doneEditing, setDoneEditing] = useState(false);\n    const [{ drawer }, { toggleDrawer, closeDrawer }] = useAppContext();\n    const isEditModalActive = drawer === 'edit.payment';\n    const [{ cartId }] = useCartContext();\n    const client = useApolloClient();\n\n    /**\n     * Helper Functions\n     */\n\n    const showEditModal = useCallback(() => {\n        toggleDrawer('edit.payment');\n    }, [toggleDrawer]);\n\n    const hideEditModal = useCallback(() => {\n        closeDrawer('edit.payment');\n    }, [closeDrawer]);\n\n    const handlePaymentSuccess = useCallback(() => {\n        setDoneEditing(true);\n        if (onSave) {\n            onSave();\n        }\n    }, [onSave]);\n\n    const handlePaymentError = useCallback(() => {\n        resetShouldSubmit();\n        setDoneEditing(false);\n    }, [resetShouldSubmit]);\n\n    /**\n     * Queries\n     */\n    const {\n        data: paymentInformationData,\n        loading: paymentInformationLoading\n    } = useQuery(getPaymentInformation, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        skip: !cartId,\n        variables: { cartId }\n    });\n\n    const [\n        setFreePaymentMethod,\n        { loading: setFreePaymentMethodLoading }\n    ] = useMutation(setFreePaymentMethodMutation);\n\n    const clearPaymentDetails = useCallback(() => {\n        client.writeQuery({\n            query: getPaymentNonceQuery,\n            data: {\n                cart: {\n                    __typename: 'Cart',\n                    id: cartId,\n                    paymentNonce: null\n                }\n            }\n        });\n    }, [cartId, client, getPaymentNonceQuery]);\n\n    const [setBillingAddress] = useMutation(setBillingAddressMutation);\n\n    // We must wait for payment method to be set if this is the first time we\n    // are hitting this component and the total is $0. If we don't wait then\n    // the CC component will mount while the setPaymentMethod mutation is in flight.\n    const isLoading = paymentInformationLoading || setFreePaymentMethodLoading;\n\n    /**\n     * Effects\n     */\n\n    const availablePaymentMethods = paymentInformationData\n        ? paymentInformationData.cart.available_payment_methods\n        : [];\n\n    const selectedPaymentMethod =\n        (paymentInformationData &&\n            paymentInformationData.cart.selected_payment_method.code) ||\n        null;\n\n    // Whenever selected payment method is no longer an available method we\n    // should reset to the payment step to force the user to select again.\n    useEffect(() => {\n        if (\n            !availablePaymentMethods.find(\n                ({ code }) => code === selectedPaymentMethod\n            )\n        ) {\n            resetShouldSubmit();\n            setCheckoutStep(CHECKOUT_STEP.PAYMENT);\n            setDoneEditing(false);\n        }\n    }, [\n        availablePaymentMethods,\n        resetShouldSubmit,\n        selectedPaymentMethod,\n        setCheckoutStep\n    ]);\n\n    // If free is ever available and not selected, automatically select it.\n    useEffect(() => {\n        const setFreeIfAvailable = async () => {\n            const freeIsAvailable = !!availablePaymentMethods.find(\n                ({ code }) => code === 'free'\n            );\n            if (freeIsAvailable) {\n                if (selectedPaymentMethod !== 'free') {\n                    await setFreePaymentMethod({\n                        variables: {\n                            cartId\n                        }\n                    });\n                    setDoneEditing(true);\n                } else {\n                    setDoneEditing(true);\n                }\n            }\n        };\n        setFreeIfAvailable();\n    }, [\n        availablePaymentMethods,\n        cartId,\n        selectedPaymentMethod,\n        setDoneEditing,\n        setFreePaymentMethod\n    ]);\n\n    const shippingAddressOnCart =\n        (paymentInformationData &&\n            paymentInformationData.cart.shipping_addresses.length &&\n            paymentInformationData.cart.shipping_addresses[0]) ||\n        null;\n\n    // If the selected payment method is \"free\" keep the shipping address\n    // synced with billing address.This _requires_ the UI does not allow payment\n    // information before shipping address.\n    useEffect(() => {\n        if (selectedPaymentMethod === 'free' && shippingAddressOnCart) {\n            const {\n                firstname,\n                lastname,\n                street,\n                city,\n                region,\n                postcode,\n                country,\n                telephone\n            } = shippingAddressOnCart;\n            const regionCode = region.code;\n            const countryCode = country.code;\n\n            setBillingAddress({\n                variables: {\n                    cartId,\n                    firstname,\n                    lastname,\n                    street,\n                    city,\n                    regionCode,\n                    postcode,\n                    countryCode,\n                    telephone\n                }\n            });\n        }\n    }, [\n        cartId,\n        selectedPaymentMethod,\n        setBillingAddress,\n        shippingAddressOnCart\n    ]);\n\n    // When the \"review order\" button is clicked, if the selected method is free\n    // and free is still available, proceed.\n    useEffect(() => {\n        if (\n            shouldSubmit &&\n            availablePaymentMethods.find(({ code }) => code === 'free') &&\n            selectedPaymentMethod === 'free'\n        ) {\n            onSave();\n        }\n    });\n\n    const handleExpiredPaymentError = useCallback(() => {\n        setDoneEditing(false);\n        clearPaymentDetails({ variables: { cartId } });\n        resetShouldSubmit();\n        setCheckoutStep(CHECKOUT_STEP.PAYMENT);\n    }, [resetShouldSubmit, setCheckoutStep, clearPaymentDetails, cartId]);\n\n    useEffect(() => {\n        if (\n            checkoutError instanceof CheckoutError &&\n            checkoutError.hasPaymentExpired()\n        ) {\n            handleExpiredPaymentError();\n        }\n    }, [checkoutError, handleExpiredPaymentError]);\n\n    return {\n        doneEditing,\n        isEditModalActive,\n        isLoading,\n        handlePaymentError,\n        handlePaymentSuccess,\n        hideEditModal,\n        showEditModal\n    };\n};\n"]}