{"version":3,"sources":["useEditModal.js"],"names":["useEditModal","props","onClose","queries","getSelectedPaymentMethodQuery","isLoading","setIsLoading","updateButtonClicked","setUpdateButtonClicked","cartId","data","selectedPaymentMethodData","skip","variables","selectedPaymentMethod","cart","selected_payment_method","code","handleClose","handleUpdate","handlePaymentSuccess","handlePaymentError","handleDropinReady","resetUpdateButtonClicked"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;AAkBO,MAAMA,YAAY,GAAGC,KAAK,IAAI;AACjC,QAAM;AACFC,IAAAA,OADE;AAEFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAFP,MAGFH,KAHJ;AAKA;;;;AAIA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4B,qBAAS,IAAT,CAAlC;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgD,qBAAS,KAAT,CAAtD;AACA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,IAAe,2BAArB;AAEA;;;;AAIA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAsC,sBACxCP,6BADwC,EAExC;AACIQ,IAAAA,IAAI,EAAE,CAACH,MADX;AAEII,IAAAA,SAAS,EAAE;AACPJ,MAAAA;AADO;AAFf,GAFwC,CAA5C;AASA,QAAMK,qBAAqB,GAAGH,yBAAyB,GACjDA,yBAAyB,CAACI,IAA1B,CAA+BC,uBAA/B,CAAuDC,IADN,GAEjD,IAFN;AAIA;;;;AAIA,QAAMC,WAAW,GAAG,wBAAY,MAAM;AAClChB,IAAAA,OAAO;AACV,GAFmB,EAEjB,CAACA,OAAD,CAFiB,CAApB;AAIA,QAAMiB,YAAY,GAAG,wBAAY,MAAM;AACnCX,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACH,GAFoB,EAElB,CAACA,sBAAD,CAFkB,CAArB;AAIA,QAAMY,oBAAoB,GAAG,wBAAY,MAAM;AAC3ClB,IAAAA,OAAO;AACV,GAF4B,EAE1B,CAACA,OAAD,CAF0B,CAA7B;AAIA,QAAMmB,kBAAkB,GAAG,wBAAY,MAAM;AACzCb,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACH,GAF0B,EAExB,EAFwB,CAA3B;AAIA,QAAMc,iBAAiB,GAAG,wBAAY,MAAM;AACxChB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFyB,EAEvB,CAACA,YAAD,CAFuB,CAA1B;AAIA,QAAMiB,wBAAwB,GAAG,wBAAY,MAAM;AAC/Cf,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACH,GAFgC,EAE9B,CAACA,sBAAD,CAF8B,CAAjC;AAIA,SAAO;AACHM,IAAAA,qBADG;AAEHT,IAAAA,SAFG;AAGHE,IAAAA,mBAHG;AAIHW,IAAAA,WAJG;AAKHC,IAAAA,YALG;AAMHC,IAAAA,oBANG;AAOHC,IAAAA,kBAPG;AAQHC,IAAAA,iBARG;AASHC,IAAAA;AATG,GAAP;AAWH,CAtEM","sourcesContent":["import { useState, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport { useCartContext } from '../../../context/cart';\n\n/**\n * Talon to handle checkout page's payment information edit modal.\n *\n * @param {Function} props.onClose callback to be called when the modal's close or cancel button is clicked.\n * @param {DocumentNode} props.queries.getSelectedPaymentMethodQuery query to fetch the payment method that was used in the payment information checkout step\n *\n * @returns {\n *   selectedPaymentMethod: String,\n *   isLoading: Boolean,\n *   updateButtonClicked: Boolean,\n *   handleClose: Function,\n *   handleUpdate: Function,\n *   handlePaymentSuccess: Function,\n *   handleDropinReady: Function,\n *   handlePaymentError: Function,\n *   resetUpdateButtonClicked: Function\n * }\n */\nexport const useEditModal = props => {\n    const {\n        onClose,\n        queries: { getSelectedPaymentMethodQuery }\n    } = props;\n\n    /**\n     * Definitions\n     */\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [updateButtonClicked, setUpdateButtonClicked] = useState(false);\n    const [{ cartId }] = useCartContext();\n\n    /**\n     * Queries\n     */\n\n    const { data: selectedPaymentMethodData } = useQuery(\n        getSelectedPaymentMethodQuery,\n        {\n            skip: !cartId,\n            variables: {\n                cartId\n            }\n        }\n    );\n    const selectedPaymentMethod = selectedPaymentMethodData\n        ? selectedPaymentMethodData.cart.selected_payment_method.code\n        : null;\n\n    /**\n     * Helper Functions\n     */\n\n    const handleClose = useCallback(() => {\n        onClose();\n    }, [onClose]);\n\n    const handleUpdate = useCallback(() => {\n        setUpdateButtonClicked(true);\n    }, [setUpdateButtonClicked]);\n\n    const handlePaymentSuccess = useCallback(() => {\n        onClose();\n    }, [onClose]);\n\n    const handlePaymentError = useCallback(() => {\n        setUpdateButtonClicked(false);\n    }, []);\n\n    const handleDropinReady = useCallback(() => {\n        setIsLoading(false);\n    }, [setIsLoading]);\n\n    const resetUpdateButtonClicked = useCallback(() => {\n        setUpdateButtonClicked(false);\n    }, [setUpdateButtonClicked]);\n\n    return {\n        selectedPaymentMethod,\n        isLoading,\n        updateButtonClicked,\n        handleClose,\n        handleUpdate,\n        handlePaymentSuccess,\n        handlePaymentError,\n        handleDropinReady,\n        resetUpdateButtonClicked\n    };\n};\n"]}