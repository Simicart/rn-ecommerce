{"version":3,"sources":["CheckoutError.js"],"names":["removeGQLTag","rawMessage","replace","CheckoutError","Error","constructor","gqlError","params","error","graphQLErrors","some","message","includes","PAYMENT_ERROR","name"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,YAAY,GAAGC,UAAU,IAAIA,UAAU,CAACC,OAAX,CAAmB,gBAAnB,EAAqC,EAArC,CAAnC;;AAEA,MAAMC,aAAN,SAA4BC,KAA5B,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,QAAD,EAAW,GAAGC,MAAd,EAAsB;AAC7B,UAAMA,MAAN;;AAD6B,+CAOb,MAAM;AACtB,aAAO,KAAKC,KAAL,CAAWC,aAAX,CAAyBC,IAAzB,CAA8B,CAAC;AAAEC,QAAAA;AAAF,OAAD,KACjCA,OAAO,CAACC,QAAR,CAAiBC,+BAAjB,CADG,CAAP;AAGH,KAXgC;;AAE7B,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKH,OAAL,GAAeX,YAAY,CAACM,QAAQ,CAACK,OAAV,CAA3B;AACA,SAAKH,KAAL,GAAaF,QAAb;AACH;AAQD;;;;;;;;;;;;;;;AAd8B;;eA6BnBH,a","sourcesContent":["import { PAYMENT_ERROR } from './PlaceOrderErrors';\n\nconst removeGQLTag = rawMessage => rawMessage.replace(/GraphQL error:/, '');\n\nclass CheckoutError extends Error {\n    constructor(gqlError, ...params) {\n        super(params);\n        this.name = 'CheckoutError';\n        this.message = removeGQLTag(gqlError.message);\n        this.error = gqlError;\n    }\n\n    hasPaymentExpired = () => {\n        return this.error.graphQLErrors.some(({ message }) =>\n            message.includes(PAYMENT_ERROR)\n        );\n    };\n\n    /**\n     * TODO have similar functions if needed for\n     * shipping information and shipping method\n     * so when they do\n     *\n     * ```es6\n     * if (error.isShippingInformationError()) {\n     *      // Handle the error\n     * } else {\n     *      // Not needed, probably error for other component to handle\n     * }\n     * ```\n     */\n}\n\nexport default CheckoutError;\n"]}