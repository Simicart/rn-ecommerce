{"version":3,"sources":["useItemsReview.js"],"names":["useItemsReview","props","showAllItems","setShowAllItems","queries","getItemsInCart","cartId","fetchItemsInCart","data","queryData","error","loading","fetchPolicy","setShowAllItemsFlag","variables","cart","items","length","totalQuantity","total_quantity","isLoading","hasErrors"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEO,MAAMA,cAAc,GAAGC,KAAK,IAAI;AACnC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC,qBAAS,KAAT,CAAxC;AAEA,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFJ,KAFJ;AAIA,QAAM,CAAC;AAAEK,IAAAA;AAAF,GAAD,IAAe,2BAArB;AAEA,QAAM,CACFC,gBADE,EAEF;AAAEC,IAAAA,IAAI,EAAEC,SAAR;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA;AAA1B,GAFE,IAGF,0BAAaN,cAAb,EAA6B;AAC7BO,IAAAA,WAAW,EAAE;AADgB,GAA7B,CAHJ,CATmC,CAgBnC;;AACA,QAAMJ,IAAI,GAAGP,KAAK,CAACO,IAAN,IAAcC,SAA3B;AAEA,QAAMI,mBAAmB,GAAG,wBAAY,MAAMV,eAAe,CAAC,IAAD,CAAjC,EAAyC,CACjEA,eADiE,CAAzC,CAA5B;AAIA,wBAAU,MAAM;AACZ,QAAIG,MAAM,IAAI,CAACL,KAAK,CAACO,IAArB,EAA2B;AACvBD,MAAAA,gBAAgB,CAAC;AACbO,QAAAA,SAAS,EAAE;AACPR,UAAAA;AADO;AADE,OAAD,CAAhB;AAKH;AACJ,GARD,EAQG,CAACA,MAAD,EAASC,gBAAT,EAA2BN,KAAK,CAACO,IAAjC,CARH;AAUA,wBAAU,MAAM;AACZ;;;;AAIA,QAAIA,IAAI,IAAIA,IAAI,CAACO,IAAb,IAAqBP,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBC,MAAhB,IAA0B,CAAnD,EAAsD;AAClDd,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH;AACJ,GARD,EAQG,CAACK,IAAD,CARH;AAUA,QAAMQ,KAAK,GAAGR,IAAI,GAAGA,IAAI,CAACO,IAAL,CAAUC,KAAb,GAAqB,EAAvC;AAEA,QAAME,aAAa,GAAGV,IAAI,GAAG,CAACA,IAAI,CAACO,IAAL,CAAUI,cAAd,GAA+B,CAAzD;AAEA,SAAO;AACHC,IAAAA,SAAS,EAAE,CAAC,CAACT,OADV;AAEHK,IAAAA,KAFG;AAGHK,IAAAA,SAAS,EAAE,CAAC,CAACX,KAHV;AAIHQ,IAAAA,aAJG;AAKHhB,IAAAA,YALG;AAMHC,IAAAA,eAAe,EAAEU;AANd,GAAP;AAQH,CAvDM","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport { useLazyQuery } from '@apollo/client';\n\nimport { useCartContext } from '../../../context/cart';\n\nexport const useItemsReview = props => {\n    const [showAllItems, setShowAllItems] = useState(false);\n\n    const {\n        queries: { getItemsInCart }\n    } = props;\n\n    const [{ cartId }] = useCartContext();\n\n    const [\n        fetchItemsInCart,\n        { data: queryData, error, loading }\n    ] = useLazyQuery(getItemsInCart, {\n        fetchPolicy: 'cache-and-network'\n    });\n\n    // If static data was provided, use that instead of query data.\n    const data = props.data || queryData;\n\n    const setShowAllItemsFlag = useCallback(() => setShowAllItems(true), [\n        setShowAllItems\n    ]);\n\n    useEffect(() => {\n        if (cartId && !props.data) {\n            fetchItemsInCart({\n                variables: {\n                    cartId\n                }\n            });\n        }\n    }, [cartId, fetchItemsInCart, props.data]);\n\n    useEffect(() => {\n        /**\n         * If there are 2 or less than 2 items in cart\n         * set show all items to `true`.\n         */\n        if (data && data.cart && data.cart.items.length <= 2) {\n            setShowAllItems(true);\n        }\n    }, [data]);\n\n    const items = data ? data.cart.items : [];\n\n    const totalQuantity = data ? +data.cart.total_quantity : 0;\n\n    return {\n        isLoading: !!loading,\n        items,\n        hasErrors: !!error,\n        totalQuantity,\n        showAllItems,\n        setShowAllItems: setShowAllItemsFlag\n    };\n};\n"]}