{"version":3,"sources":["useNavigationHeader.js"],"names":["useNavigationHeader","props","isTopLevel","onBack","view","isTopLevelMenu","handleBack"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;AAYO,MAAMA,mBAAmB,GAAGC,KAAK,IAAI;AACxC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA;AAAtB,MAA+BH,KAArC;AAEA,QAAMI,cAAc,GAAGH,UAAU,IAAIE,IAAI,KAAK,MAA9C;AAEA,QAAME,UAAU,GAAG,wBAAY,MAAM;AACjCH,IAAAA,MAAM;AACT,GAFkB,EAEhB,CAACA,MAAD,CAFgB,CAAnB;AAIA,SAAO;AACHG,IAAAA,UADG;AAEHD,IAAAA;AAFG,GAAP;AAIH,CAbM","sourcesContent":["import { useCallback } from 'react';\n\n/**\n * The useNavigationHeader talon complements the NavigationHeader component.\n *\n * @param {Object}      props\n * @param {Boolean}     props.isTopLevel - Whether or not the user is seeing the top-most level in the view tree.\n * @param {Function}    props.onBack - A function to call when the user clicks the \"back\" button.\n * @param {String}      props.view - The current view in the navigation view tree.\n *\n * @returns {Object}    result\n * @returns {Function}  result.handleBack - A callback function to attach to the back button.\n * @returns {Boolean}   result.isTopLevelMenu - Whether the current view is the top-most in the view tree.\n */\nexport const useNavigationHeader = props => {\n    const { isTopLevel, onBack, view } = props;\n\n    const isTopLevelMenu = isTopLevel && view === 'MENU';\n\n    const handleBack = useCallback(() => {\n        onBack();\n    }, [onBack]);\n\n    return {\n        handleBack,\n        isTopLevelMenu\n    };\n};\n"]}