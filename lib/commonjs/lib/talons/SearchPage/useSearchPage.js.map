{"version":3,"sources":["useSearchPage.js"],"names":["PAGE_SIZE","useSearchPage","props","queries","filterIntrospection","getProductFiltersBySearch","productSearch","sortProps","currentSort","sortAttribute","sortDirection","previousSort","location","search","previousSearch","paginationValues","paginationApi","currentPage","totalPages","setCurrentPage","setTotalPages","appApi","toggleDrawer","inputText","searchCategory","inputFilters","size","targetCategoriesSet","get","map","categoryPair","split","join","openDrawer","called","introspectionCalled","data","introspectionData","loading","introspectionLoading","filterTypeMap","typeMap","Map","__type","inputFields","forEach","name","type","set","pageControl","setPage","runQuery","searchCalled","searchLoading","error","filters","newFilters","values","key","variables","Number","pageSize","sort","window","scrollTo","left","top","behavior","totalPagesFromData","products","page_info","total_pages","prevSearch","URLSearchParams","current","nextSearch","delete","toString","getFilters","filterData","aggregations","searchTerm"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { useLocation } from 'react-router-dom';\n\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\nimport { usePagination, useSort } from '@magento/peregrine';\n\nimport { getSearchParam } from '../../hooks/useSearchParam';\nimport { getFiltersFromSearch, getFilterInput } from '../FilterModal/helpers';\n\nconst PAGE_SIZE = 6;\n\n/**\n * Return props necessary to render a SearchPage component.\n *\n * @param {Object} props\n * @param {String} props.query - graphql query used for executing search\n */\nexport const useSearchPage = props => {\n    const {\n        queries: {\n            filterIntrospection,\n            getProductFiltersBySearch,\n            productSearch\n        }\n    } = props;\n\n    const sortProps = useSort();\n    const [currentSort] = sortProps;\n    const { sortAttribute, sortDirection } = currentSort;\n    // Keep track of the sort criteria so we can tell when they change.\n    const previousSort = useRef(currentSort);\n\n    // get the URL query parameters.\n    const location = useLocation();\n    const { search } = location;\n    // Keep track of the search terms so we can tell when they change.\n    const previousSearch = useRef(search);\n\n    // Set up pagination.\n    const [paginationValues, paginationApi] = usePagination();\n    const { currentPage, totalPages } = paginationValues;\n    const { setCurrentPage, setTotalPages } = paginationApi;\n\n    // retrieve app state and action creators\n    const [, appApi] = useAppContext();\n    const { toggleDrawer } = appApi;\n\n    const inputText = getSearchParam('query', location);\n\n    const searchCategory = useMemo(() => {\n        const inputFilters = getFiltersFromSearch(search);\n        if (inputFilters.size === 0) {\n            return null;\n        }\n\n        const targetCategoriesSet = inputFilters.get('category_id');\n        if (!targetCategoriesSet) {\n            return null;\n        }\n\n        // The set looks like [\"Bottoms,11\", \"Skirts,12\"].\n        // We want to return \"Bottoms, Skirts\", etc.\n        return [...targetCategoriesSet]\n            .map(categoryPair => categoryPair.split(',')[0])\n            .join(', ');\n    }, [search]);\n\n    const openDrawer = useCallback(() => {\n        toggleDrawer('filter');\n    }, [toggleDrawer]);\n\n    // Get \"allowed\" filters by intersection of schema and aggregations\n    const {\n        called: introspectionCalled,\n        data: introspectionData,\n        loading: introspectionLoading\n    } = useQuery(filterIntrospection);\n\n    // Create a type map we can reference later to ensure we pass valid args\n    // to the graphql query.\n    // For example: { category_id: 'FilterEqualTypeInput', price: 'FilterRangeTypeInput' }\n    const filterTypeMap = useMemo(() => {\n        const typeMap = new Map();\n        if (introspectionData) {\n            introspectionData.__type.inputFields.forEach(({ name, type }) => {\n                typeMap.set(name, type.name);\n            });\n        }\n        return typeMap;\n    }, [introspectionData]);\n\n    const pageControl = {\n        currentPage,\n        setPage: setCurrentPage,\n        totalPages\n    };\n\n    const [\n        runQuery,\n        { called: searchCalled, loading: searchLoading, error, data }\n    ] = useLazyQuery(productSearch);\n\n    useEffect(() => {\n        // Wait until we have the type map to fetch product data.\n        if (!filterTypeMap.size) {\n            return;\n        }\n        const filters = getFiltersFromSearch(search);\n\n        // Construct the filter arg object.\n        const newFilters = {};\n        filters.forEach((values, key) => {\n            newFilters[key] = getFilterInput(values, filterTypeMap.get(key));\n        });\n\n        runQuery({\n            variables: {\n                currentPage: Number(currentPage),\n                filters: newFilters,\n                inputText,\n                pageSize: Number(PAGE_SIZE),\n                sort: { [sortAttribute]: sortDirection }\n            }\n        });\n\n        window.scrollTo({\n            left: 0,\n            top: 0,\n            behavior: 'smooth'\n        });\n    }, [\n        currentPage,\n        filterTypeMap,\n        inputText,\n        runQuery,\n        search,\n        sortDirection,\n        sortAttribute\n    ]);\n\n    // Set the total number of pages whenever the data changes.\n    useEffect(() => {\n        const totalPagesFromData = data\n            ? data.products.page_info.total_pages\n            : null;\n\n        setTotalPages(totalPagesFromData);\n\n        return () => {\n            setTotalPages(null);\n        };\n    }, [data, setTotalPages]);\n\n    // Reset the current page back to one (1) when the search string, filters\n    // or sort criteria change.\n    useEffect(() => {\n        // We don't want to compare page value.\n        const prevSearch = new URLSearchParams(previousSearch.current);\n        const nextSearch = new URLSearchParams(search);\n        prevSearch.delete('page');\n        nextSearch.delete('page');\n\n        if (\n            prevSearch.toString() !== nextSearch.toString() ||\n            previousSort.current.sortAttribute.toString() !==\n                currentSort.sortAttribute.toString() ||\n            previousSort.current.sortDirection.toString() !==\n                currentSort.sortDirection.toString()\n        ) {\n            // The search term changed.\n            setCurrentPage(1);\n            // And update the ref.\n            previousSearch.current = search;\n            previousSort.current = currentSort;\n        }\n    }, [currentSort, search, setCurrentPage]);\n\n    // Fetch category filters for when a user is searching in a category.\n    const [getFilters, { data: filterData }] = useLazyQuery(\n        getProductFiltersBySearch\n    );\n\n    useEffect(() => {\n        if (inputText) {\n            getFilters({\n                variables: {\n                    search: inputText\n                }\n            });\n        }\n    }, [getFilters, inputText, search]);\n\n    // Use static category filters when filtering by category otherwise use the\n    // default (and potentially changing!) aggregations from the product query.\n    const filters = filterData ? filterData.products.aggregations : null;\n\n    // Avoid showing a \"empty data\" state between introspection and search.\n    const loading =\n        (introspectionCalled && !searchCalled) ||\n        searchLoading ||\n        introspectionLoading;\n\n    return {\n        data,\n        error,\n        filters,\n        loading,\n        openDrawer,\n        pageControl,\n        searchCategory,\n        searchTerm: inputText,\n        sortProps\n    };\n};\n"]}