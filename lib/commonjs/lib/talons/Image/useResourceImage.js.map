{"version":3,"sources":["useResourceImage.js"],"names":["useResourceImage","props","generateSrcset","generateUrl","height","resource","type","width","widths","ratio","src","srcSet","sizes","result","breakpoint","UNCONSTRAINED_SIZE_KEY","push","get","join"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;AAaO,MAAMA,gBAAgB,GAAGC,KAAK,IAAI;AACrC,QAAM;AACFC,IAAAA,cADE;AAEFC,IAAAA,WAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,QAJE;AAKFC,IAAAA,IALE;AAMFC,IAAAA,KANE;AAOFC,IAAAA,MAPE;AAQFC,IAAAA;AARE,MASFR,KATJ;AAWA,QAAMS,GAAG,GAAG,oBAAQ,MAAM;AACtB,WAAOP,WAAW,CAACE,QAAD,EAAWC,IAAX,CAAX,CAA4BC,KAA5B,EAAmCH,MAAnC,CAAP;AACH,GAFW,EAET,CAACD,WAAD,EAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,IAAhC,EAAsCC,KAAtC,CAFS,CAAZ;AAIA,QAAMI,MAAM,GAAG,oBAAQ,MAAM;AACzB,WAAOT,cAAc,CAACG,QAAD,EAAWC,IAAX,EAAiBG,KAAjB,CAArB;AACH,GAFc,EAEZ,CAACP,cAAD,EAAiBG,QAAjB,EAA2BC,IAA3B,EAAiCG,KAAjC,CAFY,CAAf,CAhBqC,CAoBrC;AACA;;AACA,QAAMG,KAAK,GAAG,oBAAQ,MAAM;AACxB,QAAI,CAACJ,MAAL,EAAa;AACT,aAAOD,KAAK,aAAMA,KAAN,UAAkB,EAA9B;AACH;;AAED,UAAMM,MAAM,GAAG,EAAf;;AACA,SAAK,MAAM,CAACC,UAAD,EAAaP,KAAb,CAAX,IAAkCC,MAAlC,EAA0C;AACtC,UAAIM,UAAU,KAAKC,gCAAnB,EAA2C;AACvCF,QAAAA,MAAM,CAACG,IAAP,uBAA2BF,UAA3B,iBAA4CP,KAA5C;AACH;AACJ,KAVuB,CAYxB;;;AACAM,IAAAA,MAAM,CAACG,IAAP,WAAeR,MAAM,CAACS,GAAP,CAAWF,gCAAX,CAAf;AAEA,WAAOF,MAAM,CAACK,IAAP,CAAY,IAAZ,CAAP;AACH,GAhBa,EAgBX,CAACX,KAAD,EAAQC,MAAR,CAhBW,CAAd;AAkBA,SAAO;AACHI,IAAAA,KADG;AAEHF,IAAAA,GAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CA7CM","sourcesContent":["import { useMemo } from 'react';\nimport { UNCONSTRAINED_SIZE_KEY } from './useImage';\n\n/**\n * The talon for working with ResourceImages.\n * Does all the work of generating src, srcSet, and sizes attributes.\n *\n * @param {func}    props.generateSrcset - A function that returns a srcSet.\n * @param {number}  props.height - The height to request for the fallback image for browsers that don't support srcset / sizes.\n * @param {string}  props.resource - The Magento path to the image ex: /v/d/vd12-rn_main_2.jpg\n * @param {func}    props.resourceUrl - A function that returns the full URL for the Magento resource.\n * @param {string}  props.type - The Magento image type (\"image-category\" / \"image-product\"). Used to build the resource URL.\n * @param {number}  props.width - The width to request for the fallback image for browsers that don't support srcset / sizes.\n * @param {Map}     props.widths - The map of breakpoints to possible widths used to create the img's sizes attribute.\n * @param {number}   props.ratio is the image width to height ratio. Defaults to 4/5.\n */\nexport const useResourceImage = props => {\n    const {\n        generateSrcset,\n        generateUrl,\n        height,\n        resource,\n        type,\n        width,\n        widths,\n        ratio\n    } = props;\n\n    const src = useMemo(() => {\n        return generateUrl(resource, type)(width, height);\n    }, [generateUrl, height, resource, type, width]);\n\n    const srcSet = useMemo(() => {\n        return generateSrcset(resource, type, ratio);\n    }, [generateSrcset, resource, type, ratio]);\n\n    // Example: 100px\n    // Example: (max-width: 640px) 50px, 100px\n    const sizes = useMemo(() => {\n        if (!widths) {\n            return width ? `${width}px` : '';\n        }\n\n        const result = [];\n        for (const [breakpoint, width] of widths) {\n            if (breakpoint !== UNCONSTRAINED_SIZE_KEY) {\n                result.push(`(max-width: ${breakpoint}px) ${width}px`);\n            }\n        }\n\n        // Add the unconstrained size at the end.\n        result.push(`${widths.get(UNCONSTRAINED_SIZE_KEY)}px`);\n\n        return result.join(', ');\n    }, [width, widths]);\n\n    return {\n        sizes,\n        src,\n        srcSet\n    };\n};\n"]}