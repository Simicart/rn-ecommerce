{"version":3,"sources":["useBreadcrumbs.js"],"names":["sortCrumbs","a","b","category_level","getPath","path","suffix","useBreadcrumbs","props","categoryId","query","data","loading","error","variables","category_id","categoryUrlSuffix","category","url_suffix","normalizedData","breadcrumbData","breadcrumbs","sort","map","text","category_name","category_url_path","currentCategory","name","currentCategoryPath","url_path","isLoading","hasError"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;AACA,MAAMA,UAAU,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,cAAF,GAAmBD,CAAC,CAACC,cAAlD,C,CAEA;;;AACA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC9B,MAAID,IAAJ,EAAU;AACN,sBAAWA,IAAX,SAAkBC,MAAlB;AACH,GAH6B,CAK9B;;;AACA,SAAO,GAAP;AACH,CAPD;AASA;;;;;;;;;;;;;;;AAaO,MAAMC,cAAc,GAAGC,KAAK,IAAI;AACnC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAwBF,KAA9B;AAEA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2B,sBAASH,KAAT,EAAgB;AAC7CI,IAAAA,SAAS,EAAE;AAAEC,MAAAA,WAAW,EAAEN;AAAf;AADkC,GAAhB,CAAjC,CAHmC,CAOnC;;AACA,QAAMO,iBAAiB,GAAIL,IAAI,IAAIA,IAAI,CAACM,QAAL,CAAcC,UAAvB,IAAsC,OAAhE,CARmC,CAUnC;;AACA,QAAMC,cAAc,GAAG,oBAAQ,MAAM;AACjC,QAAI,CAACP,OAAD,IAAYD,IAAhB,EAAsB;AAClB,YAAMS,cAAc,GAAGT,IAAI,CAACM,QAAL,CAAcI,WAArC;AAEA,aACID,cAAc,IACdA,cAAc,CAACE,IAAf,CAAoBtB,UAApB,EAAgCuB,GAAhC,CAAoCN,QAAQ,KAAK;AAC7CO,QAAAA,IAAI,EAAEP,QAAQ,CAACQ,aAD8B;AAE7CpB,QAAAA,IAAI,EAAED,OAAO,CAACa,QAAQ,CAACS,iBAAV,EAA6BV,iBAA7B;AAFgC,OAAL,CAA5C,CAFJ;AAOH;AACJ,GAZsB,EAYpB,CAACA,iBAAD,EAAoBL,IAApB,EAA0BC,OAA1B,CAZoB,CAAvB;AAcA,SAAO;AACHe,IAAAA,eAAe,EAAGhB,IAAI,IAAIA,IAAI,CAACM,QAAL,CAAcW,IAAvB,IAAgC,EAD9C;AAEHC,IAAAA,mBAAmB,EACdlB,IAAI,cAAOA,IAAI,CAACM,QAAL,CAAca,QAArB,SAAgCd,iBAAhC,CAAL,IAA6D,GAH9D;AAIHe,IAAAA,SAAS,EAAEnB,OAJR;AAKHoB,IAAAA,QAAQ,EAAE,CAAC,CAACnB,KALT;AAMHM,IAAAA,cAAc,EAAEA,cAAc,IAAI;AAN/B,GAAP;AAQH,CAjCM","sourcesContent":["import { useMemo } from 'react';\nimport { useQuery } from '@apollo/client';\n\n// Just incase the data is unsorted, lets sort it.\nconst sortCrumbs = (a, b) => a.category_level > b.category_level;\n\n// Generates the path for the category.\nconst getPath = (path, suffix) => {\n    if (path) {\n        return `/${path}${suffix}`;\n    }\n\n    // If there is no path this is just a dead link.\n    return '#';\n};\n\n/**\n * Returns props necessary to render a Breadcrumbs component.\n *\n * @param {object} props\n * @param {object} props.query - the breadcrumb query\n * @param {string} props.categoryId - the id of the category for which to generate breadcrumbs\n * @return {{\n *   currentCategory: string,\n *   currentCategoryPath: string,\n *   isLoading: boolean,\n *   normalizedData: array\n * }}\n */\nexport const useBreadcrumbs = props => {\n    const { categoryId, query } = props;\n\n    const { data, loading, error } = useQuery(query, {\n        variables: { category_id: categoryId }\n    });\n\n    // Default to .html for when the query has not yet returned.\n    const categoryUrlSuffix = (data && data.category.url_suffix) || '.html';\n\n    // When we have breadcrumb data sort and normalize it for easy rendering.\n    const normalizedData = useMemo(() => {\n        if (!loading && data) {\n            const breadcrumbData = data.category.breadcrumbs;\n\n            return (\n                breadcrumbData &&\n                breadcrumbData.sort(sortCrumbs).map(category => ({\n                    text: category.category_name,\n                    path: getPath(category.category_url_path, categoryUrlSuffix)\n                }))\n            );\n        }\n    }, [categoryUrlSuffix, data, loading]);\n\n    return {\n        currentCategory: (data && data.category.name) || '',\n        currentCategoryPath:\n            (data && `${data.category.url_path}${categoryUrlSuffix}`) || '#',\n        isLoading: loading,\n        hasError: !!error,\n        normalizedData: normalizedData || []\n    };\n};\n"]}