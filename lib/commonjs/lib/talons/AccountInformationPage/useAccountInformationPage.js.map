{"version":3,"sources":["useAccountInformationPage.js"],"names":["useAccountInformationPage","props","mutations","setCustomerInformationMutation","changeCustomerPasswordMutation","queries","getCustomerInformationQuery","isSignedIn","shouldShowNewPassword","setShouldShowNewPassword","isUpdateMode","setIsUpdateMode","displayError","setDisplayError","data","accountInformationData","error","loadDataError","skip","fetchPolicy","nextFetchPolicy","setCustomerInformation","customerInformationUpdateError","loading","isUpdatingCustomerInformation","changeCustomerPassword","customerPasswordChangeError","isChangingCustomerPassword","initialValues","customer","handleChangePassword","handleCancel","showUpdateMode","handleSubmit","email","firstname","lastname","password","newPassword","trim","variables","customerInput","currentPassword","errors","formErrors","isDisabled"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useUserContext } from '../../context/user';\n\nexport const useAccountInformationPage = props => {\n    const {\n        mutations: {\n            setCustomerInformationMutation,\n            changeCustomerPasswordMutation\n        },\n        queries: { getCustomerInformationQuery }\n    } = props;\n\n    const [{ isSignedIn }] = useUserContext();\n    const [shouldShowNewPassword, setShouldShowNewPassword] = useState(false);\n\n    const [isUpdateMode, setIsUpdateMode] = useState(false);\n\n    // Use local state to determine whether to display errors or not.\n    // Could be replaced by a \"reset mutation\" function from apollo client.\n    // https://github.com/apollographql/apollo-feature-requests/issues/170\n    const [displayError, setDisplayError] = useState(false);\n\n    const { data: accountInformationData, error: loadDataError } = useQuery(\n        getCustomerInformationQuery,\n        {\n            skip: !isSignedIn,\n            fetchPolicy: 'cache-and-network',\n            nextFetchPolicy: 'cache-first'\n        }\n    );\n\n    const [\n        setCustomerInformation,\n        {\n            error: customerInformationUpdateError,\n            loading: isUpdatingCustomerInformation\n        }\n    ] = useMutation(setCustomerInformationMutation);\n\n    const [\n        changeCustomerPassword,\n        {\n            error: customerPasswordChangeError,\n            loading: isChangingCustomerPassword\n        }\n    ] = useMutation(changeCustomerPasswordMutation);\n\n    const initialValues = useMemo(() => {\n        if (accountInformationData) {\n            return { customer: accountInformationData.customer };\n        }\n    }, [accountInformationData]);\n\n    const handleChangePassword = useCallback(() => {\n        setShouldShowNewPassword(true);\n    }, [setShouldShowNewPassword]);\n\n    const handleCancel = useCallback(() => {\n        setIsUpdateMode(false);\n        setShouldShowNewPassword(false);\n    }, [setIsUpdateMode]);\n\n    const showUpdateMode = useCallback(() => {\n        setIsUpdateMode(true);\n\n        // If there were errors from removing/updating info, hide them\n        // when we open the modal.\n        setDisplayError(false);\n    }, [setIsUpdateMode]);\n\n    const handleSubmit = useCallback(\n        async ({ email, firstname, lastname, password, newPassword }) => {\n            try {\n                email = email.trim();\n                firstname = firstname.trim();\n                lastname = lastname.trim();\n                password = password.trim();\n                newPassword = newPassword ? newPassword.trim() : newPassword;\n\n                if (\n                    initialValues.customer.email !== email ||\n                    initialValues.customer.firstname !== firstname ||\n                    initialValues.customer.lastname !== lastname\n                ) {\n                    await setCustomerInformation({\n                        variables: {\n                            customerInput: {\n                                email,\n                                firstname,\n                                lastname,\n                                // You must send password because it is required\n                                // when changing email.\n                                password\n                            }\n                        }\n                    });\n                }\n                if (password && newPassword) {\n                    await changeCustomerPassword({\n                        variables: {\n                            currentPassword: password,\n                            newPassword: newPassword\n                        }\n                    });\n                }\n                // After submission, close the form if there were no errors.\n                handleCancel(false);\n            } catch {\n                // Make sure any errors from the mutation are displayed.\n                setDisplayError(true);\n\n                // we have an onError link that logs errors, and FormError\n                // already renders this error, so just return to avoid\n                // triggering the success callback\n                return;\n            }\n        },\n        [\n            setCustomerInformation,\n            handleCancel,\n            changeCustomerPassword,\n            initialValues\n        ]\n    );\n\n    const errors = displayError\n        ? [customerInformationUpdateError, customerPasswordChangeError]\n        : [];\n\n    return {\n        handleCancel,\n        formErrors: errors,\n        handleSubmit,\n        handleChangePassword,\n        initialValues,\n        isDisabled: isUpdatingCustomerInformation || isChangingCustomerPassword,\n        isUpdateMode,\n        isSignedIn,\n        loadDataError,\n        shouldShowNewPassword,\n        showUpdateMode\n    };\n};\n"]}