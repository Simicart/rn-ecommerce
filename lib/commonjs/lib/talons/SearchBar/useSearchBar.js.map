{"version":3,"sources":["useSearchBar.js"],"names":["initialValues","search_query","useSearchBar","valid","setValid","elementRef","expanded","isAutoCompleteOpen","setExpanded","setIsAutoCompleteOpen","history","push","handleChange","value","hasValue","isValid","length","handleFocus","handleSubmit","trim","containerRef"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA,MAAMA,aAAa,GAAG;AAAEC,EAAAA,YAAY,EAAE;AAAhB,CAAtB;;AAEO,MAAMC,YAAY,GAAG,MAAM;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAAS,KAAT,CAA1B;AACA,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,QAAQ,EAAEC,kBAFR;AAGFC,IAAAA,WAAW,EAAEC;AAHX,MAIF,+BAJJ;AAKA,QAAMC,OAAO,GAAG,iCAAhB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWD,OAAjB,CAR8B,CAU9B;;AACA,QAAME,YAAY,GAAG,wBACjBC,KAAK,IAAI;AACL,UAAMC,QAAQ,GAAG,CAAC,CAACD,KAAnB;AACA,UAAME,OAAO,GAAGD,QAAQ,IAAID,KAAK,CAACG,MAAN,GAAe,CAA3C;AAEAZ,IAAAA,QAAQ,CAACW,OAAD,CAAR;AACAN,IAAAA,qBAAqB,CAACK,QAAD,CAArB;AACH,GAPgB,EAQjB,CAACL,qBAAD,EAAwBL,QAAxB,CARiB,CAArB,CAX8B,CAsB9B;;AACA,QAAMa,WAAW,GAAG,wBAAY,MAAM;AAClCR,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH,GAFmB,EAEjB,CAACA,qBAAD,CAFiB,CAApB,CAvB8B,CA2B9B;;AACA,QAAMS,YAAY,GAAG,wBACjB,CAAC;AAAEjB,IAAAA;AAAF,GAAD,KAAsB;AAClB,QAAIA,YAAY,IAAI,IAAhB,IAAwBA,YAAY,CAACkB,IAAb,GAAoBH,MAApB,GAA6B,CAAzD,EAA4D;AACxDL,MAAAA,IAAI,8BAAuBV,YAAvB,EAAJ;AACAQ,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACH;AACJ,GANgB,EAOjB,CAACE,IAAD,EAAOF,qBAAP,CAPiB,CAArB;AAUA,SAAO;AACHW,IAAAA,YAAY,EAAEf,UADX;AAEHO,IAAAA,YAFG;AAGHK,IAAAA,WAHG;AAIHC,IAAAA,YAJG;AAKHlB,IAAAA,aALG;AAMHO,IAAAA,kBANG;AAOHE,IAAAA,qBAPG;AAQHL,IAAAA,QARG;AASHD,IAAAA;AATG,GAAP;AAWH,CAjDM","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useDropdown } from '../../hooks/useDropdown';\n\nconst initialValues = { search_query: '' };\n\nexport const useSearchBar = () => {\n    const [valid, setValid] = useState(false);\n    const {\n        elementRef,\n        expanded: isAutoCompleteOpen,\n        setExpanded: setIsAutoCompleteOpen\n    } = useDropdown();\n    const history = useHistory();\n    const { push } = history;\n\n    // expand or collapse on input change\n    const handleChange = useCallback(\n        value => {\n            const hasValue = !!value;\n            const isValid = hasValue && value.length > 2;\n\n            setValid(isValid);\n            setIsAutoCompleteOpen(hasValue);\n        },\n        [setIsAutoCompleteOpen, setValid]\n    );\n\n    // expand on focus\n    const handleFocus = useCallback(() => {\n        setIsAutoCompleteOpen(true);\n    }, [setIsAutoCompleteOpen]);\n\n    // navigate on submit\n    const handleSubmit = useCallback(\n        ({ search_query }) => {\n            if (search_query != null && search_query.trim().length > 0) {\n                push(`/search.html?query=${search_query}`);\n                setIsAutoCompleteOpen(false);\n            }\n        },\n        [push, setIsAutoCompleteOpen]\n    );\n\n    return {\n        containerRef: elementRef,\n        handleChange,\n        handleFocus,\n        handleSubmit,\n        initialValues,\n        isAutoCompleteOpen,\n        setIsAutoCompleteOpen,\n        setValid,\n        valid\n    };\n};\n"]}