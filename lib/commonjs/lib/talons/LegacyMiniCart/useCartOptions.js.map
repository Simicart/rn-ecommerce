{"version":3,"sources":["useCartOptions.js"],"names":["isItemMissingOptions","cartItem","configItem","numSelections","product_type","configurable_options","numProductOptions","length","useCartOptions","props","addConfigurableProductToCartMutation","addSimpleProductToCartMutation","createCartMutation","endEditItem","getCartDetailsQuery","removeItemMutation","updateItemMutation","cartItemOptions","product","quantity","qty","name","price","regularPrice","amount","initialQuantity","updateItemInCart","addConfigurableProductToCart","addSimpleProductToCart","fetchCartId","removeItem","updateItem","fetchCartDetails","initialOptionSelections","result","Map","forEach","cartItemOption","set","id","value_id","optionSelections","setOptionSelections","setQuantity","handleCancel","handleSelectionChange","optionId","selection","nextOptionSelections","Number","handleUpdate","payload","item","productType","__typename","cartItemId","addItemMutation","handleValueChange","value","parseInt","isMissingOptions","size","optionsChanged","key","val","testVal","get","touched","itemName","itemPrice","isUpdateDisabled"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\nimport { useAwaitQuery } from '@magento/peregrine/lib/hooks/useAwaitQuery';\n\nimport { appendOptionsToPayload } from '../../util/appendOptionsToPayload';\nimport { isProductConfigurable } from '../../util/isProductConfigurable';\n\nconst isItemMissingOptions = (cartItem, configItem, numSelections) => {\n    // Non-configurable products can't be missing options\n    if (cartItem.product_type !== 'configurable') {\n        return false;\n    }\n\n    // Configurable products are missing options if we have fewer\n    // option selections than the product has options.\n    const { configurable_options } = configItem;\n    const numProductOptions = configurable_options.length;\n\n    return numSelections < numProductOptions;\n};\n\nexport const useCartOptions = props => {\n    const {\n        addConfigurableProductToCartMutation,\n        addSimpleProductToCartMutation,\n        cartItem,\n        configItem,\n        createCartMutation,\n        endEditItem,\n        getCartDetailsQuery,\n        removeItemMutation,\n        updateItemMutation\n    } = props;\n\n    const {\n        configurable_options: cartItemOptions,\n        product,\n        quantity: qty\n    } = cartItem;\n    const { name, price } = product;\n    const { regularPrice } = price;\n    const { amount } = regularPrice;\n    const initialQuantity = qty;\n\n    const [, { updateItemInCart }] = useCartContext();\n\n    const [addConfigurableProductToCart] = useMutation(\n        addConfigurableProductToCartMutation\n    );\n    const [addSimpleProductToCart] = useMutation(\n        addSimpleProductToCartMutation\n    );\n    const [fetchCartId] = useMutation(createCartMutation);\n    const [removeItem] = useMutation(removeItemMutation);\n    const [updateItem] = useMutation(updateItemMutation);\n    const fetchCartDetails = useAwaitQuery(getCartDetailsQuery);\n\n    const initialOptionSelections = useMemo(() => {\n        const result = new Map();\n\n        if (cartItemOptions) {\n            cartItemOptions.forEach(cartItemOption => {\n                result.set(cartItemOption.id, cartItemOption.value_id);\n            });\n        }\n\n        return result;\n    }, [cartItemOptions]);\n\n    const [optionSelections, setOptionSelections] = useState(\n        initialOptionSelections\n    );\n\n    const [quantity, setQuantity] = useState(initialQuantity);\n\n    const handleCancel = useCallback(() => {\n        endEditItem();\n    }, [endEditItem]);\n\n    const handleSelectionChange = useCallback(\n        (optionId, selection) => {\n            // We must create a new Map here so that React knows that the value\n            // of optionSelections has changed.\n            const nextOptionSelections = new Map([...optionSelections]);\n            // There's a type difference in configurable option queries between\n            // cart and product, casting to number is required. Can remove\n            // cast once MC-29839 is resolved.\n            nextOptionSelections.set(Number(optionId), selection);\n            setOptionSelections(nextOptionSelections);\n        },\n        [optionSelections]\n    );\n\n    const handleUpdate = useCallback(async () => {\n        // configItem is the updated item with new option selections\n        // cartItem is the item currently in cart\n        const payload = {\n            item: configItem,\n            productType: configItem.__typename,\n            quantity,\n            cartItemId: cartItem.id\n        };\n\n        if (isProductConfigurable(configItem)) {\n            appendOptionsToPayload(payload, optionSelections);\n        }\n\n        // Provide the proper addItemMutation for the product type.\n        let addItemMutation;\n        if (payload.productType === 'ConfigurableProduct') {\n            addItemMutation = addConfigurableProductToCart;\n        } else {\n            addItemMutation = addSimpleProductToCart;\n        }\n\n        await updateItemInCart({\n            ...payload,\n            addItemMutation,\n            fetchCartDetails,\n            fetchCartId,\n            removeItem,\n            updateItem\n        });\n        endEditItem();\n    }, [\n        configItem,\n        quantity,\n        cartItem.id,\n        updateItemInCart,\n        fetchCartDetails,\n        fetchCartId,\n        removeItem,\n        updateItem,\n        endEditItem,\n        optionSelections,\n        addConfigurableProductToCart,\n        addSimpleProductToCart\n    ]);\n\n    const handleValueChange = useCallback(\n        value => {\n            // Ensure that quantity remains an int.\n            setQuantity(parseInt(value));\n        },\n        [setQuantity]\n    );\n\n    const isMissingOptions = isItemMissingOptions(\n        cartItem,\n        configItem,\n        optionSelections.size\n    );\n\n    const optionsChanged = useMemo(() => {\n        for (const [key, val] of initialOptionSelections) {\n            const testVal = optionSelections.get(key);\n            if (testVal !== val) {\n                return true;\n            }\n        }\n        return false;\n    }, [initialOptionSelections, optionSelections]);\n\n    const touched = useMemo(() => {\n        return quantity !== initialQuantity || optionsChanged;\n    }, [quantity, initialQuantity, optionsChanged]);\n\n    return {\n        itemName: name,\n        itemPrice: amount.value,\n        initialQuantity,\n        handleCancel,\n        handleSelectionChange,\n        handleUpdate,\n        handleValueChange,\n        isUpdateDisabled: isMissingOptions || !touched\n    };\n};\n"]}