{"version":3,"sources":["useProduct.js"],"names":["useProduct","props","mapProduct","queries","urlKey","error","loading","data","getProductQuery","fetchPolicy","nextFetchPolicy","variables","product","products","items","find","item","url_key"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;AAgBO,MAAMA,UAAU,GAAGC,KAAK,IAAI;AAC/B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA;AAAvB,MAAkCH,KAAxC;AAEA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA2B,sBAASJ,OAAO,CAACK,eAAjB,EAAkC;AAC/DC,IAAAA,WAAW,EAAE,mBADkD;AAE/DC,IAAAA,eAAe,EAAE,aAF8C;AAG/DC,IAAAA,SAAS,EAAE;AACPP,MAAAA;AADO;AAHoD,GAAlC,CAAjC;AAQA,QAAMQ,OAAO,GAAG,oBAAQ,MAAM;AAC1B,QAAI,CAACL,IAAL,EAAW;AACP;AACA,aAAO,IAAP;AACH,KAJyB,CAM1B;AACA;AAEA;;;AACA,UAAMK,OAAO,GAAGL,IAAI,CAACM,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CACZC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiBb,MADb,CAAhB;;AAIA,QAAI,CAACQ,OAAL,EAAc;AACV,aAAO,IAAP;AACH;;AAED,WAAOV,UAAU,CAACU,OAAD,CAAjB;AACH,GAnBe,EAmBb,CAACL,IAAD,EAAOL,UAAP,EAAmBE,MAAnB,CAnBa,CAAhB;AAqBA,SAAO;AACHC,IAAAA,KADG;AAEHC,IAAAA,OAFG;AAGHM,IAAAA;AAHG,GAAP;AAKH,CArCM","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { useMemo } from 'react';\n\n/**\n * A [React Hook]{@link https://reactjs.org/docs/hooks-intro.html} that\n * controls the logic for the Product Root Component.\n *\n * @kind function\n *\n * @param {object}      props\n * @param {Function}    props.mapProduct - A function for updating products to the proper shape.\n * @param {GraphQLAST}  props.queries.getProductQuery - Fetches product using a server query\n * @param {String}      props.urlKey - The url_key of this product.\n *\n * @returns {object}    result\n * @returns {Bool}      result.error - Indicates a network error occurred.\n * @returns {Bool}      result.loading - Indicates the query is in flight.\n * @returns {Bool}      result.product - The product's details.\n */\nexport const useProduct = props => {\n    const { mapProduct, queries, urlKey } = props;\n\n    const { error, loading, data } = useQuery(queries.getProductQuery, {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy: 'cache-first',\n        variables: {\n            urlKey\n        }\n    });\n\n    const product = useMemo(() => {\n        if (!data) {\n            // The product isn't in the cache and we don't have a response from GraphQL yet.\n            return null;\n        }\n\n        // Note: if a product is out of stock _and_ the backend specifies not to\n        // display OOS items, the items array will be empty.\n\n        // Only return the product that we queried for.\n        const product = data.products.items.find(\n            item => item.url_key === urlKey\n        );\n\n        if (!product) {\n            return null;\n        }\n\n        return mapProduct(product);\n    }, [data, mapProduct, urlKey]);\n\n    return {\n        error,\n        loading,\n        product\n    };\n};\n"]}