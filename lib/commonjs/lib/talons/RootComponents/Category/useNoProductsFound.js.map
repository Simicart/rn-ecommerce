{"version":3,"sources":["useNoProductsFound.js"],"names":["NUM_CATEGORIES_TO_SHOW","isNonDefaultCategory","category","Boolean","parentId","useNoProductsFound","props","categoryId","categories","recommendedCategories","isNotSameCategory","id","filteredCategories","Object","values","filter","numCategories","length","categoriesToRecommend","maxStartIndex","startIndex","Math","floor","random","endIndex","slice"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,sBAAsB,GAAG,CAA/B,C,CAEA;;AACA,MAAMC,oBAAoB,GAAGC,QAAQ,IAAIC,OAAO,CAACD,QAAQ,CAACE,QAAV,CAAhD;AAEA;;;;;;;;;;;AASO,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,KAAvB;AACA,QAAM,CAAC;AAAEE,IAAAA;AAAF,GAAD,IAAmB,iCAAzB;AAEA,QAAMC,qBAAqB,GAAG,oBAAQ,MAAM;AACxC;AACA,UAAMC,iBAAiB,GAAGR,QAAQ,IAAIA,QAAQ,CAACS,EAAT,KAAgBJ,UAAtD;;AAEA,UAAMK,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAcN,UAAd,EACtBO,MADsB,CACfd,oBADe,EAEtBc,MAFsB,CAEfL,iBAFe,CAA3B;AAIA,UAAMM,aAAa,GAAGJ,kBAAkB,CAACK,MAAzC;AAEA,QAAIC,qBAAJ;;AACA,QAAIF,aAAa,IAAIhB,sBAArB,EAA6C;AACzC;AACAkB,MAAAA,qBAAqB,GAAGN,kBAAxB;AACH,KAHD,MAGO;AACH;AACA;AACA,YAAMO,aAAa,GAAGH,aAAa,GAAGhB,sBAAhB,GAAyC,CAA/D;AACA,YAAMoB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,aAA3B,CAAnB;AACA,YAAMK,QAAQ,GAAGJ,UAAU,GAAGpB,sBAA9B;AAEAkB,MAAAA,qBAAqB,GAAGN,kBAAkB,CAACa,KAAnB,CACpBL,UADoB,EAEpBI,QAFoB,CAAxB;AAIH;;AAED,WAAON,qBAAP;AACH,GA5B6B,EA4B3B,CAACX,UAAD,EAAaC,UAAb,CA5B2B,CAA9B;AA8BA,SAAO;AACHC,IAAAA;AADG,GAAP;AAGH,CArCM","sourcesContent":["import { useMemo } from 'react';\nimport { useCatalogContext } from '../../../context/catalog';\n\nconst NUM_CATEGORIES_TO_SHOW = 3;\n\n// The default category does not have a parentId.\nconst isNonDefaultCategory = category => Boolean(category.parentId);\n\n/**\n * Returns props necessary to render a NoProductsFound component.\n *\n * @param {object} props\n * @param {number} props.categoryId - The ID of the category that has no products.\n *\n * @returns {object}\n * @param {array} recommendedCategories - A list of categories for the UI to recommend.\n */\nexport const useNoProductsFound = props => {\n    const { categoryId } = props;\n    const [{ categories }] = useCatalogContext();\n\n    const recommendedCategories = useMemo(() => {\n        // We know this category is empty, don't recommend it.\n        const isNotSameCategory = category => category.id !== categoryId;\n\n        const filteredCategories = Object.values(categories)\n            .filter(isNonDefaultCategory)\n            .filter(isNotSameCategory);\n\n        const numCategories = filteredCategories.length;\n\n        let categoriesToRecommend;\n        if (numCategories <= NUM_CATEGORIES_TO_SHOW) {\n            // Not enough categories to randomize, just take them all.\n            categoriesToRecommend = filteredCategories;\n        } else {\n            // We have more categories than we want to show.\n            // Randomly select a subset of them.\n            const maxStartIndex = numCategories - NUM_CATEGORIES_TO_SHOW + 1;\n            const startIndex = Math.floor(Math.random() * maxStartIndex);\n            const endIndex = startIndex + NUM_CATEGORIES_TO_SHOW;\n\n            categoriesToRecommend = filteredCategories.slice(\n                startIndex,\n                endIndex\n            );\n        }\n\n        return categoriesToRecommend;\n    }, [categoryId, categories]);\n\n    return {\n        recommendedCategories\n    };\n};\n"]}