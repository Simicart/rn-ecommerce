{"version":3,"sources":["useSavedPaymentsPage.js"],"names":["normalizeTokens","responseData","paymentTokens","customerPaymentTokens","items","map","details","public_hash","payment_method_code","JSON","parse","useSavedPaymentsPage","props","queries","getSavedPaymentsQuery","actions","setPageLoading","history","isSignedIn","data","savedPaymentsData","loading","fetchPolicy","nextFetchPolicy","skip","push","handleAddPayment","savedPayments","isLoading"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AAEO,MAAMA,eAAe,GAAGC,YAAY,IAAI;AAC3C,QAAMC,aAAa,GACdD,YAAY,IAAIA,YAAY,CAACE,qBAAb,CAAmCC,KAApD,IAA8D,EADlE;AAGA,SAAOF,aAAa,CAACG,GAAd,CACH,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,GAAD,MAAoD;AAChD;AACAF,IAAAA,OAAO,EAAEG,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAFuC;AAGhDC,IAAAA,WAHgD;AAIhDC,IAAAA;AAJgD,GAApD,CADG,CAAP;AAQH,CAZM;AAaP;;;;;;;;;;;;;;;;;;AAcO,MAAMG,oBAAoB,GAAGC,KAAK,IAAI;AACzC,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFF,KAFJ;AAIA,QAAM,GAEF;AACIG,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADb,GAFE,IAKF,yBALJ;AAMA,QAAMC,OAAO,GAAG,iCAAhB;AACA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,IAAmB,2BAAzB;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC,iBAAR;AAA2BC,IAAAA;AAA3B,MAAuC,sBACzCP,qBADyC,EAEzC;AACIQ,IAAAA,WAAW,EAAE,mBADjB;AAEIC,IAAAA,eAAe,EAAE,aAFrB;AAGIC,IAAAA,IAAI,EAAE,CAACN;AAHX,GAFyC,CAA7C,CAdyC,CAuBzC;;AACA,wBAAU,MAAM;AACZ,QAAI,CAACA,UAAL,EAAiB;AACbD,MAAAA,OAAO,CAACQ,IAAR,CAAa,GAAb;AACH;AACJ,GAJD,EAIG,CAACR,OAAD,EAAUC,UAAV,CAJH,EAxByC,CA8BzC;;AACA,wBAAU,MAAM;AACZF,IAAAA,cAAc,CAACK,OAAD,CAAd;AACH,GAFD,EAEG,CAACA,OAAD,EAAUL,cAAV,CAFH;AAIA,QAAMU,gBAAgB,GAAG,wBAAY,MAAM,CACvC;AACH,GAFwB,EAEtB,EAFsB,CAAzB;AAIA,QAAMC,aAAa,GAAG3B,eAAe,CAACoB,iBAAD,CAArC;AAEA,SAAO;AACHM,IAAAA,gBADG;AAEHE,IAAAA,SAAS,EAAEP,OAFR;AAGHM,IAAAA;AAHG,GAAP;AAKH,CA9CM;AAgDP;;AAEA;;;;;;;;;;;AAWA","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\n\nimport { useAppContext } from '@magento/peregrine/lib/context/app';\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\n\nexport const normalizeTokens = responseData => {\n    const paymentTokens =\n        (responseData && responseData.customerPaymentTokens.items) || [];\n\n    return paymentTokens.map(\n        ({ details, public_hash, payment_method_code }) => ({\n            // details is a stringified object.\n            details: JSON.parse(details),\n            public_hash,\n            payment_method_code\n        })\n    );\n};\n/**\n * This talon contains logic for a saved payment page component.\n * It performs effects and returns prop data for rendering the component.\n *\n * @function\n *\n * @param {Object} props\n * @param {SavedPaymentsPageQueries} props.queries GraphQL queries\n *\n * @returns {SavedPaymentsPageTalonProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useSavedPayments } from '@magento/peregrine/lib/talons/SavedPaymentsPage/useSavedPaymentsPage';\n */\nexport const useSavedPaymentsPage = props => {\n    const {\n        queries: { getSavedPaymentsQuery }\n    } = props;\n\n    const [\n        ,\n        {\n            actions: { setPageLoading }\n        }\n    ] = useAppContext();\n    const history = useHistory();\n    const [{ isSignedIn }] = useUserContext();\n\n    const { data: savedPaymentsData, loading } = useQuery(\n        getSavedPaymentsQuery,\n        {\n            fetchPolicy: 'cache-and-network',\n            nextFetchPolicy: 'cache-first',\n            skip: !isSignedIn\n        }\n    );\n\n    // If the user is no longer signed in, redirect to the home page.\n    useEffect(() => {\n        if (!isSignedIn) {\n            history.push('/');\n        }\n    }, [history, isSignedIn]);\n\n    // Update the page indicator if the GraphQL query is in flight.\n    useEffect(() => {\n        setPageLoading(loading);\n    }, [loading, setPageLoading]);\n\n    const handleAddPayment = useCallback(() => {\n        // TODO in PWA-637\n    }, []);\n\n    const savedPayments = normalizeTokens(savedPaymentsData);\n\n    return {\n        handleAddPayment,\n        isLoading: loading,\n        savedPayments\n    };\n};\n\n/** JSDoc type definitions */\n\n/**\n * GraphQL formatted string queries used in this talon.\n *\n * @typedef {Object} SavedPaymentsPageQueries\n *\n * @property {GraphQLAST} getSavedPaymentsQuery Query for getting saved payments. See https://devdocs.magento.com/guides/v2.4/graphql/queries/customer-payment-tokens.html\n *\n * @see [savedPaymentsPage.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/SavedPaymentsPage/savedPaymentsPage.gql.js}\n * for queries used in Venia\n */\n\n/**\n * Props data to use when rendering a cart page component.\n *\n * @typedef {Object} SavedPaymentsPageTalonProps\n *\n * @property {function} handleAddPayment Callback function to add a payment.\n * @property {boolean} isLoading true if the query is refreshing from network\n * @property {Array<Object>} savedPayments  An array of saved payment data.\n */\n"]}