{"version":3,"sources":["useCategoryTree.js"],"names":["useCategoryTree","props","categories","categoryId","query","updateCategories","runQuery","queryResult","data","variables","id","category","rootCategory","children","childCategories","Map","include_in_menu","url_path","set","isLeaf","parseInt","children_count"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAMA;;;;AAIA;;;;;;;;;;AAUO,MAAMA,eAAe,GAAGC,KAAK,IAAI;AACpC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAAsDJ,KAA5D;AAEA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0B,0BAAaH,KAAb,CAAhC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAWD,WAAjB,CAJoC,CAMpC;;AACA,wBAAU,MAAM;AACZ,QAAIJ,UAAU,IAAI,IAAlB,EAAwB;AACpBG,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,SAAS,EAAE;AAAEC,UAAAA,EAAE,EAAEP;AAAN;AAAb,OAAD,CAAR;AACH;AACJ,GAJD,EAIG,CAACA,UAAD,EAAaG,QAAb,CAJH,EAPoC,CAapC;;AACA,wBAAU,MAAM;AACZ,QAAIE,IAAI,IAAIA,IAAI,CAACG,QAAjB,EAA2B;AACvBN,MAAAA,gBAAgB,CAACG,IAAI,CAACG,QAAN,CAAhB;AACH;AACJ,GAJD,EAIG,CAACH,IAAD,EAAOH,gBAAP,CAJH;AAMA,QAAMO,YAAY,GAAGV,UAAU,CAACC,UAAD,CAA/B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAeD,YAAY,IAAI,EAArC;AAEA,QAAME,eAAe,GAAG,oBAAQ,MAAM;AAClC,UAAMA,eAAe,GAAG,IAAIC,GAAJ,EAAxB,CADkC,CAGlC;;AACA,QACIH,YAAY,IACZA,YAAY,CAACI,eADb,IAEAJ,YAAY,CAACK,QAHjB,EAIE;AACEH,MAAAA,eAAe,CAACI,GAAhB,CAAoBN,YAAY,CAACF,EAAjC,EAAqC;AACjCC,QAAAA,QAAQ,EAAEC,YADuB;AAEjCO,QAAAA,MAAM,EAAE;AAFyB,OAArC;AAIH;;AAED,SAAK,MAAMT,EAAX,IAAiBG,QAAQ,IAAI,EAA7B,EAAiC;AAC7B,YAAMF,QAAQ,GAAGT,UAAU,CAACQ,EAAD,CAA3B;AACA,YAAMS,MAAM,GAAG,CAACC,QAAQ,CAACT,QAAQ,CAACU,cAAV,CAAxB;AAEAP,MAAAA,eAAe,CAACI,GAAhB,CAAoBR,EAApB,EAAwB;AAAEC,QAAAA,QAAF;AAAYQ,QAAAA;AAAZ,OAAxB;AACH;;AAED,WAAOL,eAAP;AACH,GAvBuB,EAuBrB,CAACZ,UAAD,EAAaW,QAAb,EAAuBD,YAAvB,CAvBqB,CAAxB;AAyBA,SAAO;AAAEE,IAAAA,eAAF;AAAmBN,IAAAA;AAAnB,GAAP;AACH,CAjDM","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useLazyQuery } from '@apollo/client';\n\n/**\n * @typedef {object} CategoryNode\n * @prop {object} category - category data\n * @prop {boolean} isLeaf - true if the category has no children\n */\n\n/**\n * @typedef { import(\"graphql\").DocumentNode } DocumentNode\n */\n\n/**\n * Returns props necessary to render a CategoryTree component.\n *\n * @param {object} props\n * @param {object} props.categories - all fetched categories\n * @param {number} props.categoryId - category id for this node\n * @param {DocumentNode} props.query - GraphQL query\n * @param {function} props.updateCategories - bound action creator\n * @return {{ childCategories: Map<number, CategoryNode> }}\n */\nexport const useCategoryTree = props => {\n    const { categories, categoryId, query, updateCategories } = props;\n\n    const [runQuery, queryResult] = useLazyQuery(query);\n    const { data } = queryResult;\n\n    // fetch categories\n    useEffect(() => {\n        if (categoryId != null) {\n            runQuery({ variables: { id: categoryId } });\n        }\n    }, [categoryId, runQuery]);\n\n    // update redux with fetched categories\n    useEffect(() => {\n        if (data && data.category) {\n            updateCategories(data.category);\n        }\n    }, [data, updateCategories]);\n\n    const rootCategory = categories[categoryId];\n    const { children } = rootCategory || {};\n\n    const childCategories = useMemo(() => {\n        const childCategories = new Map();\n\n        // Add the root category when appropriate.\n        if (\n            rootCategory &&\n            rootCategory.include_in_menu &&\n            rootCategory.url_path\n        ) {\n            childCategories.set(rootCategory.id, {\n                category: rootCategory,\n                isLeaf: true\n            });\n        }\n\n        for (const id of children || '') {\n            const category = categories[id];\n            const isLeaf = !parseInt(category.children_count);\n\n            childCategories.set(id, { category, isLeaf });\n        }\n\n        return childCategories;\n    }, [categories, children, rootCategory]);\n\n    return { childCategories, data };\n};\n"]}