{"version":3,"sources":["useAccountMenu.js"],"names":["useAccountMenu","props","mutations","accountMenuIsOpen","setAccountMenuIsOpen","signOut","signOutMutation","view","setView","username","setUsername","apolloClient","history","location","revokeToken","isSignedIn","isUserSignedIn","handleSignOut","go","handleForgotPassword","handleCancel","handleCreateAccount","handleAccountCreation","updateUsername"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;AAkBO,MAAMA,cAAc,GAAGC,KAAK,IAAI;AACnC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,iBAAb;AAAgCC,IAAAA;AAAhC,MAAyDH,KAA/D;AACA,QAAM;AAAEI,IAAAA,OAAO,EAAEC;AAAX,MAA+BJ,SAArC;AAEA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkB,qBAAS,QAAT,CAAxB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B,qBAAS,EAAT,CAAhC;AAEA,QAAMC,YAAY,GAAG,8BAArB;AACA,QAAMC,OAAO,GAAG,iCAAhB;AACA,QAAMC,QAAQ,GAAG,kCAAjB;AACA,QAAM,CAACC,WAAD,IAAgB,yBAAYR,eAAZ,CAAtB;AACA,QAAM,CAAC;AAAES,IAAAA,UAAU,EAAEC;AAAd,GAAD,EAAiC;AAAEX,IAAAA;AAAF,GAAjC,IAAgD,2BAAtD;AAEA,QAAMY,aAAa,GAAG,wBAAY,YAAY;AAC1CT,IAAAA,OAAO,CAAC,QAAD,CAAP;AACAJ,IAAAA,oBAAoB,CAAC,KAAD,CAApB,CAF0C,CAI1C;;AACA,UAAMC,OAAO,CAAC;AAAES,MAAAA;AAAF,KAAD,CAAb;AACA,UAAM,oDAAuBH,YAAvB,CAAN;AACA,UAAM,4DAA2BA,YAA3B,CAAN,CAP0C,CAS1C;AACA;AACA;;AACAC,IAAAA,OAAO,CAACM,EAAR,CAAW,CAAX;AACH,GAbqB,EAanB,CAACP,YAAD,EAAeC,OAAf,EAAwBE,WAAxB,EAAqCV,oBAArC,EAA2DC,OAA3D,CAbmB,CAAtB;AAeA,QAAMc,oBAAoB,GAAG,wBAAY,MAAM;AAC3CX,IAAAA,OAAO,CAAC,iBAAD,CAAP;AACH,GAF4B,EAE1B,EAF0B,CAA7B;AAIA,QAAMY,YAAY,GAAG,wBAAY,MAAM;AACnCZ,IAAAA,OAAO,CAAC,QAAD,CAAP;AACH,GAFoB,EAElB,EAFkB,CAArB;AAIA,QAAMa,mBAAmB,GAAG,wBAAY,MAAM;AAC1Cb,IAAAA,OAAO,CAAC,gBAAD,CAAP;AACH,GAF2B,EAEzB,EAFyB,CAA5B;AAIA,QAAMc,qBAAqB,GAAG,wBAAY,MAAM;AAC5Cd,IAAAA,OAAO,CAAC,SAAD,CAAP;AACH,GAF6B,EAE3B,EAF2B,CAA9B,CAxCmC,CA4CnC;AACA;AACA;;AACA,wBAAU,MAAM;AACZJ,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACH,GAFD,EAEG,CAACS,QAAD,EAAWT,oBAAX,CAFH,EA/CmC,CAmDnC;;AACA,wBAAU,MAAM;AACZ,QAAIY,cAAJ,EAAoB;AAChBR,MAAAA,OAAO,CAAC,SAAD,CAAP;AACH,KAFD,MAEO;AACHA,MAAAA,OAAO,CAAC,QAAD,CAAP;AACH;AACJ,GAND,EAMG,CAACL,iBAAD,EAAoBa,cAApB,CANH;AAQA,SAAO;AACHM,IAAAA,qBADG;AAEHD,IAAAA,mBAFG;AAGHF,IAAAA,oBAHG;AAIHC,IAAAA,YAJG;AAKHH,IAAAA,aALG;AAMHM,IAAAA,cAAc,EAAEb,WANb;AAOHD,IAAAA,QAPG;AAQHF,IAAAA;AARG,GAAP;AAUH,CAtEM","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useApolloClient, useMutation } from '@apollo/client';\n\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\nimport { clearCartDataFromCache } from '@magento/peregrine/lib/Apollo/clearCartDataFromCache';\nimport { clearCustomerDataFromCache } from '@magento/peregrine/lib/Apollo/clearCustomerDataFromCache';\n\n/**\n * The useAccountMenu talon complements the AccountMenu component.\n *\n * @param {Object} props\n * @param {DocumentNode} props.mutations.signOutMutation - Mutation to be called for signout.\n * @param {Boolean} props.accountMenuIsOpen - Boolean to notify if the account menu dropdown is open.\n * @param {Function} props.setAccountMenuIsOpen - Function to set the value of accountMenuIsOpen\n *\n * @returns {Object}    talonProps\n * @returns {String}    talonProps.view - Current view.\n * @returns {String}  talonProps.username - Username of the current user trying to login / logged in.\n * @returns {Boolean}   talonProps.isUserSignedIn - Boolean to notify if the user is signed in.\n * @returns {Function}  talonProps.handleSignOut - Function to handle the signout workflow.\n * @returns {Function}  talonProps.handleForgotPassword - Function to handle forgot password workflow.\n * @returns {Function}  talonProps.handleCreateAccount - Function to handle create account workflow.\n * @returns {Function}  talonProps.setUsername - Function to set the username.\n */\n\nexport const useAccountMenu = props => {\n    const { mutations, accountMenuIsOpen, setAccountMenuIsOpen } = props;\n    const { signOut: signOutMutation } = mutations;\n\n    const [view, setView] = useState('SIGNIN');\n    const [username, setUsername] = useState('');\n\n    const apolloClient = useApolloClient();\n    const history = useHistory();\n    const location = useLocation();\n    const [revokeToken] = useMutation(signOutMutation);\n    const [{ isSignedIn: isUserSignedIn }, { signOut }] = useUserContext();\n\n    const handleSignOut = useCallback(async () => {\n        setView('SIGNIN');\n        setAccountMenuIsOpen(false);\n\n        // Delete cart/user data from the redux store.\n        await signOut({ revokeToken });\n        await clearCartDataFromCache(apolloClient);\n        await clearCustomerDataFromCache(apolloClient);\n\n        // Refresh the page as a way to say \"re-initialize\". An alternative\n        // would be to call apolloClient.resetStore() but that would require\n        // a large refactor.\n        history.go(0);\n    }, [apolloClient, history, revokeToken, setAccountMenuIsOpen, signOut]);\n\n    const handleForgotPassword = useCallback(() => {\n        setView('FORGOT_PASSWORD');\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        setView('SIGNIN');\n    }, []);\n\n    const handleCreateAccount = useCallback(() => {\n        setView('CREATE_ACCOUNT');\n    }, []);\n\n    const handleAccountCreation = useCallback(() => {\n        setView('ACCOUNT');\n    }, []);\n\n    // Close the Account Menu on page change.\n    // This includes even when the page \"changes\" to the current page.\n    // This can happen when clicking on a link to a page you're already on, for example.\n    useEffect(() => {\n        setAccountMenuIsOpen(false);\n    }, [location, setAccountMenuIsOpen]);\n\n    // Update view based on user status everytime accountMenuIsOpen has changed.\n    useEffect(() => {\n        if (isUserSignedIn) {\n            setView('ACCOUNT');\n        } else {\n            setView('SIGNIN');\n        }\n    }, [accountMenuIsOpen, isUserSignedIn]);\n\n    return {\n        handleAccountCreation,\n        handleCreateAccount,\n        handleForgotPassword,\n        handleCancel,\n        handleSignOut,\n        updateUsername: setUsername,\n        username,\n        view\n    };\n};\n"]}