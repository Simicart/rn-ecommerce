{"version":3,"sources":["useCommunicationsPage.js"],"names":["useCommunicationsPage","props","afterSubmit","mutations","setNewsletterSubscriptionMutation","queries","getCustomerSubscriptionQuery","isSignedIn","data","subscriptionData","error","subscriptionDataError","skip","initialValues","isSubscribed","customer","is_subscribed","setNewsletterSubscription","setNewsletterSubscriptionError","loading","isSubmitting","handleSubmit","formValues","variables","formErrors","isDisabled"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEO,MAAMA,qBAAqB,GAAGC,KAAK,IAAI;AAC1C,QAAM;AACFC,IAAAA,WADE;AAEFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KAFT;AAGFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAHP,MAIFL,KAJJ;AAMA,QAAM,CAAC;AAAEM,IAAAA;AAAF,GAAD,IAAmB,2BAAzB;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC,gBAAR;AAA0BC,IAAAA,KAAK,EAAEC;AAAjC,MAA2D,sBAC7DL,4BAD6D,EAE7D;AAAEM,IAAAA,IAAI,EAAE,CAACL;AAAT,GAF6D,CAAjE;AAKA,QAAMM,aAAa,GAAG,oBAAQ,MAAM;AAChC,QAAIJ,gBAAJ,EAAsB;AAClB,aAAO;AAAEK,QAAAA,YAAY,EAAEL,gBAAgB,CAACM,QAAjB,CAA0BC;AAA1C,OAAP;AACH;AACJ,GAJqB,EAInB,CAACP,gBAAD,CAJmB,CAAtB;AAMA,QAAM,CACFQ,yBADE,EAEF;AAAEP,IAAAA,KAAK,EAAEQ,8BAAT;AAAyCC,IAAAA,OAAO,EAAEC;AAAlD,GAFE,IAGF,yBAAYhB,iCAAZ,CAHJ;AAKA,QAAMiB,YAAY,GAAG,wBACjB,MAAMC,UAAN,IAAoB;AAChB,QAAI;AACA,YAAML,yBAAyB,CAAC;AAC5BM,QAAAA,SAAS,EAAED;AADiB,OAAD,CAA/B;AAGH,KAJD,CAIE,MAAM;AACJ;AACA;AACA;AACH;;AACD,QAAIpB,WAAJ,EAAiB;AACbA,MAAAA,WAAW;AACd;AACJ,GAdgB,EAejB,CAACe,yBAAD,EAA4Bf,WAA5B,CAfiB,CAArB;AAkBA,SAAO;AACHsB,IAAAA,UAAU,EAAE,CAACN,8BAAD,EAAiCP,qBAAjC,CADT;AAEHE,IAAAA,aAFG;AAGHQ,IAAAA,YAHG;AAIHI,IAAAA,UAAU,EAAEL,YAJT;AAKHb,IAAAA;AALG,GAAP;AAOH,CAlDM","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\nimport { useUserContext } from '../../context/user';\n\nexport const useCommunicationsPage = props => {\n    const {\n        afterSubmit,\n        mutations: { setNewsletterSubscriptionMutation },\n        queries: { getCustomerSubscriptionQuery }\n    } = props;\n\n    const [{ isSignedIn }] = useUserContext();\n\n    const { data: subscriptionData, error: subscriptionDataError } = useQuery(\n        getCustomerSubscriptionQuery,\n        { skip: !isSignedIn }\n    );\n\n    const initialValues = useMemo(() => {\n        if (subscriptionData) {\n            return { isSubscribed: subscriptionData.customer.is_subscribed };\n        }\n    }, [subscriptionData]);\n\n    const [\n        setNewsletterSubscription,\n        { error: setNewsletterSubscriptionError, loading: isSubmitting }\n    ] = useMutation(setNewsletterSubscriptionMutation);\n\n    const handleSubmit = useCallback(\n        async formValues => {\n            try {\n                await setNewsletterSubscription({\n                    variables: formValues\n                });\n            } catch {\n                // we have an onError link that logs errors, and FormError already renders this error, so just return\n                // to avoid triggering the success callback\n                return;\n            }\n            if (afterSubmit) {\n                afterSubmit();\n            }\n        },\n        [setNewsletterSubscription, afterSubmit]\n    );\n\n    return {\n        formErrors: [setNewsletterSubscriptionError, subscriptionDataError],\n        initialValues,\n        handleSubmit,\n        isDisabled: isSubmitting,\n        isSignedIn\n    };\n};\n"]}