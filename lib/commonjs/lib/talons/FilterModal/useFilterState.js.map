{"version":3,"sources":["useFilterState.js"],"names":["init","next","Map","reducer","state","action","payload","type","group","item","nextState","nextSet","Set","get","add","set","delete","size","has","wrappedReducer","useFilterState","dispatch","addItem","clear","removeItem","setItems","toggleItem","api"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useReducer } from 'react';\n\nimport withLogger from '../../util/withLogger';\n\nconst init = next => (next instanceof Map ? next : new Map());\n\nconst reducer = (state, action) => {\n    const { payload, type } = action;\n\n    switch (type) {\n        case 'clear': {\n            return init();\n        }\n        case 'add item': {\n            const { group, item } = payload;\n            const nextState = new Map(state);\n            const nextSet = new Set(state.get(group));\n\n            nextSet.add(item);\n            nextState.set(group, nextSet);\n\n            return nextState;\n        }\n        case 'remove item': {\n            const { group, item } = payload;\n            const nextState = new Map(state);\n            const nextSet = new Set(state.get(group));\n\n            nextSet.delete(item);\n\n            // if removing an item leaves a group empty, delete that group\n            if (nextSet.size) {\n                nextState.set(group, nextSet);\n            } else {\n                nextState.delete(group);\n            }\n\n            return nextState;\n        }\n        case 'toggle item': {\n            const { group, item } = payload;\n            const nextState = new Map(state);\n            const nextSet = new Set(state.get(group));\n\n            if (nextSet.has(item)) {\n                nextSet.delete(item);\n            } else {\n                nextSet.add(item);\n            }\n\n            // if removing an item leaves a group empty, delete that group\n            if (nextSet.size) {\n                nextState.set(group, nextSet);\n            } else {\n                nextState.delete(group);\n            }\n\n            return nextState;\n        }\n        case 'set items': {\n            return init(payload);\n        }\n    }\n};\n\nconst wrappedReducer = withLogger(reducer);\n\nexport const useFilterState = () => {\n    const [state, dispatch] = useReducer(wrappedReducer, null, init);\n\n    const addItem = useCallback(\n        payload => {\n            dispatch({ payload, type: 'add item' });\n        },\n        [dispatch]\n    );\n\n    const clear = useCallback(\n        payload => {\n            dispatch({ payload, type: 'clear' });\n        },\n        [dispatch]\n    );\n\n    const removeItem = useCallback(\n        payload => {\n            dispatch({ payload, type: 'remove item' });\n        },\n        [dispatch]\n    );\n\n    const setItems = useCallback(\n        payload => {\n            dispatch({ payload, type: 'set items' });\n        },\n        [dispatch]\n    );\n\n    const toggleItem = useCallback(\n        payload => {\n            dispatch({ payload, type: 'toggle item' });\n        },\n        [dispatch]\n    );\n\n    const api = useMemo(\n        () => ({\n            addItem,\n            clear,\n            dispatch,\n            removeItem,\n            setItems,\n            toggleItem\n        }),\n        [addItem, clear, dispatch, removeItem, setItems, toggleItem]\n    );\n\n    return [state, api];\n};\n"]}