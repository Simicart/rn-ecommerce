{"version":3,"sources":["cart.js"],"names":["CartContext","isCartEmpty","cart","details","items","length","getTotalQuantity","reduce","total","item","quantity","CartContextProvider","props","actions","asyncActions","cartState","children","derivedDetails","currencyCode","numItems","subtotal","prices","grand_total","currency","value","derivedCartState","isEmpty","cartApi","contextValue","apolloClient","fetchCartId","CREATE_CART_MUTATION","fetchCartDetails","CART_DETAILS_QUERY","getCartDetails","mapStateToProps","mapDispatchToProps","dispatch","useCartContext","gql"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { useApolloClient, useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\n\nimport { useAwaitQuery} from '../hooks/useAwaitQuery';\nimport actions from '../store/actions/cart/actions';\nimport * as asyncActions from '../store/actions/cart/asyncActions';\nimport bindActionCreators from '../util/bindActionCreators';\n\nconst CartContext = createContext();\n\nconst isCartEmpty = cart =>\n    !cart || !cart.details.items || cart.details.items.length === 0;\n\nconst getTotalQuantity = items =>\n    items.reduce((total, item) => total + item.quantity, 0);\n\nconst CartContextProvider = props => {\n    const { actions, asyncActions, cartState, children } = props;\n\n    // Make deeply nested details easier to retrieve and provide empty defaults\n    const derivedDetails = useMemo(() => {\n        if (isCartEmpty(cartState)) {\n            return {\n                currencyCode: 'USD',\n                numItems: 0,\n                subtotal: 0\n            };\n        } else {\n            return {\n                currencyCode: cartState.details.prices.grand_total.currency,\n                numItems: getTotalQuantity(cartState.details.items),\n                subtotal: cartState.details.prices.grand_total.value\n            };\n        }\n    }, [cartState]);\n\n    const derivedCartState = {\n        ...cartState,\n        isEmpty: isCartEmpty(cartState),\n        derivedDetails\n    };\n\n    const cartApi = useMemo(\n        () => ({\n            actions,\n            ...asyncActions\n        }),\n        [actions, asyncActions]\n    );\n\n    const contextValue = useMemo(() => [derivedCartState, cartApi], [\n        cartApi,\n        derivedCartState\n    ]);\n\n    const apolloClient = useApolloClient();\n    const [fetchCartId] = useMutation(CREATE_CART_MUTATION);\n    const fetchCartDetails = useAwaitQuery(CART_DETAILS_QUERY);\n\n    useEffect(() => {\n        // cartApi.getCartDetails initializes the cart if there isn't one. Also, we pass\n        // apolloClient to wipe the store in event of auth token expiry which\n        // will only happen if the user refreshes.\n        cartApi.getCartDetails({\n            apolloClient,\n            fetchCartId,\n            fetchCartDetails\n        });\n    }, [apolloClient, cartApi, fetchCartDetails, fetchCartId]);\n\n    return (\n        <CartContext.Provider value={contextValue}>\n            {children}\n        </CartContext.Provider>\n    );\n};\n\nconst mapStateToProps = ({ cart }) => ({ cartState: cart });\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n    asyncActions: bindActionCreators(asyncActions, dispatch)\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CartContextProvider);\n\nexport const useCartContext = () => useContext(CartContext);\n\n/**\n * We normally do not keep GQL queries in Peregrine. All components should pass\n * queries to talons/hooks. This is an exception to the rule because it would\n * be unecessarily complex to pass these queries to the context provider.\n */\nconst CREATE_CART_MUTATION = gql`\n    mutation createCart {\n        cartId: createEmptyCart\n    }\n`;\n\nconst CART_DETAILS_QUERY = gql`\n    query checkUserIsAuthed($cartId: String!) {\n        cart(cart_id: $cartId) {\n            # The purpose of this query is to check that the user is authorized\n            # to query on the current cart. Just fetch \"id\" to keep it small.\n            id\n        }\n    }\n`;\n"]}