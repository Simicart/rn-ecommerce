{"version":3,"sources":["appendOptionsToPayload.js"],"names":["appendOptionsToPayload","payload","optionSelections","optionCodes","item","variants","Map","option","configurable_options","set","Number","attribute_id","attribute_code","options","Array","from","id","value","option_id","option_value","selectedVariant","Object","assign","parentSku","sku","product"],"mappings":";;;;;;;AAAA;;AAEA;;;AAGO,MAAMA,sBAAsB,GAAG,CAClCC,OADkC,EAElCC,gBAFkC,EAGlCC,WAAW,GAAG,IAHoB,KAIjC;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAWH,OAAjB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeD,IAArB;;AAEA,MAAI,CAACD,WAAL,EAAkB;AACdA,IAAAA,WAAW,GAAG,IAAIG,GAAJ,EAAd;;AACA,SAAK,MAAMC,MAAX,IAAqBH,IAAI,CAACI,oBAA1B,EAAgD;AAC5C;AACA;AACA;AACAL,MAAAA,WAAW,CAACM,GAAZ,CAAgBC,MAAM,CAACH,MAAM,CAACI,YAAR,CAAtB,EAA6CJ,MAAM,CAACK,cAApD;AACH;AACJ;;AAED,QAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAWb,gBAAX,EAA6B,CAAC,CAACc,EAAD,EAAKC,KAAL,CAAD,MAAkB;AAC3DC,IAAAA,SAAS,EAAEF,EADgD;AAE3DG,IAAAA,YAAY,EAAEF;AAF6C,GAAlB,CAA7B,CAAhB;AAKA,QAAMG,eAAe,GAAG,qDAAoB;AACxCf,IAAAA,QADwC;AAExCF,IAAAA,WAFwC;AAGxCD,IAAAA;AAHwC,GAApB,CAAxB;AAMA,MAAI,CAACkB,eAAL,EAAsB,OAAOnB,OAAP;AAEtBoB,EAAAA,MAAM,CAACC,MAAP,CAAcrB,OAAd,EAAuB;AACnBY,IAAAA,OADmB;AAEnBU,IAAAA,SAAS,EAAEnB,IAAI,CAACoB,GAFG;AAGnBpB,IAAAA,IAAI,EAAEiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,eAAe,CAACK,OAAlC;AAHa,GAAvB;AAMA,SAAOxB,OAAP;AACH,CAtCM","sourcesContent":["import { findMatchingVariant } from './findMatchingProductVariant';\n\n/**\n * TODO Document\n */\nexport const appendOptionsToPayload = (\n    payload,\n    optionSelections,\n    optionCodes = null\n) => {\n    const { item } = payload;\n    const { variants } = item;\n\n    if (!optionCodes) {\n        optionCodes = new Map();\n        for (const option of item.configurable_options) {\n            // There's a type difference in configurable option queries between\n            // cart and product, casting to number is required. Can remove\n            // cast once MC-29839 is resolved.\n            optionCodes.set(Number(option.attribute_id), option.attribute_code);\n        }\n    }\n\n    const options = Array.from(optionSelections, ([id, value]) => ({\n        option_id: id,\n        option_value: value\n    }));\n\n    const selectedVariant = findMatchingVariant({\n        variants,\n        optionCodes,\n        optionSelections\n    });\n\n    if (!selectedVariant) return payload;\n\n    Object.assign(payload, {\n        options,\n        parentSku: item.sku,\n        item: Object.assign({}, selectedVariant.product)\n    });\n\n    return payload;\n};\n"]}