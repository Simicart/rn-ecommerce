{"version":3,"sources":["useCarousel.js"],"names":["sortImages","images","filter","disabled","sort","a","b","position","useCarousel","startIndex","activeItemIndex","setActiveItemIndex","sortedImages","handlePrevious","prevIndex","length","handleNext","api","state"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,UAAU,GAAG,CAACC,MAAM,GAAG,EAAV,KACfA,MAAM,CACDC,MADL,CACY,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB,CAACA,QAD/B,EAEKC,IAFL,CAEU,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAFnC,CADJ;AAKA;;;;;;;;AAMO,MAAMC,WAAW,GAAG,CAACP,MAAM,GAAG,EAAV,EAAcQ,UAAU,GAAG,CAA3B,KAAiC;AACxD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwC,qBAASF,UAAT,CAA9C;AAEA,QAAMG,YAAY,GAAG,oBAAQ,MAAMZ,UAAU,CAACC,MAAD,CAAxB,EAAkC,CAACA,MAAD,CAAlC,CAArB;AAEA,QAAMY,cAAc,GAAG,wBAAY,MAAM;AACrC;AACAF,IAAAA,kBAAkB,CAACG,SAAS,IAAI;AAC5B,UAAIA,SAAS,GAAG,CAAhB,EAAmB;AACf,eAAOA,SAAS,GAAG,CAAnB;AACH,OAFD,MAEO;AACH,eAAOb,MAAM,CAACc,MAAP,GAAgB,CAAvB;AACH;AACJ,KANiB,CAAlB;AAOH,GATsB,EASpB,CAACd,MAAD,CAToB,CAAvB;AAWA,QAAMe,UAAU,GAAG,wBAAY,MAAM;AACjC;AACAL,IAAAA,kBAAkB,CAACG,SAAS,IAAI,CAACA,SAAS,GAAG,CAAb,IAAkBb,MAAM,CAACc,MAAvC,CAAlB;AACH,GAHkB,EAGhB,CAACd,MAAD,CAHgB,CAAnB;AAKA,QAAMgB,GAAG,GAAG,oBACR,OAAO;AAAEJ,IAAAA,cAAF;AAAkBG,IAAAA,UAAlB;AAA8BL,IAAAA;AAA9B,GAAP,CADQ,EAER,CAACE,cAAD,EAAiBG,UAAjB,EAA6BL,kBAA7B,CAFQ,CAAZ;AAKA,QAAMO,KAAK,GAAG;AACVR,IAAAA,eADU;AAEVE,IAAAA;AAFU,GAAd;AAKA,SAAO,CAACM,KAAD,EAAQD,GAAR,CAAP;AACH,CAhCM","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nconst sortImages = (images = []) =>\n    images\n        .filter(({ disabled }) => !disabled)\n        .sort((a, b) => a.position - b.position);\n\n/**\n * A hook for interacting with the state of a carousel of images.\n *\n * @param {Array} images an array of image objects\n * @param {number} startIndex the index at which to start the carousel\n */\nexport const useCarousel = (images = [], startIndex = 0) => {\n    const [activeItemIndex, setActiveItemIndex] = useState(startIndex);\n\n    const sortedImages = useMemo(() => sortImages(images), [images]);\n\n    const handlePrevious = useCallback(() => {\n        // If we're on the first image we want to go to the last.\n        setActiveItemIndex(prevIndex => {\n            if (prevIndex > 0) {\n                return prevIndex - 1;\n            } else {\n                return images.length - 1;\n            }\n        });\n    }, [images]);\n\n    const handleNext = useCallback(() => {\n        // If we're on the last image we want to go to the first.\n        setActiveItemIndex(prevIndex => (prevIndex + 1) % images.length);\n    }, [images]);\n\n    const api = useMemo(\n        () => ({ handlePrevious, handleNext, setActiveItemIndex }),\n        [handlePrevious, handleNext, setActiveItemIndex]\n    );\n\n    const state = {\n        activeItemIndex,\n        sortedImages\n    };\n\n    return [state, api];\n};\n"]}