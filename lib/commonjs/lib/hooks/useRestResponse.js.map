{"version":3,"sources":["useRestResponse.js"],"names":["initialState","data","error","loading","reducer","state","payload","type","useRestResponse","dispatch","setData","setError","setLoading","receiveError","receiveResponse","resetState","api"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useReducer } from 'react';\n\nconst initialState = {\n    data: null,\n    error: null,\n    loading: false\n};\n\nconst reducer = (state, { payload, type }) => {\n    switch (type) {\n        case 'set data': {\n            return { ...state, data: payload };\n        }\n        case 'set error': {\n            return { ...state, error: payload };\n        }\n        case 'set loading': {\n            return { ...state, loading: payload };\n        }\n        case 'receive error': {\n            return {\n                data: null,\n                error: payload,\n                loading: false\n            };\n        }\n        case 'receive response': {\n            return {\n                data: payload,\n                error: null,\n                loading: false\n            };\n        }\n        case 'reset state': {\n            return initialState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n/**\n * Exposes the current state of the REST response\n * as well as an API for updating that state.\n */\nexport const useRestResponse = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const setData = useCallback(\n        payload => {\n            dispatch({\n                payload,\n                type: 'set data'\n            });\n        },\n        [dispatch]\n    );\n\n    const setError = useCallback(\n        payload => {\n            dispatch({\n                payload,\n                type: 'set error'\n            });\n        },\n        [dispatch]\n    );\n\n    const setLoading = useCallback(\n        payload => {\n            dispatch({\n                payload,\n                type: 'set loading'\n            });\n        },\n        [dispatch]\n    );\n\n    const receiveError = useCallback(\n        payload => {\n            dispatch({\n                payload,\n                type: 'receive error'\n            });\n        },\n        [dispatch]\n    );\n\n    const receiveResponse = useCallback(\n        payload => {\n            dispatch({\n                payload,\n                type: 'receive response'\n            });\n        },\n        [dispatch]\n    );\n\n    const resetState = useCallback(\n        payload => {\n            dispatch({\n                payload,\n                type: 'reset state'\n            });\n        },\n        [dispatch]\n    );\n\n    // This object should never change.\n    const api = useMemo(\n        () => ({\n            dispatch,\n            receiveError,\n            receiveResponse,\n            resetState,\n            setData,\n            setError,\n            setLoading\n        }),\n        [\n            dispatch,\n            receiveError,\n            receiveResponse,\n            resetState,\n            setData,\n            setError,\n            setLoading\n        ]\n    );\n\n    return [state, api];\n};\n"]}