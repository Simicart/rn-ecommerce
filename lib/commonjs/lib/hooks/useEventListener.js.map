{"version":3,"sources":["useEventListener.js"],"names":["useEventListener","target","type","listener","rest","addEventListener","removeEventListener"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;AAiBO,MAAMA,gBAAgB,GAAG,CAACC,MAAD,EAASC,IAAT,EAAeC,QAAf,EAAyB,GAAGC,IAA5B,KAAqC;AACjE,wBAAU,MAAM;AACZH,IAAAA,MAAM,CAACI,gBAAP,CAAwBH,IAAxB,EAA8BC,QAA9B,EAAwC,GAAGC,IAA3C,EADY,CAGZ;;AACA,WAAO,MAAM;AACTH,MAAAA,MAAM,CAACK,mBAAP,CAA2BJ,IAA3B,EAAiCC,QAAjC,EAA2C,GAAGC,IAA9C;AACH,KAFD;AAGH,GAPD,EAOG,CAACD,QAAD,EAAWC,IAAX,EAAiBH,MAAjB,EAAyBC,IAAzB,CAPH;AAQH,CATM","sourcesContent":["import { useEffect } from 'react';\n\n/**\n * A [React Hook]{@link https://reactjs.org/docs/hooks-intro.html} that gives\n * you the ability to add a callback function when an event is triggered on\n * an object.\n *\n * This function attaches an event listener to a target object on mount\n * and removes the listener on unmount.\n *\n * See [addEventListener()]{@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener}\n *\n * @kind function\n *\n * @param {EventTarget} target The [EventTarget]{@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget} to attach the listener to\n * @param {String} type The type of [Event]{@link https://developer.mozilla.org/en-US/docs/Web/Events} to listen for, e.g. 'resize', 'error', etc.\n * @param {Function} listener A callback function that is invoked when the event is triggered\n * @param  {...any} rest Any other arguments to pass to the addEventListener() function\n */\nexport const useEventListener = (target, type, listener, ...rest) => {\n    useEffect(() => {\n        target.addEventListener(type, listener, ...rest);\n\n        // return a callback, which is called on unmount\n        return () => {\n            target.removeEventListener(type, listener, ...rest);\n        };\n    }, [listener, rest, target, type]);\n};\n"]}