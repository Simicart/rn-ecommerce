{"version":3,"sources":["useScrollIntoView.js"],"names":["OPTIONS_DEFAULTS","behavior","block","useScrollIntoView","ref","shouldScroll","options","current","HTMLElement","scrollIntoView"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,gBAAgB,GAAG;AAAEC,EAAAA,QAAQ,EAAE,QAAZ;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAAzB;AAEA;;;;;;;;AAOO,MAAMC,iBAAiB,GAAG,CAC7BC,GAD6B,EAE7BC,YAF6B,EAG7BC,OAAO,GAAGN,gBAHmB,KAI5B;AACD,wBAAU,MAAM;AACZ,QAAII,GAAG,CAACG,OAAJ,IAAeH,GAAG,CAACG,OAAJ,YAAuBC,WAAtC,IAAqDH,YAAzD,EAAuE;AACnED,MAAAA,GAAG,CAACG,OAAJ,CAAYE,cAAZ,CAA2BH,OAA3B;AACH;AACJ,GAJD,EAIG,CAACA,OAAD,EAAUF,GAAV,EAAeC,YAAf,CAJH;AAKH,CAVM","sourcesContent":["import { useEffect } from 'react';\n\nconst OPTIONS_DEFAULTS = { behavior: 'smooth', block: 'center' };\n\n/**\n * Scrolls a ref into view on truthiness of a thing.\n *\n * @param {React.Ref} ref\n * @param {Boolean} shouldScroll allows scrolling if truthy\n * @param {OPTIONS_DEFAULTS} options https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n */\nexport const useScrollIntoView = (\n    ref,\n    shouldScroll,\n    options = OPTIONS_DEFAULTS\n) => {\n    useEffect(() => {\n        if (ref.current && ref.current instanceof HTMLElement && shouldScroll) {\n            ref.current.scrollIntoView(options);\n        }\n    }, [options, ref, shouldScroll]);\n};\n"]}